/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/components/m5_adc.js":
/*!**********************************!*\
  !*** ./app/components/m5_adc.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\n\r\nBlockly.Blocks['adc'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxttext());\r\n    },\r\n    _nxttext: function () {\r\n        return {\r\n            'message0': Blockly.Msg.ADC_PIN,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VAR', 'options': [\r\n                        ['A0', 'A0'],\r\n                        ['A1', 'A1'],\r\n                        ['A2', 'A2'],\r\n                        ['A3', 'A3'],\r\n                        ['A4', 'A4'],\r\n                        ['A5', 'A5'],\r\n                        ['A6', 'A6'],\r\n                        ['A7', 'A7']\r\n                    ]\r\n                },\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'input_value', 'name': 'PIN'\r\n                }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.ADC_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['adc'] = function (block) {\r\n    Blockly.addModule('machine');\r\n    var varname = block.getFieldValue('VAR') || '';\r\n    var pin = Blockly.Python.valueToCode(block, 'PIN', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    return varname + ' = machine.ADC(' + pin + ')\\n' + varname + '.atten(' + varname + '.ATTN_11DB)\\n';\r\n}\r\n\r\n\r\nBlockly.Blocks['adc_read'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxttext());\r\n    },\r\n    _nxttext: function () {\r\n        return {\r\n            'message0': Blockly.Msg.ADC_READ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VAR', 'options': [\r\n                        ['A0', 'A0'],\r\n                        ['A1', 'A1'],\r\n                        ['A2', 'A2'],\r\n                        ['A3', 'A3'],\r\n                        ['A4', 'A4'],\r\n                        ['A5', 'A5'],\r\n                        ['A6', 'A6'],\r\n                        ['A7', 'A7']\r\n                    ]\r\n                }\r\n            ],\r\n            'output':null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.ADC_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['adc_read'] = function (block) {\r\n    var varname = block.getFieldValue('VAR') || '';\r\n    var code = varname + '.read()';\r\n    return [code, Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\n\r\nBlockly.Blocks['adc_read_var'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxttext());\r\n    },\r\n    _nxttext: function () {\r\n        return {\r\n            'message0': Blockly.Msg.ADC_READ_VAR,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    \"type\": \"field_variable\",\r\n                    \"name\": \"VAR\",\r\n                    \"variable\": \"item\"\r\n                },\r\n                {'type': 'input_value', 'name': 'VALUE'}\r\n\r\n            ],\r\n            'inputsInline': true,\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'colour': Blockly.Msg.ADC_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['adc_read_var'] = function (block) {\r\n    var pin = Blockly.Python.statementToCode(block, 'VALUE', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    var varname = block.getField('VAR').variable_.name || '';\r\n    return varname + ' = ' + pin.trim() + '\\n';\r\n}\r\n\r\nBlockly.Blocks['adc_width'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxttext());\r\n    },\r\n    _nxttext: function () {\r\n        return {\r\n            'message0': Blockly.Msg.ADC_WIDTH,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VAR', 'options': [\r\n                        ['A0', 'A0'],\r\n                        ['A1', 'A1'],\r\n                        ['A2', 'A2'],\r\n                        ['A3', 'A3'],\r\n                        ['A4', 'A4'],\r\n                        ['A5', 'A5'],\r\n                        ['A6', 'A6'],\r\n                        ['A7', 'A7']\r\n                    ]\r\n                },\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'WIDTH', 'options':[\r\n                        ['9 bits', 'WIDTH_9BIT'],\r\n                        ['10 bits', 'WIDTH_10BIT'],\r\n                        ['11 bits', 'WIDTH_11BIT'],\r\n                        ['12 bits', 'WIDTH_12BIT']\r\n                    ]\r\n                }\r\n            ],\r\n            'inputsInline': true,\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'colour': Blockly.Msg.ADC_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['adc_width'] = function (block) {\r\n    Blockly.addModule('machine');\r\n    var varname = block.getFieldValue('VAR') || '';\r\n    var width = block.getFieldValue('WIDTH') || '';\r\n    return varname + '.width(machine.ADC.' + width + ')\\n';\r\n}\r\n\r\n\r\n// uint adc \r\n\r\nfunction getunitAll() {\r\n\tvar options = [];\r\n\tfor (var i = 0; i < Blockly.Units.length; i++) {\r\n\t\tif (Blockly.Units[i].type === 'adc') {\r\n\t\t\toptions.push([Blockly.Units[i].name, Blockly.Units[i].name]);\r\n\t\t}\r\n\t}\r\n\tif (options.length === 0) return [['', '']];\r\n\treturn options;\r\n}\r\nBlockly.Blocks['unit_adc_state'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.ADC_STATE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'ADC', 'options': getunitAll\r\n                },\r\n            ],\r\n            'output': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.PINS_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['unit_adc_state'] = function (block) {\r\n    var dac = block.getFieldValue('ADC') || '';\r\n    var code = dac + '.' +'read_vol()';\r\n    return [code, Blockly.Python.ORDER_CONDITIONAL];\r\n}\n\n//# sourceURL=webpack:///./app/components/m5_adc.js?");

/***/ }),

/***/ "./app/components/m5_angle.js":
/*!************************************!*\
  !*** ./app/components/m5_angle.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function getAllAngle() {\r\n    var options = [];\r\n    for (var i = 0; i < Blockly.Units.length; i++) {\r\n        if (Blockly.Units[i].type === 'angle') {\r\n            options.push([Blockly.Units[i].name, Blockly.Units[i].name]);\r\n        }\r\n    }\r\n    if (options.length === 0) return [['', '']];\r\n    return options;\r\n}\r\n\r\nBlockly.Blocks['angle_read'] = {\r\n    init: function () {\r\n        this.jsonInit(this._angleRead());\r\n    },\r\n    _angleRead: function() {\r\n        return {\r\n            'message0': Blockly.Msg.ANGLE_READ ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VARNAME', 'options': getAllAngle() \r\n                }\r\n            ],\r\n            'inputsInline': true,\r\n            'output':null,\r\n            'colour': Blockly.Msg.PINS_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['angle_read'] = function (block) {\r\n    var varname = block.getFieldValue('VARNAME');\r\n    return [varname + '.read()', Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\n\n//# sourceURL=webpack:///./app/components/m5_angle.js?");

/***/ }),

/***/ "./app/components/m5_bala.js":
/*!***********************************!*\
  !*** ./app/components/m5_bala.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\n\r\n\r\n// Blockly.Blocks['m5bala_start'] = {\r\n//     init: function () {\r\n//         this.jsonInit(this._M5balaStart());\r\n//     },\r\n//     _M5balaStart: function() {\r\n//         return {\r\n//             'message0': Blockly.Msg.M5BALA_START,\r\n//             'args0': [\r\n//                 { 'type': 'input_dummy' },\r\n//             ],\r\n//             'previousStatement': null,\r\n//             'nextStatement': null,\r\n//             'inputsInline': true,\r\n//             'colour': 260\r\n//         };\r\n//     }\r\n// // }\r\n// Blockly.Python['m5bala_start'] = function (block) {\r\n//     Blockly.addModule('m5bala');\r\n//     return 'm5bala.start(thread=True)\\n';\r\n// }\r\n\r\n// function_main_event\r\nBlockly.Blocks['m5bala_move'] = {\r\n    init: function () {\r\n        this.jsonInit(this._m5balamove());\r\n    },\r\n    _m5balamove: function() {\r\n        return {\r\n            'message0': Blockly.Msg.M5BALA_MOVE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'field_dropdown', 'name': 'DIRECTION', 'options':[[Blockly.Msg._OPTION_TO_FORWARD, 'forward'], [Blockly.Msg._OPTION_TO_BACKWARD, 'backward']]},\r\n                { 'type': 'input_value', 'name': 'SPEED'},\r\n                { 'type': 'input_dummy'},\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': 260\r\n        };\r\n    }\r\n}\r\nBlockly.Python['m5bala_move'] = function (block) {\r\n    var direction = block.getFieldValue('DIRECTION');\r\n    var speed = Blockly.Python.valueToCode(block, 'SPEED', Blockly.Python.ORDER_FUNCTION_CALL) || '50';\r\n    if (direction === 'backward') {\r\n        speed = -speed;\r\n    }\r\n    Blockly.addModule('m5bala');\r\n    return 'm5bala.move(' + speed + ')\\n';\r\n}\r\n\r\n// function_main_event\r\nBlockly.Blocks['m5bala_turn'] = {\r\n    init: function () {\r\n        this.jsonInit(this._speakerSing());\r\n    },\r\n    _speakerSing: function() {\r\n        return {\r\n            'message0': Blockly.Msg.M5BALA_TURN,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'field_dropdown', 'name': 'DIRECTION', 'options':[[Blockly.Msg._OPTION_TO_RIGHTWHEEL, 'right'], [Blockly.Msg._OPTION_TO_LEFTWHEEL, 'left']]},\r\n                {'type': 'input_value', 'name': 'ANGLE'},\r\n                { 'type': 'input_dummy' }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': 260 \r\n        };\r\n    }\r\n}\r\nBlockly.Python['m5bala_turn'] = function (block) {\r\n    var direction = block.getFieldValue('DIRECTION');\r\n    var angle = Blockly.Python.valueToCode(block, 'ANGLE', Blockly.Python.ORDER_FUNCTION_CALL) || '45';\r\n    if (direction === 'left') {\r\n        angle = -angle;\r\n    }\r\n    Blockly.addModule('m5bala');\r\n    return 'm5bala.turn(' + angle + ')\\n';\r\n}\r\n\r\n// function_main_event\r\nBlockly.Blocks['m5bala_rotate'] = {\r\n    init: function () {\r\n        this.jsonInit(this._speakerSing());\r\n    },\r\n    _speakerSing: function() {\r\n        return {\r\n            'message0': Blockly.Msg.M5BALA_ROTATE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'field_dropdown', 'name': 'DIRECTION', 'options':[[Blockly.Msg._OPTION_TO_RIGHT, 'right'], [Blockly.Msg._OPTION_TO_LEFT, 'left']]},\r\n                {'type': 'input_value', 'name': 'ANGLE'},\r\n                { 'type': 'input_dummy' }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': 260 \r\n        };\r\n    }\r\n}\r\nBlockly.Python['m5bala_rotate'] = function (block) {\r\n    var direction = block.getFieldValue('DIRECTION');\r\n    var angle = Blockly.Python.valueToCode(block, 'ANGLE', Blockly.Python.ORDER_FUNCTION_CALL) || '45';\r\n    if (direction === 'left') {\r\n        angle = -angle;\r\n    }\r\n    Blockly.addModule('m5bala');\r\n    return 'm5bala.rotate(' + angle + ')\\n';\r\n}\r\n\r\nBlockly.Blocks['m5bala_get_angle'] = {\r\n    init: function () {\r\n        this.jsonInit(this._speakerSing());\r\n    },\r\n    _speakerSing: function() {\r\n        return {\r\n            'message0': Blockly.Msg.M5BALA_GET_ANGLE,\r\n            'args0': [\r\n            ],\r\n            'inputsInline': true,\r\n            \"output\":null,\r\n            'colour': 260 \r\n        };\r\n    }\r\n}\r\nBlockly.Python['m5bala_get_angle'] = function (block) {\r\n    Blockly.addModule('m5bala');\r\n    return ['m5bala.angleX',Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\nBlockly.Blocks['m5bala_set_offset'] = {\r\n    init: function () {\r\n        this.jsonInit(this._speakerSing());\r\n    },\r\n    _speakerSing: function() {\r\n        return {\r\n            'message0': Blockly.Msg.M5BALA_SET_OFFSET,\r\n            'args0': [\r\n                {'type': 'input_value', 'name': 'ANGLEX'},\r\n            ],\r\n            'inputsInline': true,\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'colour': 260 \r\n        };\r\n    }\r\n}\r\nBlockly.Python['m5bala_set_offset'] = function (block) {\r\n    var angle = Blockly.Python.valueToCode(block, 'ANGLEX', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    Blockly.addModule('m5bala');\r\n    return `m5bala.angleX_offset=${angle}\\n`;\r\n}\r\n\r\nBlockly.Blocks['m5bala_loop'] = {\r\n    init: function () {\r\n        this.jsonInit(this._speakerSing());\r\n    },\r\n    _speakerSing: function() {\r\n        return {\r\n            'message0': Blockly.Msg.M5BALA_LOOP,\r\n            'args0': [\r\n            ],\r\n            'inputsInline': true,\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'colour': 260 \r\n        };\r\n    }\r\n}\r\nBlockly.Python['m5bala_loop'] = function (block) {\r\n    Blockly.addModule('m5bala');\r\n    return `m5bala.balance()\\n`;\r\n}\n\n//# sourceURL=webpack:///./app/components/m5_bala.js?");

/***/ }),

/***/ "./app/components/m5_bala_motor.js":
/*!*****************************************!*\
  !*** ./app/components/m5_bala_motor.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\n\r\nBlockly.Blocks['nxt_init'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxttext());\r\n    },\r\n    _nxttext: function() {\r\n        return {\r\n            'message0': Blockly.Msg.NXT_INIT,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VAR', 'options':[\r\n                        ['M1', 'M1'],\r\n                        ['M2', 'M2']\r\n                    ]\r\n                },\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'input_dummy' , 'name': 'PORT'},\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'PORT', 'options':[\r\n                        ['1', '1'],\r\n                        ['2', '2']\r\n                    ]\r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.NXT_MOTOR_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['nxt_init'] = function (block) {\r\n    var varname = block.getFieldValue('VAR') || '';\r\n    var port = block.getFieldValue('PORT') || '';\r\n    \r\n    Blockly.addModule('lego');\r\n    Blockly.addDeclare(varname);\r\n    console.log(varname);\r\n    \r\n    return varname + ' = lego.NXT_Motor(port=' + port + ')\\n';\r\n}\r\n// function_main_event\r\n\r\nBlockly.Blocks['nxt_set_pwm'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxtsetpwm());\r\n    },\r\n    _nxtsetpwm: function() {\r\n        return {\r\n            'message0': Blockly.Msg.NXT_SET_PWM,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VAR', 'options':[\r\n                        ['M1', 'M1'],\r\n                        ['M2', 'M2']\r\n                    ]\r\n                },\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'ROTATE', 'options':[\r\n                        [Blockly.Msg._OPTION_TO_CLOCKWISE, 'CW'],\r\n                        [Blockly.Msg._OPTION_TO_ANTICLOCKWISE, 'CCW']\r\n                    ]\r\n                },\r\n                { 'type': 'input_value', 'name': 'ANGLE' },\r\n                { 'type': 'input_dummy' },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.NXT_MOTOR_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['nxt_set_pwm'] = function (block) {\r\n    Blockly.addModule('lego');\r\n    var varname = block.getFieldValue('VAR') || '';\r\n    var rotate = block.getFieldValue('ROTATE') || '';\r\n    var angle = Blockly.Python.valueToCode(block, 'ANGLE', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    if (rotate == 'CCW' && angle != 0) angle = '-' + angle;\r\n    return varname + '.set_pwm(' + angle + ')\\n';\r\n}\r\n\r\n\r\nBlockly.Blocks['nxt_run'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxtrun());\r\n    },\r\n    _nxtrun: function() {\r\n        return {\r\n            'message0': Blockly.Msg.NXT_RUN,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VAR', 'options':[\r\n                        ['M1', 'M1'],\r\n                        ['M2', 'M2']\r\n                    ]\r\n                },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'DIRECTION', 'options':[\r\n                        [Blockly.Msg._OPTION_TO_FORWARD, 'forward'],\r\n                        [Blockly.Msg._OPTION_TO_BACKWARD, 'backward']\r\n                    ]\r\n                },\r\n                { 'type': 'input_value', 'name': 'DISTANCE' },\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'input_value', 'name': 'SPEED' },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.NXT_MOTOR_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['nxt_run'] = function (block) {\r\n    Blockly.addModule('lego');\r\n    var varname = block.getFieldValue('VAR') || '';\r\n    var direction = block.getFieldValue('DIRECTION') || '';\r\n    var distance = Blockly.Python.valueToCode(block, 'DISTANCE', Blockly.Python.ORDER_FUNCTION_CALL) || '500';\r\n    var speed = Blockly.Python.valueToCode(block, 'SPEED', Blockly.Python.ORDER_FUNCTION_CALL) || '255';\r\n    distance = direction == 'forward' ? distance : -distance;\r\n    return varname + '.run_distance(' + distance + ', ' + speed + ')\\n';\r\n}\r\n\r\n\r\n\r\nBlockly.Blocks['nxt_stop'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nextstop());\r\n    },\r\n    _nextstop: function() {\r\n        return {\r\n            'message0': Blockly.Msg.NXT_STOP,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VAR', 'options':[\r\n                        ['M1', 'M1'],\r\n                        ['M2', 'M2']\r\n                    ]\r\n                }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.NXT_MOTOR_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['nxt_stop'] = function (block) {\r\n    Blockly.addModule('lego');\r\n    var varname = block.getFieldValue('VAR') || '';\r\n    return varname + '.stop()\\n';\r\n}\r\n\r\n\r\nBlockly.Blocks['nxt_read_encoder'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxtreadencoder());\r\n    },\r\n    _nxtreadencoder: function() {\r\n        return {\r\n            'message0': Blockly.Msg.NXT_READ_ENCODER,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VAR', 'options':[\r\n                        ['M1', 'M1'],\r\n                        ['M2', 'M2']\r\n                    ]\r\n                }\r\n            ],\r\n            'inputsInline': true,\r\n            'output':null,\r\n            'colour': Blockly.Msg.NXT_MOTOR_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['nxt_read_encoder'] = function (block) {\r\n    Blockly.addModule('lego');\r\n    var varname = block.getFieldValue('VAR') || '';\r\n    var code = varname + '.read_encoder()';\r\n    return [code, Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\n\n//# sourceURL=webpack:///./app/components/m5_bala_motor.js?");

/***/ }),

/***/ "./app/components/m5_button.js":
/*!*************************************!*\
  !*** ./app/components/m5_button.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\n// function_in_event\r\n\r\nBlockly.Blocks['buttonA_pressed_handler'] = {\r\n    init: function () {\r\n        this.setDeletable(false);\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.BUTTONA_PRESSED_HANDLER,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    \"type\": \"input_statement\",\r\n                    \"name\": \"EVENT\",\r\n                }\r\n            ],\r\n            'colour': Blockly.Msg.BUTTON_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['buttonA_pressed_handler'] = function (block) {\r\n    var event = Blockly.Python.statementToCode(block, 'EVENT', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    return ['def buttonA_pressed():\\n' + event + '  pass', Blockly.Python.ORDER_MEMBER];\r\n}\r\n\r\n\r\n// function_out_event\r\nBlockly.Blocks['buttonB_pressed_handler'] = {\r\n    init: function () {\r\n        this.setDeletable(false);\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.BUTTONB_PRESSED_HANDLER,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    \"type\": \"input_statement\",\r\n                    \"name\": \"EVENT\",\r\n                }\r\n            ],\r\n            'colour': Blockly.Msg.BUTTON_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['buttonB_pressed_handler'] = function (block) {\r\n    var event = Blockly.Python.statementToCode(block, 'EVENT', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    return ['def buttonB_pressed():\\n' + event + '  pass', Blockly.Python.ORDER_MEMBER];\r\n}\r\n\r\n\r\n\r\n// function_out_event\r\nBlockly.Blocks['buttonC_pressed_handler'] = {\r\n    init: function () {\r\n        this.setDeletable(false);\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.BUTTONC_PRESSED_HANDLER,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    \"type\": \"input_statement\",\r\n                    \"name\": \"EVENT\",\r\n                }\r\n            ],\r\n            'colour': Blockly.Msg.BUTTON_HUE\r\n        }\r\n    }\r\n}\r\n\r\nBlockly.Python['buttonC_pressed_handler'] = function (block) {\r\n    var event = Blockly.Python.statementToCode(block, 'EVENT', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    return ['def buttonC_pressed():\\n' + event + '  pass', Blockly.Python.ORDER_MEMBER];\r\n}\r\n\r\n\r\n\r\n\r\n\r\nBlockly.Blocks['button_callback'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.BUTTONC_CALLBACK,\r\n            'args0': [\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'BUTTON', 'options': [['A', 'A'], ['B', 'B'], ['C', 'C']]\r\n                },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'EVENT', 'options': [[Blockly.Msg._OPTION_TO_DOWN, 'wasPressed'], [Blockly.Msg._OPTION_TO_UP, 'wasReleased']]\r\n                },\r\n            ],\r\n            \"message1\": \"%1\",\r\n            \"args1\": [\r\n              {\"type\": \"input_statement\", \"name\": \"FUNC\"}],\r\n            'colour': Blockly.Msg.BASIC_HUE\r\n        }\r\n    }\r\n}\r\n\r\nBlockly.Python['button_callback'] = function (block) {\r\n    var events = {\r\n        'wasPressed': 'pressed',\r\n        'wasReleased': 'released'\r\n    };\r\n    var button = block.getFieldValue('BUTTON') || 'A';\r\n    var event = block.getFieldValue('EVENT') || 'wasPressed';\r\n    var func = Blockly.Python.statementToCode(block, 'FUNC', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    var globalList = Blockly.defineGlobal();\r\n    var code = 'def button' + button + '_' + events[event] + '():\\n' + func + '  pass';\r\n    if (globalList.length > 0) {\r\n        // code = 'def button' + button + '_' + events[event] +'():\\n  global ' + globalList.join(', ') + '\\n' + func + '  pass';\r\n        code = 'def button' + button + '_' + events[event] + '():\\n  # global params\\n' + func + '  pass';\r\n    }\r\n    code = 'def button' + button + '_' + events[event] + '():\\n  # global params\\n' + func + '  pass';\r\n    Blockly.addButtonEvent({\r\n        id: block.id,\r\n        event: 'button' + button + '.' + event + '(callback=button' + button + '_' + events[event] + ')'\r\n    });\r\n\r\n    return [code, Blockly.Python.ORDER_MEMBER];\r\n}\r\n\r\n\r\nBlockly.Blocks['button_state'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.BUTTONC_STATE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'BUTTON', 'options': [['A', 'A'], ['B', 'B'], ['C', 'C']]\r\n                },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'EVENT', 'options': [[Blockly.Msg._OPTION_TO_DOWN, 'wasPressed'], [Blockly.Msg._OPTION_TO_UP, 'wasReleased']]\r\n                },\r\n            ],\r\n            'output': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.BASIC_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['button_state'] = function (block) {\r\n    var button = block.getFieldValue('BUTTON') || 'A';\r\n    var event = block.getFieldValue('EVENT') || 'wasPressed';\r\n    var code = 'button' + button + '.' + event + '()';\r\n    return [code, Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\nBlockly.Blocks['basic_on_loop'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.BASIC_ON_LOOP,\r\n            'args0': [\r\n            ],\r\n            \"message1\": \"%1\",\r\n            \"args1\": [\r\n              {\"type\": \"input_statement\", \"name\": \"LOOP\"}],\r\n            'previousStatement': null,\r\n            'colour': Blockly.Msg.BASIC_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['basic_on_loop'] = function (block) {\r\n    var func = Blockly.Python.statementToCode(block, 'LOOP') || '';\r\n    return 'while True:\\n' + func + '  wait(0.001)\\n';\r\n    // return 'while True:\\n' + func + '  if _thread.wait(20) == _thread.EXIT: raise OSError\\n';\r\n}\r\n\r\n\r\n/** unit button */\r\n\r\nfunction getdualbuttonAll() {\r\n\tvar options = [];\r\n\tfor (var i = 0; i < Blockly.Units.length; i++) {\r\n\t\tif (Blockly.Units[i].type === 'dual_button') {\r\n\t\t\toptions.push([Blockly.Units[i].name, Blockly.Units[i].name]);\r\n\t\t}\r\n\t}\r\n\tif (options.length === 0) return [['', '']];\r\n\treturn options;\r\n}\r\n\r\nfunction getbuttonAll() {\r\n\tvar options = [];\r\n\tfor (var i = 0; i < Blockly.Units.length; i++) {\r\n\t\tif (Blockly.Units[i].type === 'button') {\r\n\t\t\toptions.push([Blockly.Units[i].name, Blockly.Units[i].name]);\r\n\t\t}\r\n\t}\r\n\tif (options.length === 0) return [['', '']];\r\n\treturn options;\r\n}\r\nBlockly.Blocks['unit_button_callback'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.UNIT_BUTTON,\r\n            'args0': [\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'BUTTON', 'options': getbuttonAll\r\n                },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'EVENT', 'options': [[Blockly.Msg._OPTION_TO_DOWN, 'wasPressed'], [Blockly.Msg._OPTION_TO_UP, 'wasReleased']]\r\n                },\r\n            ],\r\n            \"message1\": \"%1\",\r\n            \"args1\": [\r\n              {\"type\": \"input_statement\", \"name\": \"FUNC\"}],\r\n            'colour': Blockly.Msg.TRACK_HUE\r\n        }\r\n    }\r\n}\r\n\r\nBlockly.Python['unit_button_callback'] = function (block) {\r\n    var events = {\r\n        'wasPressed': 'pressed',\r\n        'wasReleased': 'released'\r\n    };\r\n    var button = block.getFieldValue('BUTTON') || 'A';\r\n    var event = block.getFieldValue('EVENT') || 'wasPressed';\r\n    var func = Blockly.Python.statementToCode(block, 'FUNC', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    // var globalList = Blockly.defineGlobal();\r\n    var code = 'def' + button + '_' + events[event] + '():\\n' + func + '  pass';\r\n    // if (globalList.length > 0) {\r\n    //     // code = 'def button' + button + '_' + events[event] +'():\\n  global ' + globalList.join(', ') + '\\n' + func + '  pass';\r\n    //     code = 'def ' + button + '_' + events[event] + '():\\n  # global params\\n' + func + '  pass';\r\n    // }\r\n    code = 'def ' + button + '_' + events[event] + '():\\n  # global params\\n' + func + '  pass\\n';\r\n    code += button + '.' + event + '(callback=' + button + '_' + events[event] + ')'\r\n    // Blockly.addButtonEvent({\r\n    //     id: block.id,\r\n    //     event:  button + '.' + event + '(callback=' + button + '_' + events[event] + ')'\r\n    // });\r\n\r\n    return [code, Blockly.Python.ORDER_MEMBER];\r\n}\r\n\r\nBlockly.Blocks['unit_button_state'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.BUTTONC_STATE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'BUTTON', 'options': getbuttonAll\r\n                },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'EVENT', 'options': [[Blockly.Msg._OPTION_TO_DOWN, 'wasPressed'], [Blockly.Msg._OPTION_TO_UP, 'wasReleased']]\r\n                },\r\n            ],\r\n            'output': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.TRACK_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['unit_button_state'] = function (block) {\r\n    var button = block.getFieldValue('BUTTON') || 'A';\r\n    var event = block.getFieldValue('EVENT') || 'wasPressed';\r\n    var code = button + '.' + event + '()';\r\n    return [code, Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\n/** dual button */\r\nBlockly.Blocks['unit_dual_button_callback'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.UNIT_DUAL_BUTTON,\r\n            'args0': [\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'BUTTON', 'options': getdualbuttonAll\r\n                },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'BTN', 'options': [['A','btnA'],['B','btnB']]\r\n                },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'EVENT', 'options': [[Blockly.Msg._OPTION_TO_DOWN, 'wasPressed'], [Blockly.Msg._OPTION_TO_UP, 'wasReleased']]\r\n                },\r\n            ],\r\n            \"message1\": \"%1\",\r\n            \"args1\": [\r\n              {\"type\": \"input_statement\", \"name\": \"FUNC\"}],\r\n            'colour': Blockly.Msg.RGB_HUE\r\n        }\r\n    }\r\n}\r\n\r\nBlockly.Python['unit_dual_button_callback'] = function (block) {\r\n    var events = {\r\n        'wasPressed': 'pressed',\r\n        'wasReleased': 'released'\r\n    };\r\n    var button = block.getFieldValue('BUTTON') || 'A';\r\n    var btn = block.getFieldValue('BTN') || 'btnA';\r\n    var event = block.getFieldValue('EVENT') || 'wasPressed';\r\n    var func = Blockly.Python.statementToCode(block, 'FUNC', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    var globalList = Blockly.defineGlobal();\r\n    var code = 'def button' + button + '_' + events[event] + '():\\n' + func + 'pass';\r\n    // if (globalList.length > 0) {\r\n    //     // code = 'def button' + button + '_' + events[event] +'():\\n  global ' + globalList.join(', ') + '\\n' + func + '  pass';\r\n    //     code = 'def ' + button + '_' + events[event] + '():\\n  # global params\\n' + func + '  pass';\r\n    // }\r\n    code = `def ${button}_${btn}_${events[event]}():\\n  # global params\\n${func}  pass\\n`;\r\n    // code = 'def ' + button + '' + events[event] + '():\\n  # global params\\n' + func + '  pass\\n';\r\n    code += button + '.' + btn + '.' + event + '(callback=' + button + '_' + btn + '_' + events[event] + ')\\n'\r\n    // Blockly.addButtonEvent({\r\n    //     id: block.id,\r\n    //     event:  button + '.' + event + '(callback=' + button + '_' + events[event] + ')'\r\n    // });\r\n\r\n    return [code, Blockly.Python.ORDER_MEMBER];\r\n}\r\n\r\nBlockly.Blocks['unit_dual_button_state'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.UNIT_DUAL_BUTTON_STATE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'BUTTON', 'options': getdualbuttonAll\r\n                },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'BTN', 'options': [['A','btnA'],['B','btnB']]\r\n                },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'EVENT', 'options': [[Blockly.Msg._OPTION_TO_DOWN, 'wasPressed'], [Blockly.Msg._OPTION_TO_UP, 'wasReleased']]\r\n                },\r\n            ],\r\n            'output': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.RGB_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['unit_dual_button_state'] = function (block) {\r\n    var button = block.getFieldValue('BUTTON') || 'A';\r\n    var btn = block.getFieldValue('BTN') || 'btnA';\r\n    var event = block.getFieldValue('EVENT') || 'wasPressed';\r\n    var code =  button + '.' + btn +'.'+ event + '()';\r\n    return [code, Blockly.Python.ORDER_CONDITIONAL];\r\n}\n\n//# sourceURL=webpack:///./app/components/m5_button.js?");

/***/ }),

/***/ "./app/components/m5_byo.js":
/*!**********************************!*\
  !*** ./app/components/m5_byo.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// 自带块中添加的块\r\n\r\nBlockly.Blocks['convent_int'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.CONVENT_INT,\r\n            'args0': [\r\n                {\r\n                    \"type\": \"input_value\",\r\n                    \"name\": \"VALUE\"\r\n                  }\r\n            ],\r\n            'colour': Blockly.Msg.MATH_HUE,\r\n            \"output\": \"Number\"\r\n        };\r\n    }\r\n}\r\nBlockly.Python['convent_int'] = function (block) {\r\n    var int = Blockly.Python.valueToCode(block, 'VALUE', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    return [`int(${int})`, Blockly.Python.ORDER_MEMBER];\r\n}\r\n\r\nBlockly.Blocks['convent_float'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.CONVENT_FLOAT,\r\n            'args0': [\r\n                {\r\n                    \"type\": \"input_value\",\r\n                    \"name\": \"VALUE\"\r\n                  }\r\n            ],\r\n            'colour': Blockly.Msg.MATH_HUE,\r\n            \"output\": \"Number\"\r\n        };\r\n    }\r\n}\r\nBlockly.Python['convent_float'] = function (block) {\r\n    var int = Blockly.Python.valueToCode(block, 'VALUE', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    return [`float(${int})`, Blockly.Python.ORDER_MEMBER];\r\n}\r\n\r\nBlockly.Blocks['convent_str'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.CONVENT_STR,\r\n            'args0': [\r\n                {\r\n                    \"type\": \"input_value\",\r\n                    \"name\": \"VALUE\"\r\n                  }\r\n            ],\r\n            'colour':Blockly.Msg.TEXTS_HUE,\r\n            \"output\": \"String\"\r\n        };\r\n    }\r\n}\r\nBlockly.Python['convent_str'] = function (block) {\r\n    var int = Blockly.Python.valueToCode(block, 'VALUE', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    return [`str(${int})`, Blockly.Python.ORDER_MEMBER];\r\n}\r\n\n\n//# sourceURL=webpack:///./app/components/m5_byo.js?");

/***/ }),

/***/ "./app/components/m5_cardkb.js":
/*!*************************************!*\
  !*** ./app/components/m5_cardkb.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\nfunction getunitAll() {\r\n\tvar options = [];\r\n\tfor (var i = 0; i < Blockly.Units.length; i++) {\r\n\t\tif (Blockly.Units[i].type === 'cardkb') {\r\n\t\t\toptions.push([Blockly.Units[i].name, Blockly.Units[i].name]);\r\n\t\t}\r\n\t}\r\n\tif (options.length === 0) return [['', '']];\r\n\treturn options;\r\n}\r\n\r\nBlockly.Blocks['cardkb_getkey'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.CARDKB_GETKEY,\r\n            'inputsInline': true,\r\n            'output': null,\r\n            \"args0\": [\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'KEY', 'options': getunitAll\r\n                },\r\n            ],\r\n            'colour': Blockly.Msg.TIMER_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['cardkb_getkey'] = function (block) {\r\n    var lor = block.getFieldValue('KEY') || '';\r\n    var code =  lor + `.getKey()`;\r\n    return [code, Blockly.Python.ORDER_MEMBER];\r\n}\r\n\r\nBlockly.Blocks['cardkb_getstring'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.CARDKB_GETSTR,\r\n            'inputsInline': true,\r\n            'output': null,\r\n            \"args0\": [\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'STR', 'options': getunitAll\r\n                },\r\n            ],\r\n            'colour': Blockly.Msg.TIMER_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['cardkb_getstring'] = function (block) {\r\n    var lor = block.getFieldValue('STR') || '';\r\n    var code =  `${lor}.getString()`;\r\n    return [code, Blockly.Python.ORDER_MEMBER];\r\n}\r\n\n\n//# sourceURL=webpack:///./app/components/m5_cardkb.js?");

/***/ }),

/***/ "./app/components/m5_circle.js":
/*!*************************************!*\
  !*** ./app/components/m5_circle.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function getAllCircles (){\r\n    var options = [];\r\n    for (var i = 0; i < Blockly.Component.length; i++) {\r\n        if (Blockly.Component[i].type === 'circle') {\r\n            options.push([Blockly.Component[i].name, Blockly.Component[i].name]);\r\n        }\r\n    }\r\n    if (options.length === 0) return [['', '']];\r\n    return options;\r\n}\r\n// circle_set_size\r\nBlockly.Blocks['circle_set_size'] = {\r\n    init: function () {\r\n        this.jsonInit(this._circleSetSize());\r\n    },\r\n    _circleSetSize: function() {\r\n        return {\r\n            'message0': Blockly.Msg.CIRCLE_SET_SIZE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'field_dropdown', 'name': 'COMPONENT', 'options': getAllCircles },\r\n                { 'type': 'input_value', 'name': 'RADIUS' },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_CIRCLE_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['circle_set_size'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var radius = Blockly.Python.valueToCode(block, 'RADIUS', Blockly.Python.ORDER_FUNCTION_CALL) || '20';\r\n    return component + '.setSize(' + radius +')\\n';\r\n}\r\n\r\n// circle_set_position\r\n\r\nBlockly.Blocks['circle_set_position'] = {\r\n    init: function () {\r\n        this.jsonInit(this._circleSetPosition());\r\n    },\r\n    _circleSetPosition: function() {\r\n        return {\r\n            'message0': Blockly.Msg.CIRCLE_SET_POSITION,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'COMPONENT', 'options': getAllCircles \r\n                },\r\n                { 'type': 'input_value', 'name': 'X' },\r\n                { 'type': 'input_value', 'name': 'Y' }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_CIRCLE_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['circle_set_position'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var x = Blockly.Python.valueToCode(block, 'X', Blockly.Python.ORDER_FUNCTION_CALL) || '30';\r\n    var y = Blockly.Python.valueToCode(block, 'Y', Blockly.Python.ORDER_FUNCTION_CALL) || '30'\r\n    return component + '.setPosition(' + x + ', ' + y +')\\n';\r\n}\r\n\r\n// labelSetPositionX\r\n\r\nBlockly.Blocks['circle_set_position_x'] = {\r\n    init: function () {\r\n        this.jsonInit(this._circleSetPositionX());\r\n    },\r\n    _circleSetPositionX: function() {\r\n        return {\r\n            'message0': Blockly.Msg.CIRCLE_SET_POSITION_X,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'COMPONENT', 'options':  getAllCircles \r\n                },\r\n                { 'type': 'input_value', 'name': 'X' }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_CIRCLE_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['circle_set_position_x'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var x = Blockly.Python.valueToCode(block, 'X', Blockly.Python.ORDER_FUNCTION_CALL) || '30';\r\n    return component + '.setPosition(x=' + x + ')\\n';\r\n}\r\n// label_set_position_y\r\n\r\n\r\n\r\nBlockly.Blocks['circle_set_position_y'] = {\r\n    init: function () {\r\n        this.jsonInit(this._circleSetPositionY());\r\n    },\r\n    _circleSetPositionY: function() {\r\n        return {\r\n            'message0': Blockly.Msg.CIRCLE_SET_POSITION_Y,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'COMPONENT', 'options':  getAllCircles \r\n                },\r\n                { 'type': 'input_value', 'name': 'Y' }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_CIRCLE_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['circle_set_position_y'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var y = Blockly.Python.valueToCode(block, 'Y', Blockly.Python.ORDER_FUNCTION_CALL) || '30';\r\n    return component + '.setPosition(y=' + y +')\\n';\r\n}\r\n\r\n\r\n\r\n// circle_set_bgcolor\r\nBlockly.Blocks['circle_set_bgcolor'] = {\r\n    init: function () {\r\n        this.jsonInit(this._circleSetBgColor());\r\n    },\r\n    _circleSetBgColor: function() {\r\n        return {\r\n            'message0': Blockly.Msg.CIRCLE_SET_BGCOLOR,\r\n            'args0': [\r\n              { 'type': 'input_dummy' },\r\n              {\r\n                'type': 'field_dropdown', 'name': 'COMPONENT', 'options':  getAllCircles \r\n              },\r\n              {\r\n                'type': 'field_colour',\r\n                'name': 'COLOR',\r\n                'colour': '#ff0000'\r\n              }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_CIRCLE_HUE\r\n          }\r\n    }\r\n}\r\nBlockly.Python['circle_set_bgcolor'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var color = block.getFieldValue('COLOR') || '#ff0000';\r\n    return component + '.setBgColor(' + color.replace('#', '0x') +')\\n';\r\n}\r\n // circle_set_bgcolor_rgb\r\n\r\n\r\nBlockly.Blocks['circle_set_bgcolor_rgb'] = {\r\n    init: function () {\r\n        this.jsonInit(this._circleSetBgColorRgb());\r\n    },\r\n    _circleSetBgColorRgb: function() {\r\n        return {\r\n            'message0': Blockly.Msg.CIRCLE_SET_BGCOLOR_RGB,\r\n            'args0': [\r\n              { 'type': 'input_dummy' },\r\n              {\r\n                'type': 'field_dropdown', 'name': 'COMPONENT', 'options':  getAllCircles \r\n              },\r\n              { 'type': 'input_value', 'name': 'R' },\r\n              { 'type': 'input_value', 'name': 'G' },\r\n              { 'type': 'input_value', 'name': 'B' },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_CIRCLE_HUE\r\n          }\r\n    }\r\n}\r\nBlockly.Python['circle_set_bgcolor_rgb'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var r = Blockly.Python.valueToCode(block, 'R', Blockly.Python.ORDER_NONE) || '0';\r\n    var g = Blockly.Python.valueToCode(block, 'G', Blockly.Python.ORDER_NONE) || '0';\r\n    var b = Blockly.Python.valueToCode(block, 'B', Blockly.Python.ORDER_NONE) || '0';\r\n    if(isNaN(parseInt(r)) || isNaN(parseInt(g)) || isNaN(parseInt(b))) {\r\n        return component + `.setBgColor((${r} << 16) | (${g} << 8) | ${b})\\n`;\r\n    }\r\n    var hexR = Math.floor(Math.abs(parseInt(r)) % 256).toString(16);\r\n    var hexG = Math.floor(Math.abs(parseInt(g)) % 256).toString(16);\r\n    var hexB = Math.floor(Math.abs(parseInt(b)) % 256).toString(16);\r\n    if(hexR.length < 2) hexR = '0' + hexR;\r\n    if(hexG.length < 2) hexG = '0' + hexG;\r\n    if(hexB.length < 2) hexB = '0' + hexB;\r\n    return component + '.setBgColor(0x' + hexR + hexG + hexB + ')\\n';\r\n}\r\n\r\n\r\n\r\nBlockly.Blocks['circle_set_bordercolor'] = {\r\n    init: function () {\r\n        this.jsonInit(this._circleSetBorderColor());\r\n    },\r\n    _circleSetBorderColor: function() {\r\n        return  {\r\n            'message0': Blockly.Msg.CIRCLE_SET_BORDERCOLOR,\r\n            'args0': [\r\n              { 'type': 'input_dummy' },\r\n              {\r\n                'type': 'field_dropdown', 'name': 'COMPONENT', 'options':  getAllCircles \r\n              },\r\n              { 'type': 'field_colour', 'name': 'COLOR', 'colour': '#ff0000'},\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_CIRCLE_HUE\r\n          };\r\n    }\r\n}\r\nBlockly.Python['circle_set_bordercolor'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var color = block.getFieldValue('COLOR') || '#ff0000';\r\n    return component + '.setBorderColor(' + color.replace('#', '0x') +')\\n';\r\n}\r\n// rectSetBorderColorRgb\r\nBlockly.Blocks['circle_set_bordercolor_rgb'] = {\r\n    init: function () {\r\n        this.jsonInit(this._circleSetBorderColorRgb());\r\n    },\r\n    _circleSetBorderColorRgb: function() {\r\n        return {\r\n            'message0': Blockly.Msg.CIRCLE_SET_BORDERCOLOR_RGB,\r\n            'args0': [\r\n              { 'type': 'input_dummy' },\r\n              {\r\n                'type': 'field_dropdown', 'name': 'COMPONENT', 'options':  getAllCircles \r\n              },\r\n              { 'type': 'input_value', 'name': 'R' },\r\n              { 'type': 'input_value', 'name': 'G' },\r\n              { 'type': 'input_value', 'name': 'B' },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_CIRCLE_HUE\r\n          }\r\n    }\r\n}\r\nBlockly.Python['circle_set_bordercolor_rgb'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var r = Blockly.Python.valueToCode(block, 'R', Blockly.Python.ORDER_NONE) || '0';\r\n    var g = Blockly.Python.valueToCode(block, 'G', Blockly.Python.ORDER_NONE) || '0';\r\n    var b = Blockly.Python.valueToCode(block, 'B', Blockly.Python.ORDER_NONE) || '0';\r\n    if(isNaN(parseInt(r)) || isNaN(parseInt(g)) || isNaN(parseInt(b))) {\r\n        return component + `.setBorderColor((${r} << 16) | (${g} << 8) | ${b})\\n`;\r\n    }\r\n    var hexR = Math.floor(Math.abs(parseInt(r)) % 256).toString(16);\r\n    var hexG = Math.floor(Math.abs(parseInt(g)) % 256).toString(16);\r\n    var hexB = Math.floor(Math.abs(parseInt(b)) % 256).toString(16);\r\n    if(hexR.length < 2) hexR = '0' + hexR;\r\n    if(hexG.length < 2) hexG = '0' + hexG;\r\n    if(hexB.length < 2) hexB = '0' + hexB;\r\n    return component + '.setBorderColor(0x' + hexR + hexG + hexB + ')\\n';\r\n}\r\n\r\nBlockly.Blocks['circle_set_mode'] = {\r\n    init: function () {\r\n        this.jsonInit(this._labelSetPosition());\r\n    },\r\n    _labelSetPosition: function() {\r\n        return {\r\n            'message0': Blockly.Msg.CIRCLE_SET_MODE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'COMPONENT', 'options': getAllCircles\r\n                },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'MODE', 'options': [['hide','hide'],['show','show']]\r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_CIRCLE_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['circle_set_mode'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var mode = block.getFieldValue('MODE');\r\n    return component + '.'+ mode +'()\\n';\r\n}\n\n//# sourceURL=webpack:///./app/components/m5_circle.js?");

/***/ }),

/***/ "./app/components/m5_color.js":
/*!************************************!*\
  !*** ./app/components/m5_color.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// unit dac\r\nfunction getunitAll() {\r\n\tvar options = [];\r\n\tfor (var i = 0; i < Blockly.Units.length; i++) {\r\n\t\tif (Blockly.Units[i].type === 'color') {\r\n\t\t\toptions.push([Blockly.Units[i].name, Blockly.Units[i].name]);\r\n\t\t}\r\n\t}\r\n\tif (options.length === 0) return [['', '']];\r\n\treturn options;\r\n}\r\nBlockly.Blocks['color_getR'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.COLOR_GETR,\r\n            \"output\": null,\r\n            \"args0\": [\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'COLOR', 'options': getunitAll\r\n                },\r\n            ],\r\n            'colour': Blockly.Msg.TIMER_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['color_getR'] = function (block) {\r\n    var color = block.getFieldValue('COLOR') || '';\r\n    var code =  color + '.Red';\r\n    return [code, Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\nBlockly.Blocks['color_getG'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.COLOR_GETG,\r\n            \"output\": null,\r\n            \"args0\": [\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'COLOR', 'options': getunitAll\r\n                },\r\n            ],\r\n            'colour': Blockly.Msg.TIMER_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['color_getG'] = function (block) {\r\n    var color = block.getFieldValue('COLOR') || '';\r\n    var code = color + '.Green';\r\n    return [code, Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\nBlockly.Blocks['color_getB'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.COLOR_GETB,\r\n            \"output\": null,\r\n            \"args0\": [\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'COLOR', 'options': getunitAll\r\n                },\r\n            ],\r\n            'colour': Blockly.Msg.TIMER_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['color_getB'] = function (block) {\r\n    var color = block.getFieldValue('COLOR') || '';\r\n    var code = color + '.Blue';\r\n    return [code, Blockly.Python.ORDER_CONDITIONAL];\r\n}\n\n//# sourceURL=webpack:///./app/components/m5_color.js?");

/***/ }),

/***/ "./app/components/m5_dac.js":
/*!**********************************!*\
  !*** ./app/components/m5_dac.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\nBlockly.Blocks['dac'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxttext());\r\n    },\r\n    _nxttext: function () {\r\n        return {\r\n            'message0': Blockly.Msg.DAC_PIN,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    \"type\": \"field_variable\",\r\n                    \"name\": \"VAR\",\r\n                    \"variable\": \"dac\"\r\n                },\r\n                {\r\n                    'type': 'input_value', 'name': 'PIN'\r\n                }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.DAC_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['dac'] = function (block) {\r\n    Blockly.addModule('machine');\r\n    var varname = block.getField('VAR').variable_.name || '';\r\n    var pin = Blockly.Python.valueToCode(block, 'PIN', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    return varname + ' = machine.DAC(machine.Pin(' + pin + '))\\n';\r\n}\r\n\r\n\r\n\r\nBlockly.Blocks['dac_write'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxttext());\r\n    },\r\n    _nxttext: function () {\r\n        return {\r\n            'message0': Blockly.Msg.DAC_WIDTH,\r\n            'args0': [\r\n                { 'type': 'input_value','name':'VALUE'},\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    \"type\": \"field_variable\",\r\n                    \"name\": \"VAR\",\r\n                    \"variable\": \"dac\"\r\n                },\r\n            ],\r\n            'inputsInline': true,\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'colour': Blockly.Msg.DAC_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['dac_write'] = function (block) {\r\n    var varname = block.getField('VAR').variable_.name || '';\r\n    var value = Blockly.Python.valueToCode(block, 'VALUE', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    return varname + '.write(' + value + ')\\n';\r\n}\r\n\r\n// unit dac\r\nfunction getunitAll() {\r\n\tvar options = [];\r\n\tfor (var i = 0; i < Blockly.Units.length; i++) {\r\n\t\tif (Blockly.Units[i].type === 'dac') {\r\n\t\t\toptions.push([Blockly.Units[i].name, Blockly.Units[i].name]);\r\n\t\t}\r\n\t}\r\n\tif (options.length === 0) return [['', '']];\r\n\treturn options;\r\n}\r\nBlockly.Blocks['unit_dac_state'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.DAC_STATE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'input_value', 'name': 'FROM' },\r\n                \r\n                {\r\n                    'type': 'field_dropdown', 'name': 'DAC', 'options': getunitAll\r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.DHT_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['unit_dac_state'] = function (block) {\r\n\tvar from = Blockly.Python.valueToCode(block, 'FROM', Blockly.Python.ORDER_FUNCTION_CALL) || '1';\r\n    var dac = block.getFieldValue('DAC') || '';\r\n    // var code = dac + '.' +'set_vol( 0,'+ vol +')';\r\n    return dac + '.' +'set_vol('+ from +', 0)\\n';\r\n}\r\n\n\n//# sourceURL=webpack:///./app/components/m5_dac.js?");

/***/ }),

/***/ "./app/components/m5_dht12.js":
/*!************************************!*\
  !*** ./app/components/m5_dht12.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\n\r\nfunction getAllEnv() {\r\n    var options = [];\r\n    for (var i = 0; i < Blockly.Units.length; i++) {\r\n        if (Blockly.Units[i].type === 'env') {\r\n            options.push([Blockly.Units[i].name, Blockly.Units[i].name]);\r\n        }\r\n    }\r\n    if (options.length === 0) return [['', '']];\r\n    return options;\r\n}\r\n\r\nBlockly.Blocks['dht12_init'] = {\r\n    init: function () {\r\n        this.jsonInit(this._dht12Init());\r\n    },\r\n    _dht12Init: function() {\r\n        return {\r\n            'message0': Blockly.Msg.DHT12_INIT ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.DHT_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['dht12_init'] = function (block) {\r\n    Blockly.addModule('env');\r\n    Blockly.addDeclare('dht');\r\n    return 'global dht\\ndht = DHT12()\\n';\r\n}\r\n\r\nBlockly.Blocks['dht12_pressure'] = {\r\n    init: function () {\r\n        this.jsonInit(this._dhf12pressure());\r\n    },\r\n    _dhf12pressure: function() {\r\n        return {\r\n            'message0': Blockly.Msg.DHT12_PRESSURE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VARNAME', 'options': getAllEnv() \r\n                }\r\n            ],\r\n            'output':null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.DHT_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['dht12_pressure'] = function (block) {\r\n    // Blockly.addModule('env');\r\n    var varname = block.getFieldValue('VARNAME');\r\n    return [varname + '.pressure()', Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\n\r\n\r\n\r\nBlockly.Blocks['dht12_get_temperature'] = {\r\n    init: function () {\r\n        this.jsonInit(this._dhf12gettemp());\r\n    },\r\n    _dhf12gettemp: function() {\r\n        return {\r\n            'message0': Blockly.Msg.DHT12_GET_TEMPERATURE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VARNAME', 'options': getAllEnv() \r\n                }\r\n            ],\r\n            'output':null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.DHT_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['dht12_get_temperature'] = function (block) {\r\n    // Blockly.addModule('env');\r\n    var varname = block.getFieldValue('VARNAME');\r\n    return [varname + '.temperature()', Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\n\r\nBlockly.Blocks['dht12_get_humidity'] = {\r\n    init: function () {\r\n        this.jsonInit(this._dhf12gethunidity());\r\n    },\r\n    _dhf12gethunidity: function() {\r\n        return {\r\n            'message0': Blockly.Msg.DHT12_GET_HUMIDITY,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VARNAME', 'options': getAllEnv() \r\n                }\r\n            ],\r\n            'output':null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.DHT_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['dht12_get_humidity'] = function (block) {\r\n    // Blockly.addModule('env');\r\n    var varname = block.getFieldValue('VARNAME');\r\n    return [varname + '.humidity()', Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\n\n\n//# sourceURL=webpack:///./app/components/m5_dht12.js?");

/***/ }),

/***/ "./app/components/m5_earth.js":
/*!************************************!*\
  !*** ./app/components/m5_earth.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\n   function getAll () {\r\n    var options = [];\r\n    for (var i = 0; i < Blockly.Units.length; i++) {\r\n        if (Blockly.Units[i].type === 'earth') {\r\n            options.push([Blockly.Units[i].name, Blockly.Units[i].name]);\r\n        }\r\n    }\r\n    if (options.length === 0) return [['', '']];\r\n    return options;\r\n}\r\n\r\n\r\n\r\nBlockly.Blocks['earth_a_read'] = {\r\ninit: function () {\r\n    this.jsonInit(this._eartharead());\r\n},\r\n_eartharead: function() {\r\n    return {\r\n        'message0': Blockly.Msg.EARTH_A_READ,\r\n        'args0': [\r\n            { 'type': 'input_dummy' },\r\n            {\r\n                'type': 'field_dropdown', 'name': 'VARNAME', 'options':  getAll() \r\n            }\r\n        ],\r\n        'inputsInline': true,\r\n        'output':null,\r\n        'colour': Blockly.Msg.GPIO_HUE\r\n    };\r\n}\r\n}\r\nBlockly.Python['earth_a_read'] = function(block) {\r\n    var varname = block.getFieldValue('VARNAME');\r\n    return [varname + '.a_read()', Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\n\r\n\r\nBlockly.Blocks['earth_d_read'] = {\r\ninit: function () {\r\n    this.jsonInit(this._earthtbread());\r\n},\r\n_earthtbread: function() {\r\n    return {\r\n        'message0': Blockly.Msg.EARTH_D_READ,\r\n        'args0': [\r\n            { 'type': 'input_dummy' },\r\n            {\r\n                'type': 'field_dropdown', 'name': 'VARNAME', 'options':  getAll() \r\n            }\r\n        ],\r\n        'inputsInline': true,\r\n        'output':null,\r\n        'colour': Blockly.Msg.GPIO_HUE\r\n    };\r\n}\r\n}\r\nBlockly.Python['earth_d_read'] = function(block) {\r\n    var varname = block.getFieldValue('VARNAME');\r\n    return [varname + '.d_read()', Blockly.Python.ORDER_CONDITIONAL];\r\n}\n\n//# sourceURL=webpack:///./app/components/m5_earth.js?");

/***/ }),

/***/ "./app/components/m5_emoji.js":
/*!************************************!*\
  !*** ./app/components/m5_emoji.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\nBlockly.Blocks['emoji_show'] = {\r\n    init: function () {\r\n        this.setColour(Blockly.Msg.EMOJI_HUE);\r\n        this.setPreviousStatement(true);\r\n        this.setNextStatement(true);\r\n        this.setInputsInline(false);\r\n\r\n        this.appendDummyInput()\r\n            .appendField(Blockly.Msg.EMOJI_SHOW)\r\n            .appendField(new Blockly.FieldColour('#FF0000'), 'COLOR');\r\n        for (var i = 0; i < 7; i++) {\r\n            var line = this.appendDummyInput();\r\n            for (var j = 0; j < 7; j++) {\r\n                line.appendField(new Blockly.FieldCheckbox('FALSE'), 'MAP_' + i + '_' + j);\r\n            }\r\n        }\r\n    }\r\n}\r\nBlockly.Python['emoji_show'] = function (block) {\r\n    Blockly.addModule('emoji');\r\n    var color = block.getFieldValue('COLOR') || '#FF0000';\r\n    var map = [];\r\n    for (var i = 0; i < 7; i++) {\r\n        var line = [];\r\n        for (var j = 0; j < 7; j++) {\r\n            line.push(block.getFieldValue('MAP_' + i + '_' + j));\r\n        }\r\n        map.push(line);\r\n    }\r\n    return 'emoji.show_map(' + JSON.stringify(map).replace(/TRUE/g, 1).replace(/FALSE/g, 0).replace(/\"/g, '') + ', ' + color.replace('#', '0x') + ')\\n';\r\n}\r\n\r\nBlockly.Blocks['emoji_set_single'] = {\r\n    init: function () {\r\n        this.jsonInit(this._angleRead());\r\n    },\r\n    _angleRead: function() {\r\n        return {\r\n            'message0': Blockly.Msg.EMOJI_SET_SINGLE ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'LINE', 'options': [\r\n                        ['1', '0'],\r\n                        ['2', '1'],\r\n                        ['3', '2'],\r\n                        ['4', '3'],\r\n                        ['5', '4'],\r\n                        ['6', '5'],\r\n                        ['7', '6']\r\n                    ]\r\n                },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'ROW', 'options': [\r\n                        ['1', '0'],\r\n                        ['2', '1'],\r\n                        ['3', '2'],\r\n                        ['4', '3'],\r\n                        ['5', '4'],\r\n                        ['6', '5'],\r\n                        ['7', '6']\r\n                    ]\r\n                },\r\n                {'type': 'field_colour','name': 'COLOR','colour': '#ff0000' },\r\n            ],\r\n            'inputsInline': true,\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'colour': Blockly.Msg.EMOJI_HUE\r\n        };\r\n    }\r\n}\r\n\r\nBlockly.Python['emoji_set_single'] = function (block) {\r\n    Blockly.addModule('emoji');\r\n    var color = block.getFieldValue('COLOR') || '#FF0000';\r\n    var line = block.getFieldValue('LINE') || '1';\r\n    var row = block.getFieldValue('ROW') || '1';\r\n    return 'emoji.draw_square(' + row + ', ' + line + ', ' + color.replace('#', '0x') + ')\\n';\r\n}\r\n\r\n\r\nBlockly.Blocks['emoji_change'] = {\r\n    init: function () {\r\n        this.jsonInit(this._angleRead());\r\n    },\r\n    _angleRead: function() {\r\n        return {\r\n            'message0': Blockly.Msg.EMOJI_CHANGE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'INDEX', 'options': [\r\n                        ['0', '0'],\r\n                        ['1', '1'],\r\n                        ['2', '2'],\r\n                        ['3', '3'],\r\n                        ['4', '4'],\r\n                        ['5', '5'],\r\n                        ['6', '6'],\r\n                        ['7', '7']\r\n                    ]\r\n                },\r\n            ],\r\n            'inputsInline': true,\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'colour': Blockly.Msg.EMOJI_HUE\r\n        };\r\n    }\r\n}\r\n\r\nBlockly.Python['emoji_change'] = function (block) {\r\n    Blockly.addModule('emoji');\r\n    var row = block.getFieldValue('INDEX') || '0';\r\n    return 'emoji.show_normal('+ row +')\\n';\r\n}\r\n\n\n//# sourceURL=webpack:///./app/components/m5_emoji.js?");

/***/ }),

/***/ "./app/components/m5_event.js":
/*!************************************!*\
  !*** ./app/components/m5_event.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\n// function_in_event\r\nBlockly.Blocks['function_in_event'] = {\r\n    init: function () {\r\n        this.setDeletable(false);\r\n        this.jsonInit(this._functionInEvent());\r\n    },\r\n    _functionInEvent: function() {\r\n        return {\r\n            'message0': Blockly.Msg.FUNCTION_IN_EVENT ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    \"type\": \"input_statement\",\r\n                    \"name\": \"EVENT\",\r\n                }\r\n            ],\r\n            'colour': Blockly.Msg.BUTTON_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['function_in_event'] = function (block) {\r\n    var event = Blockly.Python.statementToCode(block, 'EVENT', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    return ['def setup():\\n' + event + '  pass', Blockly.Python.ORDER_MEMBER];\r\n}\r\n\r\n// function_out_event\r\nBlockly.Blocks['function_out_event'] = {\r\n    init: function () {\r\n        this.setDeletable(false);\r\n        this.jsonInit(this._functionOutEvent());\r\n    },\r\n    _functionOutEvent: function() {\r\n        return {\r\n            'message0': Blockly.Msg.FUNCTION_OUT_EVENT,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    \"type\": \"input_statement\",\r\n                    \"name\": \"EVENT\",\r\n                }\r\n            ],\r\n            'colour': Blockly.Msg.BUTTON_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['function_out_event'] = function (block) {\r\n    var event = Blockly.Python.statementToCode(block, 'EVENT', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    return ['def out_event():\\n' + event + '  pass', Blockly.Python.ORDER_MEMBER];\r\n}\r\n// function_main_event\r\nBlockly.Blocks['function_main_event'] = {\r\n    init: function () {\r\n        this.setDeletable(false);\r\n        this.jsonInit(this._functionMainEvent());\r\n    },\r\n    _functionMainEvent: function() {\r\n        return {\r\n            'message0': Blockly.Msg.FUNCTION_MAIN_EVENT,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    \"type\": \"input_statement\",\r\n                    \"name\": \"EVENT\",\r\n                }\r\n            ],\r\n            'colour': Blockly.Msg.BUTTON_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['function_main_event'] = function (block) {\r\n    var event = Blockly.Python.statementToCode(block, 'EVENT', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    return ['def loop():\\n' + event + '\\n  pass', Blockly.Python.ORDER_MEMBER];\r\n}\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./app/components/m5_event.js?");

/***/ }),

/***/ "./app/components/m5_execute.js":
/*!**************************************!*\
  !*** ./app/components/m5_execute.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("Blockly.Blocks['execute'] = {\r\n    init: function () {\r\n        this.jsonInit(this._execute());\r\n    },\r\n    _execute: function() {\r\n        return {\r\n            'message0': Blockly.Msg.EXECUTE_IN,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_input', 'name': 'CODE', 'text':' '\r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': '#2b90d9'\r\n        };\r\n    }\r\n}\r\nBlockly.Python['execute'] = function(block) {\r\n    var code = block.getFieldValue('CODE');\r\n    if(code === '') return '';\r\n    return code + '\\n';\r\n}\n\n//# sourceURL=webpack:///./app/components/m5_execute.js?");

/***/ }),

/***/ "./app/components/m5_ext_io.js":
/*!*************************************!*\
  !*** ./app/components/m5_ext_io.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function getunitAll() {\r\n\tvar options = [];\r\n\tfor (var i = 0; i < Blockly.Units.length; i++) {\r\n\t\tif (Blockly.Units[i].type === 'ext_io') {\r\n\t\t\toptions.push([Blockly.Units[i].name, Blockly.Units[i].name]);\r\n\t\t}\r\n\t}\r\n\tif (options.length === 0) return [['', '']];\r\n\treturn options;\r\n}\r\nBlockly.Blocks['extio_set_port'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.EXTIO_SET_PORT,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'EXTIO', 'options': getunitAll\r\n                },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'MODE', 'options': [['ALL_INPUT','ALL_INPUT'],['ALL_OUTPUT', 'ALL_OUTPUT']]\r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.DHT_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['extio_set_port'] = function (block) {\r\n    var extio = block.getFieldValue('EXTIO') || '';\r\n    var mode = block.getFieldValue('MODE') || '';\r\n    return extio + '.' +'set_port_mode('+extio+'.'+mode+')\\n';\r\n}\r\n\r\nBlockly.Blocks['extio_set_pin'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.EXTIO_SET_PIN,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'EXTIO', 'options': getunitAll\r\n                },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'MODE', 'options': [['INPUT','INPUT'],['OUTPUT', 'OUTPUT']]\r\n                },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'PIN', 'options': [['1', '1'],['2', '2'],['3', '3'],['4', '4'],['5', '5'],['6', '6'],['7', '7']]\r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.DHT_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['extio_set_pin'] = function (block) {\r\n    var extio = block.getFieldValue('EXTIO') || '';\r\n    var mode = block.getFieldValue('MODE') || '';\r\n    var pin = block.getFieldValue('PIN') || '';\r\n    return extio + '.' +'set_pin_mode(' + pin +', '+extio+'.'+ mode +')\\n';\r\n}\r\n\r\nBlockly.Blocks['extio_set_digiWritePort'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.EXTIO_SET_DIGIWRITEPORT,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'input_value', 'name': 'FROM' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'EXTIO', 'options': getunitAll\r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.DHT_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['extio_set_digiWritePort'] = function (block) {\r\n    var from = Blockly.Python.valueToCode(block, 'FROM', Blockly.Python.ORDER_FUNCTION_CALL) || '1';\r\n    var extio = block.getFieldValue('EXTIO') || '';\r\n    return extio + '.' +'digitWritePort('+ from +')\\n';\r\n}\r\n\r\nBlockly.Blocks['extio_set_digiWrite'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.EXTIO_SET_DIGIWRITE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'EXTIO', 'options': getunitAll\r\n                },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'PIN', 'options': [['1', '1'],['2', '2'],['3', '3'],['4', '4'],['5', '5'],['6', '6'],['7', '7']]\r\n                },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VALUE', 'options': [['low', '0'],['high', '1']]\r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.DHT_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['extio_set_digiWrite'] = function (block) {\r\n    var extio = block.getFieldValue('EXTIO') || '';\r\n    var pin = block.getFieldValue('PIN') || '';\r\n    var value = block.getFieldValue('VALUE') || '';\r\n    return extio + '.' +'digitWrite('+ pin +','+ value +')\\n';\r\n}\r\n\r\n\r\nBlockly.Blocks['extio_set_digiRead'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.EXTIO_SET_DIGIREAD,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'EXTIO', 'options': getunitAll\r\n                },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'PIN', 'options': [['1', '1'],['2', '2'],['3', '3'],['4', '4'],['5', '5'],['6', '6'],['7', '7']]\r\n                },\r\n            ],\r\n            'output': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.DHT_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['extio_set_digiRead'] = function (block) {\r\n    var extio = block.getFieldValue('EXTIO') || '';\r\n    var pin = block.getFieldValue('PIN') || '';\r\n    var code =  extio + '.' +'digitRead('+ pin +')';\r\n    return [code, Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\nBlockly.Blocks['extio_get_digiReadPort'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.EXTIO_GET_DIGIREADPORT,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'EXTIO', 'options': getunitAll\r\n                },\r\n            ],\r\n            'output': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.DHT_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['extio_get_digiReadPort'] = function (block) {\r\n    var extio = block.getFieldValue('EXTIO') || '';\r\n    var code =  extio + '.' +'digitReadPort()';\r\n    return [code, Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\n\n//# sourceURL=webpack:///./app/components/m5_ext_io.js?");

/***/ }),

/***/ "./app/components/m5_finger.js":
/*!*************************************!*\
  !*** ./app/components/m5_finger.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function gettofAll() {\r\n    var options = [];\r\n    for (var i = 0; i < Blockly.Units.length; i++) {\r\n        if (Blockly.Units[i].type === 'finger') {\r\n            options.push([Blockly.Units[i].name, Blockly.Units[i].name]);\r\n        }\r\n    }\r\n    if (options.length === 0) return [['', '']];\r\n    return options;\r\n}\r\n\r\nBlockly.Blocks['finger_read'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.FINGER_READ,\r\n            'args0': [\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'STATE', 'options': gettofAll\r\n                },\r\n            ],\r\n            \"message1\": \"%1\",\r\n            \"args1\": [\r\n                { \"type\": \"input_statement\", \"name\": \"FUNC\" }],\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.SPEAKER_HUE\r\n        }\r\n    }\r\n}\r\n\r\nBlockly.Python['finger_read'] = function (block) {\r\n    var finger = block.getFieldValue('STATE') || '';\r\n    var func = Blockly.Python.statementToCode(block, 'FUNC', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    let code = `def read_${finger}_cb(user_id, access):\\n  # global params\\n${func}  pass\\n`;\r\n    code +=  `${finger}.read_finger_cb(read_${finger}_cb)\\n`\r\n\r\n    return [code, Blockly.Python.ORDER_MEMBER];\r\n}\r\n\r\n\r\nBlockly.Blocks['finger_add_user'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.FINGER_ADD_USER,\r\n            'args0': [\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'STATE', 'options': gettofAll\r\n                },\r\n                { 'type': 'input_value', 'name': 'ID' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'ACCESS', 'options': [['1','1'],['2','2'],['3','3']]\r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.SPEAKER_HUE\r\n        }\r\n    }\r\n}\r\n\r\nBlockly.Python['finger_add_user'] = function (block) {\r\n    var id = Blockly.Python.valueToCode(block, 'ID', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    var access = block.getFieldValue('ACCESS') || '';\r\n    var finger = block.getFieldValue('STATE') || '';\r\n    var code = finger + '.' + 'add_user(' + id + ', '+ access +')\\n';\r\n    return code;\r\n}\r\n\r\n\r\n\r\n\r\nBlockly.Blocks['finger_get_id'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.FINGER_GET_ID,\r\n            'output': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.SPEAKER_HUE\r\n        }\r\n    }\r\n}\r\n\r\nBlockly.Python['finger_get_id'] = function (block) {\r\n    var code = 'user_id';\r\n    return [code, Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\n\r\nBlockly.Blocks['finger_get_access'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.FINGER_GET_ACCESS,\r\n            'output': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.SPEAKER_HUE\r\n        }\r\n    }\r\n}\r\n\r\nBlockly.Python['finger_get_access'] = function (block) {\r\n    var code ='access';\r\n    return [code, Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\n\r\n\r\nBlockly.Blocks['finger_remove_user'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.FINGER_REMOVE_USER,\r\n            'args0': [\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'STATE', 'options': gettofAll\r\n                },\r\n                { 'type': 'input_value', 'name': 'ID' },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.SPEAKER_HUE\r\n        }\r\n    }\r\n}\r\n\r\nBlockly.Python['finger_remove_user'] = function (block) {\r\n    var id = Blockly.Python.valueToCode(block, 'ID', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    var finger = block.getFieldValue('STATE') || '';\r\n    var code = finger + '.' + 'remover_user(' + id + ')\\n';\r\n    return code;\r\n}\r\n\r\nBlockly.Blocks['finger_removeAll'] = {\r\n\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.FINGER_REMOVEALL,\r\n            'args0': [\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'STATE', 'options': gettofAll\r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.SPEAKER_HUE\r\n        }\r\n    }\r\n}\r\n\r\nBlockly.Python['finger_removeAll'] = function (block) {\r\n    var finger = block.getFieldValue('STATE') || '';\r\n    var code = finger + '.' + 'remove_all_user()\\n';\r\n    return code;\r\n}\r\n\r\n\r\nBlockly.Blocks['finger_get_state'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.FINGER_GET_STATE,\r\n            'args0': [\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'STATE', 'options': gettofAll\r\n                },\r\n            ],\r\n            'output': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.SPEAKER_HUE\r\n        }\r\n    }\r\n}\r\n\r\nBlockly.Python['finger_get_state'] = function (block) {\r\n    var finger = block.getFieldValue('STATE') || '';\r\n    var code = finger + '.' + 'state';\r\n    return [code, Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\n\n//# sourceURL=webpack:///./app/components/m5_finger.js?");

/***/ }),

/***/ "./app/components/m5_gpio.js":
/*!***********************************!*\
  !*** ./app/components/m5_gpio.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\n\r\nBlockly.Blocks['gpio_pinout'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxttext());\r\n    },\r\n    _nxttext: function() {\r\n        return {\r\n            'message0': Blockly.Msg.GPIO_PINOUT,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    \"type\": \"field_variable\",\r\n                    \"name\": \"VAR\",\r\n                    \"variable\": \"pinout\"\r\n                },\r\n                {\r\n                    'type': 'input_value', 'name':'PIN'\r\n                }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.GPIO_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['gpio_pinout'] = function (block) {\r\n    Blockly.addModule('machine');\r\n    var varname = block.getField('VAR').variable_.name || '';\r\n    var pin = Blockly.Python.valueToCode(block, 'PIN', Blockly.Python.ORDER_FUNCTION_CALL) || 'FFFFFF';\r\n    return  varname + ' = machine.Pin(' + pin + ', machine.Pin.OUT)\\n';\r\n}\r\n\r\n\r\nBlockly.Blocks['gpio_pinin'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxttext());\r\n    },\r\n    _nxttext: function() {\r\n        return {\r\n            'message0': Blockly.Msg.GPIO_PININ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    \"type\": \"field_variable\",\r\n                    \"name\": \"VAR\",\r\n                    \"variable\": \"pinin\"\r\n                },\r\n                {\r\n                    'type': 'input_value', 'name':'PIN'\r\n                }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.GPIO_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['gpio_pinin'] = function (block) {\r\n    Blockly.addModule('machine');\r\n    var varname = block.getField('VAR').variable_.name || '';\r\n    var pin = Blockly.Python.valueToCode(block, 'PIN', Blockly.Python.ORDER_FUNCTION_CALL) || 'FFFFFF';\r\n    return varname + ' = machine.Pin(' + pin + ', machine.Pin.IN)\\n';\r\n}\r\n\r\n\r\n\r\nBlockly.Blocks['gpio_pinout_value'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxttext());\r\n    },\r\n    _nxttext: function() {\r\n        return {\r\n            'message0': Blockly.Msg.GPIO_PINOUT_VALUE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    \"type\": \"field_variable\",\r\n                    \"name\": \"VAR\",\r\n                    \"variable\": \"pinout\"\r\n                },\r\n                {\r\n                    'type': 'input_value', 'name':'VALUE'\r\n                }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.GPIO_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['gpio_pinout_value'] = function (block) {\r\n    var varname = block.getField('VAR').variable_.name || '';\r\n    var value = Blockly.Python.valueToCode(block, 'VALUE', Blockly.Python.ORDER_FUNCTION_CALL) || 'FFFFFF';\r\n    return varname + '.value(' + value + ')\\n';\r\n}\r\n\r\nBlockly.Blocks['gpio_pinin_value'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxttext());\r\n    },\r\n    _nxttext: function() {\r\n        return {\r\n            'message0': Blockly.Msg.GPIO_PININ_VALUE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    \"type\": \"field_variable\",\r\n                    \"name\": \"VAR\",\r\n                    \"variable\": \"val\"\r\n                },\r\n                {\r\n                    \"type\": \"field_variable\",\r\n                    \"name\": \"VAR1\",\r\n                    \"variable\": \"pinin\"\r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.GPIO_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['gpio_pinin_value'] = function (block) {\r\n    var varname = block.getField('VAR').variable_.name || '';\r\n    var varname1 = block.getField('VAR1').variable_.name || '';\r\n    return  varname + ' = ' + varname1 + '.value()\\n';\r\n}\r\n\n\n//# sourceURL=webpack:///./app/components/m5_gpio.js?");

/***/ }),

/***/ "./app/components/m5_iic.js":
/*!**********************************!*\
  !*** ./app/components/m5_iic.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("Blockly.Blocks['iic_set'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxttext());\r\n    },\r\n    _nxttext: function () {\r\n        return {\r\n            'message0': Blockly.Msg.IIC_SET,\r\n            'args0': [\r\n                {'type': 'field_dropdown', 'name': 'PORT', 'options': [\r\n                    ['portA', 'PORTA'],\r\n                    ['portC', 'PORTC']]\r\n              }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.IIC_HUE\r\n        };\r\n    },\r\n}\r\nBlockly.Python['iic_set'] = function (block) {\r\n    var port = block.getFieldValue('PORT') || '';\r\n    return `i2c_l = i2c_bus.get(i2c_bus.${port})\\n`\r\n}\r\n\r\nBlockly.Blocks['iic_scan'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxttext());\r\n    },\r\n    _nxttext: function () {\r\n        return {\r\n            'message0': Blockly.Msg.IIC_SCAN,\r\n            'args0': [\r\n            ],\r\n            'inputsInline': true,\r\n            \"output\": null,\r\n            'colour': Blockly.Msg.IIC_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['iic_scan'] = function (block) {\r\n    return [`i2c_l.scan()`,Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\nBlockly.Blocks['iic_addr'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxttext());\r\n    },\r\n    _nxttext: function () {\r\n        return {\r\n            'message0': Blockly.Msg.IIC_ADDR,\r\n            'args0': [\r\n                { 'type': 'input_value', 'name': 'ADDR' },\r\n            ],\r\n            'inputsInline': true,\r\n            \"output\": null,\r\n            'colour': Blockly.Msg.IIC_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['iic_addr'] = function (block) {\r\n    var addr =  Blockly.Python.valueToCode(block, 'ADDR', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    return [`i2c_l.is_ready(${addr})`,Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\nBlockly.Blocks['iic_read_addr'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxttext());\r\n    },\r\n    _nxttext: function () {\r\n        return {\r\n            'message0': Blockly.Msg.IIC_READ_ADDR,\r\n            'args0': [\r\n                { 'type': 'input_value', 'name': 'ADDR' },\r\n                { 'type': 'input_value', 'name': 'NUM' },\r\n            ],\r\n            'inputsInline': true,\r\n            \"output\": null,\r\n            'colour': Blockly.Msg.IIC_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['iic_read_addr'] = function (block) {\r\n    var addr =  Blockly.Python.valueToCode(block, 'ADDR', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    var num =  Blockly.Python.valueToCode(block, 'NUM', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    return [`i2c_l.readfrom(${addr},${num})`,Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\nBlockly.Blocks['iic_read_addr_from'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxttext());\r\n    },\r\n    _nxttext: function () {\r\n        return {\r\n            'message0': Blockly.Msg.IIC_READ_ADDR_FROM,\r\n            'args0': [\r\n                { 'type': 'input_value', 'name': 'ADDR' },\r\n                { 'type': 'input_value', 'name': 'REG' },\r\n                { 'type': 'input_value', 'name': 'NUM' },\r\n            ],\r\n            'inputsInline': true,\r\n            \"output\": null,\r\n            'colour': Blockly.Msg.IIC_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['iic_read_addr_from'] = function (block) {\r\n    var addr =  Blockly.Python.valueToCode(block, 'ADDR', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    var reg =  Blockly.Python.valueToCode(block, 'REG', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    var num =  Blockly.Python.valueToCode(block, 'NUM', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    return [`i2c_l.readfrom_mem(${addr},${reg},${num})`,Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\n\r\nBlockly.Blocks['i2c_read_byte'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxttext());\r\n    },\r\n    _nxttext: function () {\r\n        return {\r\n            'message0': Blockly.Msg.IIC_READ_BYTE,\r\n            'args0': [\r\n                { 'type': 'input_value', 'name': 'ADDR' },\r\n            ],\r\n            'inputsInline': true,\r\n            \"output\": null,\r\n            'colour': Blockly.Msg.IIC_HUE\r\n        };\r\n    }\r\n}\r\n\r\nBlockly.Python['i2c_read_byte'] = function (block) {\r\n    var addr =  Blockly.Python.valueToCode(block, 'ADDR', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    return [`i2c_l.readfrom(${addr},1)[0]`,Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\nBlockly.Blocks['i2c_read_addr_from_byte'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxttext());\r\n    },\r\n    _nxttext: function () {\r\n        return {\r\n            'message0': Blockly.Msg.IIC_READ_ADDR_FROM_BYTE,\r\n            'args0': [\r\n                { 'type': 'input_value', 'name': 'ADDR' },\r\n                { 'type': 'input_value', 'name': 'REG' },\r\n            ],\r\n            'inputsInline': true,\r\n            \"output\": null,\r\n            'colour': Blockly.Msg.IIC_HUE\r\n        };\r\n    }\r\n}\r\n\r\nBlockly.Python['i2c_read_addr_from_byte'] = function (block) {\r\n    var addr =  Blockly.Python.valueToCode(block, 'ADDR', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    var reg =  Blockly.Python.valueToCode(block, 'REG', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    return [`i2c_l.readfrom_mem(${addr},${reg},1)[0]`,Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\n\n//# sourceURL=webpack:///./app/components/m5_iic.js?");

/***/ }),

/***/ "./app/components/m5_image.js":
/*!************************************!*\
  !*** ./app/components/m5_image.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\n\r\nfunction getAllImages () {\r\n    var options = [];\r\n    for (var i = 0; i < Blockly.Component.length; i++) {\r\n        if (Blockly.Component[i].type === 'image') {\r\n            options.push([Blockly.Component[i].name, Blockly.Component[i].name]);\r\n        }\r\n    }\r\n    if (options.length === 0) return [['', '']];\r\n    return options;\r\n}\r\n\r\nfunction getResImages() {\r\n    var options = [];\r\n    for (var i = 0; i < Blockly.ResImages.length; i++) {\r\n        options.push([Blockly.ResImages[i], Blockly.ResImages[i]]);\r\n    }\r\n    if (options.length === 0) return [['', '']];\r\n    return options;\r\n}\r\n\r\n\r\n// image_hide\r\nBlockly.Blocks['image_hide'] = {\r\n    init: function () {\r\n        this.jsonInit(this._imageHide());\r\n    },\r\n    _imageHide: function() {\r\n        return {\r\n            'message0': Blockly.Msg.IMAGE_HIDE ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'field_dropdown', 'name': 'COMPONENT', 'options': getAllImages},\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_IMAGE_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['image_hide'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    return component + '.hide()\\n';\r\n}\r\n\r\n// image_show\r\nBlockly.Blocks['image_show'] = {\r\n    init: function () {\r\n        this.jsonInit(this._imageShow());\r\n    },\r\n    _imageShow: function() {\r\n        return {\r\n            'message0': Blockly.Msg.IMAGE_SHOW,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'COMPONENT', 'options': getAllImages\r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_IMAGE_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['image_show'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    return component + '.show()\\n';\r\n}\r\n\r\n// image_set_position_x\r\nBlockly.Blocks['image_set_position_x'] = {\r\n    init: function () {\r\n        this.jsonInit(this._imageSetPositionX());\r\n    },\r\n    _imageSetPositionX: function() {\r\n        return {\r\n            'message0': Blockly.Msg.IMAGE_SET_POSITION_X,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'COMPONENT', 'options':  getAllImages\r\n                },\r\n                { 'type': 'input_value', 'name': 'X' }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_IMAGE_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['image_set_position_x'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var x = Blockly.Python.valueToCode(block, 'X', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    return component + '.setPosition(x=' + x + ')\\n';\r\n}\r\n\r\n\r\n// image_set_position_y\r\nBlockly.Blocks['image_set_position_y'] = {\r\n    init: function () {\r\n        this.jsonInit(this._imgaeSetPositionY());\r\n    },\r\n    _imgaeSetPositionY: function() {\r\n        return {\r\n            'message0': Blockly.Msg.IMAGE_SET_POSITION_Y,\r\n            'args0': [\r\n              { 'type': 'input_dummy' },\r\n              {\r\n                'type': 'field_dropdown', 'name': 'COMPONENT', 'options':  getAllImages\r\n              },\r\n              { 'type': 'input_value', 'name': 'Y' }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_IMAGE_HUE\r\n          }\r\n    }\r\n}\r\nBlockly.Python['image_set_position_y'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var y = Blockly.Python.valueToCode(block, 'Y', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    return component + '.setPosition(y=' + y + ')\\n';\r\n}\r\n\r\n // image_set_position\r\nBlockly.Blocks['image_set_position'] = {\r\n    init: function () {\r\n        this.jsonInit(this._imageSetPosition());\r\n    },\r\n    _imageSetPosition: function() {\r\n        return {\r\n            'message0': Blockly.Msg.IMAGE_SET_POSITION,\r\n            'args0': [\r\n              { 'type': 'input_dummy' },\r\n              {\r\n                'type': 'field_dropdown', 'name': 'COMPONENT', 'options':  getAllImages\r\n              },\r\n              { 'type': 'input_value', 'name': 'X' },\r\n              { 'type': 'input_value', 'name': 'Y' },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_IMAGE_HUE\r\n          }\r\n    }\r\n}\r\nBlockly.Python['image_set_position'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var x = Blockly.Python.valueToCode(block, 'X', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var y = Blockly.Python.valueToCode(block, 'Y', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    return component + '.setPosition(' + x + ', ' + y + ')\\n';\r\n}\r\n\r\n// rect_set_position_y\r\nBlockly.Blocks['image_set_image'] = {\r\n    init: function () {\r\n        this.jsonInit(this._imageSetInage());\r\n    },\r\n    _imageSetInage: function() {\r\n        return {\r\n            'message0': Blockly.Msg.IMAGE_SET_IMAGE,\r\n            'args0': [\r\n              { 'type': 'input_dummy' },\r\n              {\r\n                'type': 'field_dropdown', 'name': 'COMPONENT', 'options': getAllImages\r\n              },\r\n              { 'type': 'input_dummy' },\r\n              {\r\n                'type': 'field_dropdown', 'name': 'IMAGE', 'options': getResImages \r\n              }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_IMAGE_HUE\r\n          }\r\n    }\r\n}\r\nBlockly.Python['image_set_image'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var image = block.getFieldValue('IMAGE');\r\n    return component + '.changeImg(\"res/' + image + '\")\\n';\r\n}\r\n\r\nBlockly.Blocks['image_set_mode'] = {\r\n    init: function () {\r\n        this.jsonInit(this._labelSetPosition());\r\n    },\r\n    _labelSetPosition: function() {\r\n        return {\r\n            'message0': Blockly.Msg.IMAGE_SET_MODE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'COMPONENT', 'options': getAllImages\r\n                },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'MODE', 'options': [['hide','hide'],['show','show']]\r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_LABEL_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['image_set_mode'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var mode = block.getFieldValue('MODE');\r\n    return component + '.'+ mode +'()\\n';\r\n}\n\n//# sourceURL=webpack:///./app/components/m5_image.js?");

/***/ }),

/***/ "./app/components/m5_imu.js":
/*!**********************************!*\
  !*** ./app/components/m5_imu.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\nBlockly.Blocks['IMU_GET_X'] = {\r\n    init: function () {\r\n        this.jsonInit(this._imuGETx());\r\n    },\r\n    _imuGETx: function() {\r\n        return {\r\n            'message0': Blockly.Msg.IMU_GET_X ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' }\r\n            ],\r\n            'inputsInline': true,\r\n            'output': null,\r\n            'colour': Blockly.Msg.DHT_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['IMU_GET_X'] = function () {\r\n    Blockly.addModule('imu');\r\n    return ['imu.ypr[1]', Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\n\r\nBlockly.Blocks['IMU_GET_Y'] = {\r\n    init: function () {\r\n        this.jsonInit(this._imuGETy());\r\n    },\r\n    _imuGETy: function() {\r\n        return {\r\n            'message0': Blockly.Msg.IMU_GET_Y ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' }\r\n            ],\r\n            'inputsInline': true,\r\n            'output': null,\r\n            'colour': Blockly.Msg.DHT_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['IMU_GET_Y'] = function () {\r\n    Blockly.addModule('imu');\r\n    return ['imu.ypr[2]', Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\nBlockly.Blocks['IMU_GET_Z'] = {\r\n    init: function () {\r\n        this.jsonInit(this._imuGETz());\r\n    },\r\n    _imuGETz: function() {\r\n        return {\r\n            'message0': Blockly.Msg.IMU_GET_Z ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' }\r\n            ],\r\n            'inputsInline': true,\r\n            'output': null,\r\n            'colour': Blockly.Msg.DHT_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['IMU_GET_Z'] = function () {\r\n    Blockly.addModule('imu');\r\n    return ['imu.ypr[0]', Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\nBlockly.Blocks['IMU_IS_LEVEL'] = {\r\n    init: function () {\r\n        this.jsonInit(this._imulevel());\r\n    },\r\n    _imulevel: function() {\r\n        return {\r\n            'message0': Blockly.Msg.IMU_IS_LEVEL ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n            ],\r\n            'inputsInline': true,\r\n            'output': null,\r\n            'colour': Blockly.Msg.DHT_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['IMU_IS_LEVEL'] = function (block) {\r\n    Blockly.addModule('imu');\r\n    return [`imu.ypr[1] >= 0 and imu.ypr[1]<= 10`,Blockly.Python.ORDER_NONE]\r\n}\r\n\r\nBlockly.Blocks['IMU_IS_STAND'] = {\r\n    init: function () {\r\n        this.jsonInit(this._imulevel());\r\n    },\r\n    _imulevel: function() {\r\n        return {\r\n            'message0': Blockly.Msg.IMU_IS_STAND ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n            ],\r\n            'inputsInline': true,\r\n            'output': null,\r\n            'colour': Blockly.Msg.DHT_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['IMU_IS_STAND'] = function (block) {\r\n    Blockly.addModule('imu');\r\n    return [`imu.ypr[1] >= 80 and imu.ypr[1]<= 100`,Blockly.Python.ORDER_NONE]\r\n}\r\n\r\nBlockly.Blocks['IMU_IS_LEFT_TILT'] = {\r\n    init: function () {\r\n        this.jsonInit(this._imulevel());\r\n    },\r\n    _imulevel: function() {\r\n        return {\r\n            'message0': Blockly.Msg.IMU_IS_LEFT_TILT ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n            ],\r\n            'inputsInline': true,\r\n            'output': null,\r\n            'colour': Blockly.Msg.DHT_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['IMU_IS_LEFT_TILT'] = function (block) {\r\n    Blockly.addModule('imu');\r\n    return [`imu.ypr[2] <= -60`,Blockly.Python.ORDER_NONE]\r\n}\r\n\r\n\r\nBlockly.Blocks['IMU_IS_RIGHT_TILT'] = {\r\n    init: function () {\r\n        this.jsonInit(this._imulevel());\r\n    },\r\n    _imulevel: function() {\r\n        return {\r\n            'message0': Blockly.Msg.IMU_IS_RIGHT_TILT ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n            ],\r\n            'inputsInline': true,\r\n            'output': null,\r\n            'colour': Blockly.Msg.DHT_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['IMU_IS_RIGHT_TILT'] = function (block) {\r\n    Blockly.addModule('imu');\r\n    return [`imu.ypr[2] >= 60`,Blockly.Python.ORDER_NONE]\r\n}\r\n\r\nBlockly.Blocks['IMU_IS_OTHER_SIDE'] = {\r\n    init: function () {\r\n        this.jsonInit(this._imulevel());\r\n    },\r\n    _imulevel: function() {\r\n        return {\r\n            'message0': Blockly.Msg.IMU_IS_OTHER_SIDE ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n            ],\r\n            'inputsInline': true,\r\n            'output': null,\r\n            'colour': Blockly.Msg.DHT_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['IMU_IS_OTHER_SIDE'] = function (block) {\r\n    Blockly.addModule('imu');\r\n    return [`(imu.ypr[1] >= 160 and imu.ypr[1] <= 180)  or (imu.ypr[1] >= -180 and imu.ypr[1] <= -160)`,\r\n    Blockly.Python.ORDER_NONE]\r\n}\r\n\r\n\r\nBlockly.Blocks['IMU_GET_ACC_X'] = {\r\n    init: function () {\r\n        this.jsonInit(this._imuGETx());\r\n    },\r\n    _imuGETx: function() {\r\n        return {\r\n            'message0': Blockly.Msg.IMU_GET_ACC_X ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' }\r\n            ],\r\n            'inputsInline': true,\r\n            'output': null,\r\n            'colour': Blockly.Msg.DHT_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['IMU_GET_ACC_X'] = function () {\r\n    Blockly.addModule('imu');\r\n    return ['imu.acceleration[0]', Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\nBlockly.Blocks['IMU_GET_ACC_Y'] = {\r\n    init: function () {\r\n        this.jsonInit(this._imuGETx());\r\n    },\r\n    _imuGETx: function() {\r\n        return {\r\n            'message0': Blockly.Msg.IMU_GET_ACC_Y ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' }\r\n            ],\r\n            'inputsInline': true,\r\n            'output': null,\r\n            'colour': Blockly.Msg.DHT_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['IMU_GET_ACC_Y'] = function () {\r\n    Blockly.addModule('imu');\r\n    return ['imu.acceleration[1]', Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\nBlockly.Blocks['IMU_GET_ACC_Z'] = {\r\n    init: function () {\r\n        this.jsonInit(this._imuGETx());\r\n    },\r\n    _imuGETx: function() {\r\n        return {\r\n            'message0': Blockly.Msg.IMU_GET_ACC_Z ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' }\r\n            ],\r\n            'inputsInline': true,\r\n            'output': null,\r\n            'colour': Blockly.Msg.DHT_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['IMU_GET_ACC_Z'] = function () {\r\n    Blockly.addModule('imu');\r\n    return ['imu.acceleration[2]', Blockly.Python.ORDER_CONDITIONAL];\r\n}\n\n//# sourceURL=webpack:///./app/components/m5_imu.js?");

/***/ }),

/***/ "./app/components/m5_ir.js":
/*!*********************************!*\
  !*** ./app/components/m5_ir.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function gettofAll() {\r\n\tvar options = [];\r\n\tfor (var i = 0; i < Blockly.Units.length; i++) {\r\n\t\tif (Blockly.Units[i].type === 'ir') {\r\n\t\t\toptions.push([Blockly.Units[i].name, Blockly.Units[i].name]);\r\n\t\t}\r\n\t}\r\n\tif (options.length === 0) return [['', '']];\r\n\treturn options;\r\n}\r\nBlockly.Blocks['unit_ir_state'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.IR_STATE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'IR', 'options': gettofAll\r\n                },\r\n            ],\r\n            'output': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.SPEAKER_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['unit_ir_state'] = function (block) {\r\n    var ir = block.getFieldValue('IR') || '';\r\n    var code = ir + '.' +'rx_status()';\r\n    return [code, Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\nBlockly.Blocks['unit_ir_on'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.IR_ON,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'IR', 'options': gettofAll\r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.SPEAKER_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['unit_ir_on'] = function (block) {\r\n    var ir = block.getFieldValue('IR') || '';\r\n    return ir + '.' +'tx_on()\\n';\r\n}\r\n\r\nBlockly.Blocks['unit_ir_off'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.IR_OFF,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'IR', 'options': gettofAll\r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.SPEAKER_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['unit_ir_off'] = function (block) {\r\n    var ir = block.getFieldValue('IR') || '';\r\n    return ir + '.' +'tx_off()\\n';\r\n}\n\n//# sourceURL=webpack:///./app/components/m5_ir.js?");

/***/ }),

/***/ "./app/components/m5_joystick.js":
/*!***************************************!*\
  !*** ./app/components/m5_joystick.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\nfunction getAll() {\r\n    var options = [];\r\n    for (var i = 0; i < Blockly.Units.length; i++) {\r\n        if (Blockly.Units[i].type === 'joystick') {\r\n            options.push([Blockly.Units[i].name, Blockly.Units[i].name]);\r\n        }\r\n    }\r\n    if (options.length === 0) return [['', '']];\r\n    return options;\r\n}\r\n\r\n\r\n\r\nBlockly.Blocks['joystick_x'] = {\r\n\tinit: function () {\r\n\t\tthis.jsonInit(this._joystickx());\r\n\t},\r\n\t_joystickx: function () {\r\n\t\treturn {\r\n\t\t\t'message0': Blockly.Msg.JOYSTICK_X,\r\n\t\t\t'args0': [\r\n\t\t\t\t{ 'type': 'input_dummy' },\r\n\t\t\t\t{ 'type': 'field_dropdown', 'name': 'VARNAME', 'options': getAll() },\r\n\t\t\t],\r\n            'output':null,\r\n\t\t\t'inputsInline': true,\r\n\t\t\t'colour': Blockly.Msg.DHT_HUE\r\n\t\t};\r\n\t}\r\n}\r\nBlockly.Python['joystick_x'] = function(block) {\r\n    var varname = block.getFieldValue('VARNAME');\r\n    return [varname + '.X', Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\nBlockly.Blocks['joystick_y'] = {\r\n\tinit: function () {\r\n\t\tthis.jsonInit(this._joysticky());\r\n\t},\r\n\t_joysticky: function () {\r\n\t\treturn {\r\n\t\t\t'message0': Blockly.Msg.JOYSTICK_Y,\r\n\t\t\t'args0': [\r\n\t\t\t\t{ 'type': 'input_dummy' },\r\n\t\t\t\t{ 'type': 'field_dropdown', 'name': 'VARNAME', 'options': getAll() },\r\n\t\t\t],\r\n            'output':null,\r\n\t\t\t'inputsInline': true,\r\n\t\t\t'colour': Blockly.Msg.DHT_HUE\r\n\t\t};\r\n\t}\r\n}\r\nBlockly.Python['joystick_y'] = function(block) {\r\n    var varname = block.getFieldValue('VARNAME');\r\n    return [varname + '.Y', Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\n\r\nBlockly.Blocks['joystick_press'] = {\r\n\tinit: function () {\r\n\t\tthis.jsonInit(this._joystickpress());\r\n\t},\r\n\t_joystickpress: function () {\r\n\t\treturn {\r\n\t\t\t'message0': Blockly.Msg.JOYSTICK_PRESS,\r\n\t\t\t'args0': [\r\n\t\t\t\t{ 'type': 'input_dummy' },\r\n\t\t\t\t{ 'type': 'field_dropdown', 'name': 'VARNAME', 'options': getAll() },\r\n\t\t\t],\r\n            'output':null,\r\n\t\t\t'inputsInline': true,\r\n\t\t\t'colour': Blockly.Msg.DHT_HUE\r\n\t\t};\r\n\t}\r\n}\r\nBlockly.Python['joystick_press'] = function(block) {\r\n    var varname = block.getFieldValue('VARNAME');\r\n    return [varname + '.Press', Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\n\n\n//# sourceURL=webpack:///./app/components/m5_joystick.js?");

/***/ }),

/***/ "./app/components/m5_label.js":
/*!************************************!*\
  !*** ./app/components/m5_label.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function getAllLabels() {\r\n    var options = [];\r\n    for (var i = 0; i < Blockly.Component.length; i++) {\r\n        if (Blockly.Component[i].type === 'label') {\r\n            options.push([Blockly.Component[i].name, Blockly.Component[i].name]);\r\n        }\r\n    }\r\n    if (options.length === 0) return [['', '']];\r\n    return options;\r\n}\r\n// labelSetText\r\nBlockly.Blocks['label_set_text'] = {\r\n    init: function () {\r\n        this.jsonInit(this._labelSetTextJson());\r\n    },\r\n    _labelSetTextJson: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LABEL_SET_TEXT ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'field_dropdown', 'name': 'COMPONENT', 'options': getAllLabels},\r\n                { 'type': 'input_value', 'name': 'TEXT' },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_LABEL_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['label_set_text'] = function (block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var text = Blockly.Python.valueToCode(block, 'TEXT', Blockly.Python.ORDER_NONE) || '';\r\n    if (block.childBlocks_[0].type === 'text') {\r\n        return component + '.setText(' + text + ')\\n';\r\n    }\r\n    return component + '.setText(str(' + text + '))\\n';\r\n}\r\n\r\n// labelSetPosition\r\nBlockly.Blocks['label_set_position'] = {\r\n    init: function () {\r\n        this.jsonInit(this._labelSetPosition());\r\n    },\r\n    _labelSetPosition: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LABEL_SET_POSITION,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'COMPONENT', 'options': getAllLabels\r\n                },\r\n                { 'type': 'input_value', 'name': 'X' },\r\n                { 'type': 'input_value', 'name': 'Y' }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_LABEL_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['label_set_position'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var x = Blockly.Python.valueToCode(block, 'X', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var y = Blockly.Python.valueToCode(block, 'Y', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    return component + '.setPosition(' + x + ', ' + y +')\\n';\r\n}\r\n\r\n// labelSetPositionX\r\nBlockly.Blocks['label_set_position_x'] = {\r\n    init: function () {\r\n        this.jsonInit(this._labelSetPositionX());\r\n    },\r\n    _labelSetPositionX: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LABEL_SET_POSITION_X,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'COMPONENT', 'options':  getAllLabels\r\n                },\r\n                { 'type': 'input_value', 'name': 'X' }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_LABEL_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['label_set_position_x'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var x = Blockly.Python.valueToCode(block, 'X', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    return component + '.setPosition(x=' + x + ')\\n';\r\n}\r\n// labelSetPositionY\r\nBlockly.Blocks['label_set_position_y'] = {\r\n    init: function () {\r\n        this.jsonInit(this._labelSetPositionY());\r\n    },\r\n    _labelSetPositionY: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LABEL_SET_POSITION_Y,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'COMPONENT', 'options':  getAllLabels\r\n                },\r\n                { 'type': 'input_value', 'name': 'Y' }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_LABEL_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['label_set_position_y'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var y = Blockly.Python.valueToCode(block, 'Y', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    return component + '.setPosition(y=' + y +')\\n';\r\n}\r\n// labelSetColor\r\nBlockly.Blocks['label_set_color'] = {\r\n    init: function () {\r\n        this.jsonInit(this._labelSetColor());\r\n    },\r\n    _labelSetColor: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LABEL_SET_COLOR,\r\n            'args0': [\r\n              { 'type': 'input_dummy' },\r\n              {\r\n                'type': 'field_dropdown', 'name': 'COMPONENT', 'options':  getAllLabels\r\n              },\r\n              {\r\n                'type': 'field_colour',\r\n                'name': 'COLOR',\r\n                'colour': '#ff0000'\r\n              }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_LABEL_HUE\r\n          }\r\n    }\r\n}\r\nBlockly.Python['label_set_color'] = function (block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var color = block.getFieldValue('COLOR') || '#ff0000';\r\n    return component + '.setColor(' + color.replace('#', '0x') + ')\\n';\r\n}\r\n // labelSetColorRgb\r\nBlockly.Blocks['label_set_color_rgb'] = {\r\n    init: function () {\r\n        this.jsonInit(this._labelSetColorRgb());\r\n    },\r\n    _labelSetColorRgb: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LABEL_SET_COLOR_RGB,\r\n            'args0': [\r\n              { 'type': 'input_dummy' },\r\n              {\r\n                'type': 'field_dropdown', 'name': 'COMPONENT', 'options':  getAllLabels\r\n              },\r\n              { 'type': 'input_value', 'name': 'R' },\r\n              { 'type': 'input_value', 'name': 'G' },\r\n              { 'type': 'input_value', 'name': 'B' },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_LABEL_HUE\r\n          }\r\n    }\r\n}\r\nBlockly.Python['label_set_color_rgb'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var r = Blockly.Python.valueToCode(block, 'R', Blockly.Python.ORDER_NONE) || '0';\r\n    var g = Blockly.Python.valueToCode(block, 'G', Blockly.Python.ORDER_NONE) || '0';\r\n    var b = Blockly.Python.valueToCode(block, 'B', Blockly.Python.ORDER_NONE) || '0';\r\n    if(isNaN(parseInt(r)) || isNaN(parseInt(g)) || isNaN(parseInt(b))) {\r\n        return component + `.setColor((${r} << 16) | (${g} << 8) | ${b})\\n`;\r\n    }\r\n    var hexR = Math.floor(Math.abs(parseInt(r)) % 256).toString(16);\r\n    var hexG = Math.floor(Math.abs(parseInt(g)) % 256).toString(16);\r\n    var hexB = Math.floor(Math.abs(parseInt(b)) % 256).toString(16);\r\n    if(hexR.length < 2) hexR = '0' + hexR;\r\n    if(hexG.length < 2) hexG = '0' + hexG;\r\n    if(hexB.length < 2) hexB = '0' + hexB;\r\n    return component + '.setColor(0x' + hexR + hexG + hexB + ')\\n';\r\n}\r\n\r\nBlockly.Blocks['label_set_font'] = {\r\n    init: function () {\r\n        this.jsonInit(this._labelSetColor());\r\n    },\r\n    _labelSetColor: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LABEL_SET_FONT,\r\n            'args0': [\r\n              { 'type': 'input_dummy' },\r\n              {\r\n                'type': 'field_dropdown', 'name': 'COMPONENT', 'options':  getAllLabels\r\n              },\r\n              {'type': 'field_dropdown', 'name': 'FONT_FAMILY', 'options': [\r\n                [\"FONT_Default\",\"FONT_Default\"],\r\n                [\"FONT_DefaultSmall\",\"FONT_DefaultSmall\"],\r\n                [\"FONT_DejaVu18\",\"FONT_DejaVu18\"],\r\n                [\"FONT_DejaVu24\",\"FONT_DejaVu24\"],\r\n                [\"FONT_DejaVu40\",\"FONT_DejaVu40\"],\r\n                [\"FONT_DejaVu56\",\"FONT_DejaVu56\"],\r\n                [\"FONT_DejaVu72\",\"FONT_DejaVu72\"],\r\n                [\"FONT_Ubuntu\",\"FONT_Ubuntu\"],\r\n                [\"FONT_Comic\",\"FONT_Comic\"]\r\n            ]\r\n          },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_LABEL_HUE\r\n          }\r\n    }\r\n}\r\nBlockly.Python['label_set_font'] = function (block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var font = block.getFieldValue('FONT_FAMILY') || 'FONT_Default';\r\n    return component + '.setFont(lcd.'+ font +')\\n';\r\n}\r\n\r\n\r\nBlockly.Blocks['label_set_mode'] = {\r\n    init: function () {\r\n        this.jsonInit(this._labelSetPosition());\r\n    },\r\n    _labelSetPosition: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LABEL_SET_MODE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'COMPONENT', 'options': getAllLabels\r\n                },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'MODE', 'options': [['hide','hide'],['show','show']]\r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_LABEL_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['label_set_mode'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var mode = block.getFieldValue('MODE');\r\n    return component + '.'+ mode +'()\\n';\r\n}\n\n//# sourceURL=webpack:///./app/components/m5_label.js?");

/***/ }),

/***/ "./app/components/m5_lcd.js":
/*!**********************************!*\
  !*** ./app/components/m5_lcd.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\nBlockly.Blocks['lcd_clear'] = {\r\n    init: function () {\r\n        this.jsonInit(this._lcdclear());\r\n    },\r\n    _lcdclear: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LCD_CLEAR,\r\n            'args0': [\r\n                { 'type': 'input_dummy' }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.LCD_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['lcd_clear'] = function(block) {\r\n    return 'lcd.clear()\\n';\r\n}\r\n\r\n\r\nBlockly.Blocks['lcd_fill'] = {\r\n    init: function () {\r\n        this.jsonInit(this._lcdfill());\r\n    },\r\n    _lcdfill: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LCD_FILL,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {'type': 'field_colour','name': 'COLOR','colour': '#ff0000' },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.LCD_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['lcd_fill'] = function(block) {\r\n    var color = block.getFieldValue('COLOR') || '';\r\n    return 'lcd.fill(' + color.replace('#', '0x') + ')\\n';\r\n}\r\n\r\n\r\nBlockly.Blocks['lcd_print'] = {\r\n    init: function () {\r\n        this.jsonInit(this._lcdprint());\r\n    },\r\n    _lcdprint: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LCD_PRINT,\r\n            'args0': [\r\n                { 'type': 'input_value', 'name':'TEXT' },\r\n                { 'type': 'input_value', 'name':'X' },\r\n                { 'type': 'input_value', 'name':'Y' },\r\n                { 'type': 'input_dummy' },\r\n                {'type': 'field_colour','name': 'COLOR','colour': '#ff0000' },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.LCD_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['lcd_print'] = function(block) {\r\n    var text = Blockly.Python.valueToCode(block, 'TEXT', Blockly.Python.ORDER_FUNCTION_CALL) || '\\'\\'';\r\n    var x = Blockly.Python.valueToCode(block, 'X', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var y = Blockly.Python.valueToCode(block, 'Y', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var color = block.getFieldValue('COLOR');\r\n    var params = [text, x, y, color.replace('#', '0x')];\r\n    return 'lcd.print(' + params.join(', ') + ')\\n';\r\n}\r\n\r\n \r\nBlockly.Blocks['lcd_setFont'] = {\r\n    init: function () {\r\n        this.jsonInit(this._lcdspetfont());\r\n    },\r\n    _lcdspetfont: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LCD_SETFONT,\r\n            'args0': [\r\n                { 'type': 'input_dummy', 'name':'font'},\r\n                {'type': 'field_dropdown', 'name': 'FONT_FAMILY', 'options': [\r\n                    [\"FONT_Default\",\"FONT_Default\"],\r\n                    [\"FONT_DefaultSmall\",\"FONT_DefaultSmall\"],\r\n                    [\"FONT_DejaVu18\",\"FONT_DejaVu18\"],\r\n                    [\"FONT_DejaVu24\",\"FONT_DejaVu24\"],\r\n                    [\"FONT_DejaVu40\",\"FONT_DejaVu40\"],\r\n                    [\"FONT_DejaVu56\",\"FONT_DejaVu56\"],\r\n                    [\"FONT_DejaVu72\",\"FONT_DejaVu72\"],\r\n                    [\"FONT_Ubuntu\",\"FONT_Ubuntu\"],\r\n                    [\"FONT_Comic\",\"FONT_Comic\"]\r\n                ]\r\n              },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.LCD_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['lcd_setFont'] = function(block) {\r\n    var font = block.getFieldValue('FONT_FAMILY');\r\n    return 'lcd.font(lcd.' + font + ')\\n';\r\n}\r\n\r\n\r\nBlockly.Blocks['lcd_pixel'] = {\r\n    init: function () {\r\n        this.jsonInit(this._lcdpixel());\r\n    },\r\n    _lcdpixel: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LCD_PIXEL,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'input_value', 'name':'X' },\r\n                { 'type': 'input_value', 'name':'Y' },\r\n                { 'type': 'input_dummy' },\r\n                {'type': 'field_colour','name': 'COLOR','colour': '#ff0000' }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.LCD_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['lcd_pixel'] = function(block) {\r\n    var x = Blockly.Python.valueToCode(block, 'X', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var y = Blockly.Python.valueToCode(block, 'Y', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var color = block.getFieldValue('COLOR');\r\n    return 'lcd.pixel(' + [x, y, color.replace('#', '0x')].join(', ') + ')\\n';\r\n}\r\n\r\n\r\nBlockly.Blocks['lcd_line'] = {\r\n    init: function () {\r\n        this.jsonInit(this._lcdline());\r\n    },\r\n    _lcdline: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LCD_LINE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'input_value', 'name':'X' },\r\n                { 'type': 'input_value', 'name':'Y' },\r\n                { 'type': 'input_value', 'name':'X1' },\r\n                { 'type': 'input_value', 'name':'Y1' },\r\n                { 'type': 'input_dummy' },\r\n                {'type': 'field_colour','name': 'COLOR','colour': '#ff0000' }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.LCD_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['lcd_line'] = function(block) {\r\n    var x = Blockly.Python.valueToCode(block, 'X', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var y = Blockly.Python.valueToCode(block, 'Y', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var x1 = Blockly.Python.valueToCode(block, 'X1', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var y1 = Blockly.Python.valueToCode(block, 'Y1', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var color = block.getFieldValue('COLOR');\r\n    return 'lcd.line(' + [x, y, x1, y1, color.replace('#', '0x')].join(', ') + ')\\n';\r\n}\r\n\r\n\r\n\r\nBlockly.Blocks['lcd_rect'] = {\r\n    init: function () {\r\n        this.jsonInit(this._lcdrect());\r\n    },\r\n    _lcdrect: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LCD_RECT,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'input_value', 'name':'X' },\r\n                { 'type': 'input_value', 'name':'Y' },\r\n                { 'type': 'input_value', 'name':'WIDTH' },\r\n                { 'type': 'input_value', 'name':'HEIGHT' },\r\n                { 'type': 'input_dummy' },\r\n                {'type': 'field_dropdown', 'name': 'COLOR_TYPE', 'options': \r\n                [[Blockly.Msg._OPTION_TO_BORDERCOLOR, 'color'], [Blockly.Msg._OPTION_TO_FILLCOLOR, 'fillcolor']]\r\n              },\r\n                {'type': 'field_colour','name': 'COLOR','colour': '#ff0000' }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.LCD_HUE\r\n        };\r\n    }\r\n}\r\n\r\nBlockly.Python['lcd_rect'] = function(block) {\r\n    var x = Blockly.Python.valueToCode(block, 'X', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var y = Blockly.Python.valueToCode(block, 'Y', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var width = Blockly.Python.valueToCode(block, 'WIDTH', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var height = Blockly.Python.valueToCode(block, 'HEIGHT', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var color = block.getFieldValue('COLOR');\r\n    var colorType = block.getFieldValue('COLOR_TYPE');\r\n    return 'lcd.rect(' + [x, y, width, height, colorType + '=' + color.replace('#', '0x')].join(', ') +')\\n';\r\n}\r\n\r\n\r\nBlockly.Blocks['lcd_triangle'] = {\r\n    init: function () {\r\n        this.jsonInit(this._lcdrect());\r\n    },\r\n    _lcdrect: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LCD_TRIANGLE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'input_value', 'name':'X' },\r\n                { 'type': 'input_value', 'name':'Y' },\r\n                { 'type': 'input_value', 'name':'X1' },\r\n                { 'type': 'input_value', 'name':'Y1' },\r\n                { 'type': 'input_value', 'name':'X2' },\r\n                { 'type': 'input_value', 'name':'Y2' },\r\n                { 'type': 'input_dummy' },\r\n                {'type': 'field_dropdown', 'name': 'COLOR_TYPE', 'options': \r\n                [[Blockly.Msg._OPTION_TO_BORDERCOLOR, 'color'], [Blockly.Msg._OPTION_TO_FILLCOLOR, 'fillcolor']]\r\n              },\r\n                {'type': 'field_colour','name': 'COLOR','colour': '#ff0000' }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.LCD_HUE\r\n        };\r\n    }\r\n}\r\n\r\nBlockly.Python['lcd_triangle'] = function(block) {\r\n    var x = Blockly.Python.valueToCode(block, 'X', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var y = Blockly.Python.valueToCode(block, 'Y', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var x1 = Blockly.Python.valueToCode(block, 'X1', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var y1 = Blockly.Python.valueToCode(block, 'Y1', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var x2 = Blockly.Python.valueToCode(block, 'X2', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var y2 = Blockly.Python.valueToCode(block, 'Y2', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var colorType = block.getFieldValue('COLOR_TYPE');\r\n    var color = block.getFieldValue('COLOR');\r\n    return 'lcd.triangle(' + [x, y, x1, y1, x2, y2, colorType + '=' + color.replace('#', '0x')].join(', ') +')\\n';\r\n}\r\n\r\nBlockly.Blocks['lcd_circle'] = {\r\n    init: function () {\r\n        this.jsonInit(this._lcdcircle());\r\n    },\r\n    _lcdcircle: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LCD_CIRCLE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'input_value', 'name':'X' },\r\n                { 'type': 'input_value', 'name':'Y' },\r\n                { 'type': 'input_value', 'name':'RADIUS' },\r\n                { 'type': 'input_dummy' },\r\n                {'type': 'field_dropdown', 'name': 'COLOR_TYPE', 'options': \r\n                [[Blockly.Msg._OPTION_TO_BORDERCOLOR, 'color'], [Blockly.Msg._OPTION_TO_FILLCOLOR, 'fillcolor']]\r\n              },\r\n                {'type': 'field_colour','name': 'COLOR','colour': '#ff0000' }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.LCD_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['lcd_circle'] = function(block) {\r\n    var x = Blockly.Python.valueToCode(block, 'X', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var y = Blockly.Python.valueToCode(block, 'Y', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var radius = Blockly.Python.valueToCode(block, 'RADIUS', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var colorType = block.getFieldValue('COLOR_TYPE');\r\n    var color = block.getFieldValue('COLOR');\r\n    return 'lcd.circle(' + [x, y, radius, colorType + '=' + color.replace('#', '0x')].join(', ') +')\\n';\r\n}\r\n\r\nBlockly.Blocks['lcd_ellipse'] = {\r\n    init: function () {\r\n        this.jsonInit(this._lcdcircle());\r\n    },\r\n    _lcdcircle: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LCD_ELLIPSE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'input_value', 'name':'X' },\r\n                { 'type': 'input_value', 'name':'Y' },\r\n                { 'type': 'input_value', 'name':'RX' },\r\n                { 'type': 'input_value', 'name':'RY' },\r\n                { 'type': 'input_dummy' },\r\n                {'type': 'field_dropdown', 'name': 'COLOR_TYPE', 'options': \r\n                [[Blockly.Msg._OPTION_TO_BORDERCOLOR, 'color'], [Blockly.Msg._OPTION_TO_FILLCOLOR, 'fillcolor']]\r\n              },\r\n                {'type': 'field_colour','name': 'COLOR','colour': '#ff0000' }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.LCD_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['lcd_ellipse'] = function(block) {\r\n    var x = Blockly.Python.valueToCode(block, 'X', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var y = Blockly.Python.valueToCode(block, 'Y', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var rx = Blockly.Python.valueToCode(block, 'RX', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var ry = Blockly.Python.valueToCode(block, 'RY', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var colorType = block.getFieldValue('COLOR_TYPE');\r\n    var color = block.getFieldValue('COLOR');\r\n    return 'lcd.ellipse(' + [x, y, rx, ry, colorType + '=' + color.replace('#', '0x')].join(', ') + ')\\n';\r\n}\r\n\r\n\r\n\r\n\r\nBlockly.Blocks['lcd_arc'] = {\r\n    init: function () {\r\n        this.jsonInit(this._lcdarc());\r\n    },\r\n    _lcdarc: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LCD_ARC,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'input_value', 'name':'X' },\r\n                { 'type': 'input_value', 'name':'Y' },\r\n                { 'type': 'input_value', 'name':'RADIUS' },\r\n                { 'type': 'input_value', 'name':'THICK' },\r\n                { 'type': 'input_value', 'name':'START' },\r\n                { 'type': 'input_value', 'name':'END' },\r\n                { 'type': 'input_dummy' },\r\n                {'type': 'field_dropdown', 'name': 'COLOR_TYPE', 'options': \r\n                [[Blockly.Msg._OPTION_TO_BORDERCOLOR, 'color'], [Blockly.Msg._OPTION_TO_FILLCOLOR, 'fillcolor']]\r\n              },\r\n                {'type': 'field_colour','name': 'COLOR','colour': '#ff0000' }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.LCD_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['lcd_arc'] = function(block) {\r\n    var x = Blockly.Python.valueToCode(block, 'X', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var y = Blockly.Python.valueToCode(block, 'Y', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var radius = Blockly.Python.valueToCode(block, 'R', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var thick = Blockly.Python.valueToCode(block, 'THICK', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var start = Blockly.Python.valueToCode(block, 'START', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var end = Blockly.Python.valueToCode(block, 'END', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var colorType = block.getFieldValue('COLOR_TYPE');\r\n    var color = block.getFieldValue('COLOR');\r\n    return 'lcd.arc(' + [x, y, radius, thick, start, end, colorType + '=' + color.replace('#', '0x')].join(', ') + ')\\n';\r\n}\r\n\r\nBlockly.Blocks['lcd_polygon'] = {\r\n    init: function () {\r\n        this.jsonInit(this._lcdarc());\r\n    },\r\n    _lcdarc: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LCD_POLYGON,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'input_value', 'name':'X' },\r\n                { 'type': 'input_value', 'name':'Y' },\r\n                { 'type': 'input_value', 'name':'RADIUS' },\r\n                { 'type': 'input_value', 'name':'SIDES' },\r\n                { 'type': 'input_value', 'name':'THICK' },\r\n                { 'type': 'input_dummy' },\r\n                {'type': 'field_dropdown', 'name': 'COLOR_TYPE', 'options': \r\n                [[Blockly.Msg._OPTION_TO_BORDERCOLOR, 'color'], [Blockly.Msg._OPTION_TO_FILLCOLOR, 'fillcolor']]\r\n              },\r\n                {'type': 'field_colour','name': 'COLOR','colour': '#ff0000' },\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    \"type\": \"field_angle\",\r\n                    \"name\": \"ROTATE\",\r\n                  }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.LCD_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['lcd_polygon'] = function(block) {\r\n    var x = Blockly.Python.valueToCode(block, 'X', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var y = Blockly.Python.valueToCode(block, 'Y', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var radius = Blockly.Python.valueToCode(block, 'RADIUS', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var sides = Blockly.Python.valueToCode(block, 'SIDES', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var thick = Blockly.Python.valueToCode(block, 'THICK', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var colorType = block.getFieldValue('COLOR_TYPE');\r\n    var color = block.getFieldValue('COLOR');\r\n    var rotate = block.getFieldValue('ROTATE');\r\n    return 'lcd.polygon(' + [x, y, radius, sides, thick, colorType + '=' + color.replace('#', '0x'), 'rotate=' + rotate].join(', ') + ')\\n';\r\n}\n\n//# sourceURL=webpack:///./app/components/m5_lcd.js?");

/***/ }),

/***/ "./app/components/m5_lego_motor.js":
/*!*****************************************!*\
  !*** ./app/components/m5_lego_motor.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\nBlockly.Blocks['lego_register_motor'] = {\r\n    init: function () {\r\n        this.jsonInit(this._legoregisiermotor());\r\n    },\r\n    _legoregisiermotor: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LEGO_REGISTER_MOTOR,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VAR', 'options':[\r\n                        ['LegoM1', 'LegoM1'],\r\n                        ['LegoM2', 'LegoM2'],\r\n                        ['LegoM3', 'LegoM3'],\r\n                        ['LegoM4', 'LegoM4']\r\n                    ]\r\n                },\r\n                { 'type': 'input_dummy' , 'name': 'PORT'},\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'PORT', 'options':[\r\n                        ['1', '1'],\r\n                        ['2', '2'],\r\n                        ['3', '3'],\r\n                        ['4', '4']\r\n                    ]\r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.LEGO_MOTOR_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['lego_register_motor'] = function (block) {\r\n    var varname = block.getFieldValue('VAR') || '';\r\n    var port = block.getFieldValue('PORT') || '';\r\n    Blockly.addModule('lego_motor');\r\n    Blockly.addDeclare(varname);\r\n    // return 'global ' + varname + '\\n' + varname + ' = lego_board.NXT_Motor(port=' + port + ')\\n';\r\n    // return varname + ' = lego_board.NXT_Motor(port=' + port + ')\\n';\r\n    return varname + ' = NXT_Motor(' + port + ')\\n';\r\n}\r\n\r\nBlockly.Blocks['lego_set_pwm'] = {\r\n    init: function () {\r\n        this.jsonInit(this._logoregistermotor());\r\n    },\r\n    _logoregistermotor: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LEGO_SET_PWM,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VAR', 'options':[\r\n                        ['LegoM1', 'LegoM1'],\r\n                        ['LegoM2', 'LegoM2'],\r\n                        ['LegoM3', 'LegoM3'],\r\n                        ['LegoM4', 'LegoM4']\r\n                    ]\r\n                },\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'ROTATE', 'options':[\r\n                        [Blockly.Msg._OPTION_TO_CLOCKWISE, 'CW'],\r\n                        [Blockly.Msg._OPTION_TO_ANTICLOCKWISE, 'CCW']\r\n                    ]\r\n                },\r\n                { 'type': 'input_value', 'name': 'PWM' },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.LEGO_MOTOR_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['lego_set_pwm'] = function (block) {\r\n    Blockly.addModule('lego_motor');\r\n    var varname = block.getFieldValue('VAR') || '';\r\n    var rotate = block.getFieldValue('ROTATE') || '';\r\n    var pwm = Blockly.Python.valueToCode(block, 'PWM', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    if (rotate == 'CCW' && pwm != 0) pwm = '-' + pwm;\r\n    return varname + '.set_pwm(' + pwm + ')\\n';\r\n}\r\n\r\nBlockly.Blocks['lego_set_speed'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxtrun());\r\n    },\r\n    _nxtrun: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LEGO_SET_SPEED,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VAR', 'options':[\r\n                        ['LegoM1', 'LegoM1'],\r\n                        ['LegoM2', 'LegoM2'],\r\n                        ['LegoM3', 'LegoM3'],\r\n                        ['LegoM4', 'LegoM4']\r\n                    ]\r\n                },\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'ROTATE', 'options':[\r\n                        [Blockly.Msg._OPTION_TO_CLOCKWISE, 'CW'],\r\n                        [Blockly.Msg._OPTION_TO_ANTICLOCKWISE, 'CCW']\r\n                    ]\r\n                },\r\n                { 'type': 'input_value', 'name': 'SPEED' },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.LEGO_MOTOR_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['lego_set_speed'] = function (block) {\r\n    Blockly.addModule('lego_motor');\r\n    var varname = block.getFieldValue('VAR') || '';\r\n    var rotate = block.getFieldValue('ROTATE') || '';\r\n    var speed = Blockly.Python.valueToCode(block, 'SPEED', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    if (rotate == 'CCW' && speed != 0) speed = '-' + speed;\r\n    return varname + '.set_speed(' + speed + ')\\n';\r\n}\r\n\r\nBlockly.Blocks['lego_set_angle'] = {\r\n    init: function () {\r\n        this.jsonInit(this._logosetangle());\r\n    },\r\n    _logosetangle: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LEGO_SET_ANGLE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VAR', 'options':[\r\n                        ['LegoM1', 'LegoM1'],\r\n                        ['LegoM2', 'LegoM2'],\r\n                        ['LegoM3', 'LegoM3'],\r\n                        ['LegoM4', 'LegoM4']\r\n                    ]\r\n                },\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'ROTATE', 'options':[\r\n                        [Blockly.Msg._OPTION_TO_CLOCKWISE, 'CW'],\r\n                        [Blockly.Msg._OPTION_TO_ANTICLOCKWISE, 'CCW']\r\n                    ]\r\n                },\r\n                { 'type': 'input_value', 'name': 'ANGLE' },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.LEGO_MOTOR_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['lego_set_angle'] = function (block) {\r\n    Blockly.addModule('lego_motor');\r\n    var varname = block.getFieldValue('VAR') || '';\r\n    var rotate = block.getFieldValue('ROTATE') || '';\r\n    var angle = Blockly.Python.valueToCode(block, 'ANGLE', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    if (rotate == 'CCW' && angle != 0) angle = '-' + angle;\r\n    return varname + '.set_angle(' + angle + ')\\n';\r\n}\r\n\r\n\r\nBlockly.Blocks['lego_set_angle_zero'] = {\r\n    init: function () {\r\n        this.jsonInit(this._logosetanglezero());\r\n    },\r\n    _logosetanglezero: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LEGO_SET_ANGLE_ZERO,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VAR', 'options':[\r\n                        ['LegoM1', 'LegoM1'],\r\n                        ['LegoM2', 'LegoM2'],\r\n                        ['LegoM3', 'LegoM3'],\r\n                        ['LegoM4', 'LegoM4']\r\n                    ]\r\n                },\r\n                { 'type': 'input_dummy' }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.LEGO_MOTOR_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['lego_set_angle_zero'] = function (block) {\r\n    Blockly.addModule('lego_motor');\r\n    var varname = block.getFieldValue('VAR') || '';\r\n    return varname + '.set_angle_zero()\\n';\r\n}\r\n\r\nBlockly.Blocks['lego_stop'] = {\r\n    init: function () {\r\n        this.jsonInit(this._logostep());\r\n    },\r\n    _logostep: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LEGO_STEP,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VAR', 'options':[\r\n                        ['LegoM1', 'LegoM1'],\r\n                        ['LegoM2', 'LegoM2'],\r\n                        ['LegoM3', 'LegoM3'],\r\n                        ['LegoM4', 'LegoM4']\r\n                    ]\r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.LEGO_MOTOR_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['lego_stop'] = function (block) {\r\n    Blockly.addModule('lego_motor');\r\n    var varname = block.getFieldValue('VAR') || '';\r\n    return varname + '.stop()\\n';\r\n}\r\n\r\nBlockly.Blocks['lego_brake'] = {\r\n    init: function () {\r\n        this.jsonInit(this._logostep());\r\n    },\r\n    _logostep: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LEGO_BRAKE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VAR', 'options':[\r\n                        ['LegoM1', 'LegoM1'],\r\n                        ['LegoM2', 'LegoM2'],\r\n                        ['LegoM3', 'LegoM3'],\r\n                        ['LegoM4', 'LegoM4']\r\n                    ]\r\n                }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.LEGO_MOTOR_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['lego_brake'] = function (block) {\r\n    Blockly.addModule('lego_motor');\r\n    var varname = block.getFieldValue('VAR') || '';\r\n    return varname + '.brake()\\n';\r\n}\r\n\r\nBlockly.Blocks['lego_read_encoder'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxtreadencoder());\r\n    },\r\n    _nxtreadencoder: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LEGO_READ_ENCODER,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VAR', 'options':[\r\n                        ['LegoM1', 'LegoM1'],\r\n                        ['LegoM2', 'LegoM2'],\r\n                        ['LegoM3', 'LegoM3'],\r\n                        ['LegoM4', 'LegoM4']\r\n                    ]\r\n                }\r\n            ],\r\n            'inputsInline': true,\r\n            'output':null,\r\n            'colour': Blockly.Msg.LEGO_MOTOR_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['lego_read_encoder'] = function (block) {\r\n    Blockly.addModule('lego');\r\n    var varname = block.getFieldValue('VAR') || '';\r\n    var code = varname + '.encoder_read()';\r\n    return [code, Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\n\r\nBlockly.Blocks['lego_clear'] = {\r\n    init: function () {\r\n        this.jsonInit(this._logostep());\r\n    },\r\n    _logostep: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LEGO_CLEAR,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VAR', 'options':[\r\n                        ['LegoM1', 'LegoM1'],\r\n                        ['LegoM2', 'LegoM2'],\r\n                        ['LegoM3', 'LegoM3'],\r\n                        ['LegoM4', 'LegoM4']\r\n                    ]\r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.LEGO_MOTOR_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['lego_clear'] = function (block) {\r\n    Blockly.addModule('lego_motor');\r\n    var varname = block.getFieldValue('VAR') || '';\r\n    return varname + '.encode_clear()\\n';\r\n}\n\n//# sourceURL=webpack:///./app/components/m5_lego_motor.js?");

/***/ }),

/***/ "./app/components/m5_lidarcar.js":
/*!***************************************!*\
  !*** ./app/components/m5_lidarcar.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\n\r\nfunction regMum(n) {\r\n\r\n    if (n > 7) {\r\n        return  7;\r\n    } else if(n < -7) {\r\n        return -7;\r\n    } \r\n    return n;\r\n}\r\n\r\nBlockly.Blocks['lidarcar_setrgb'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.LIDARCAR_SETRGB,\r\n            'args0': [\r\n                {\r\n                    'type': 'field_colour', 'name': 'COLOR', 'colour': '#ff0000'\r\n                },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'DIR', 'options': [['front','front'],['back','back'],['all','all']]\r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.SPEAKER_HUE\r\n        }\r\n    }\r\n}\r\n\r\nBlockly.Python['lidarcar_setrgb'] = function (block) {\r\n    var color = block.getFieldValue('COLOR') || '';\r\n    var dir = block.getFieldValue('DIR') || '';\r\n    var code = `lidarcar0.setRgb(${color.replace('#', '0x')},'${dir}')\\n`;\r\n    return code;\r\n}\r\n\r\nBlockly.Blocks['lidarcar_setOnergb'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.LIDARCAR_SETONERGB,\r\n            'args0': [\r\n                {\r\n                    'type': 'field_colour', 'name': 'COLOR', 'colour': '#ff0000'\r\n                },\r\n                {\r\n                    'type': 'input_value',\r\n                    'name': 'NUM'\r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.SPEAKER_HUE\r\n        }\r\n    }\r\n}\r\n\r\nBlockly.Python['lidarcar_setOnergb'] = function (block) {\r\n    var color = block.getFieldValue('COLOR') || '';\r\n    var y = Blockly.Python.valueToCode(block, 'NUM', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var code =  'lidarcar0.' + 'setOneRgb(' + y + ', '+ color.replace('#', '0x') +')\\n';\r\n    return code;\r\n}\r\n\r\nBlockly.Blocks['lidarcar_goahead'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.LIDARCAR_GOAHEAD,\r\n            'args0': [\r\n                {\r\n                    'type': 'input_value',\r\n                    'name': 'NUM',\r\n                },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'KEY', 'options': [['goAhead', 'goAhead'],['goback', 'goBack'],['turnleft', 'turnLeft'],['turnright', 'turnRight']]\r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.SPEAKER_HUE\r\n        }\r\n    }\r\n}\r\n\r\nBlockly.Python['lidarcar_goahead'] = function (block) {\r\n    var y = Blockly.Python.valueToCode(block, 'NUM', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var key = block.getFieldValue('KEY') || '';\r\n    y = regMum(y);\r\n    var code =  `lidarcar0.${key}(${y})\\n`;\r\n    return code;\r\n}\r\n\r\nBlockly.Blocks['lidarcar_goback'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.LIDARCAR_GOBACK,\r\n            'args0': [\r\n                {\r\n                    'type': 'input_value',\r\n                    'name': 'NUM'\r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.SPEAKER_HUE\r\n        }\r\n    }\r\n}\r\n\r\nBlockly.Python['lidarcar_goback'] = function (block) {\r\n    var y = Blockly.Python.valueToCode(block, 'NUM', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    y = regMum(y);\r\n    var code = 'lidarcar0.' + 'goBack(' + y + ')\\n';\r\n    return code;\r\n}\r\n\r\nBlockly.Blocks['lidarcar_turnLeft'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.LIDARCAR_TURNLEFT,\r\n            'args0': [\r\n                {\r\n                    'type': 'input_value',\r\n                    'name': 'NUM'\r\n                }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.SPEAKER_HUE\r\n        }\r\n    }\r\n}\r\n\r\nBlockly.Python['lidarcar_turnLeft'] = function (block) {\r\n    var y = Blockly.Python.valueToCode(block, 'NUM', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    y = regMum(y);\r\n    var code =  'lidarcar0.' + 'turnLeft(' + y + ')\\n';\r\n    return code;\r\n}\r\n\r\nBlockly.Blocks['lidarcar_turnRight'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.LIDARCAR_TURNRIGHT,\r\n            'args0': [\r\n                {\r\n                    'type': 'input_value',\r\n                    'name': 'NUM'\r\n                }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.SPEAKER_HUE\r\n        }\r\n    }\r\n}\r\n\r\nBlockly.Python['lidarcar_turnRight'] = function (block) {\r\n    var y = Blockly.Python.valueToCode(block, 'NUM', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    y = regMum(y);\r\n    var code =  'lidarcar0.' + 'turnRight(' + y + ')\\n';\r\n    return code;\r\n}\r\n\r\nBlockly.Blocks['lidarcar_setStepMotor'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.LIDARCAR_SETSTEPMOTOR,\r\n            'args0': [\r\n                {\r\n                    'type': 'input_value',\r\n                    'name': 'NUM'\r\n                },\r\n                {\r\n                    'type': 'input_value',\r\n                    'name': 'NUM1'\r\n                },\r\n                {\r\n                    'type': 'input_value',\r\n                    'name': 'NUM2'\r\n                },\r\n                {\r\n                    'type': 'input_value',\r\n                    'name': 'NUM3'\r\n                }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.SPEAKER_HUE\r\n        }\r\n    }\r\n}\r\n\r\nBlockly.Python['lidarcar_setStepMotor'] = function (block) {\r\n    var y = Blockly.Python.valueToCode(block, 'NUM', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var y1 = Blockly.Python.valueToCode(block, 'NUM1', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var y2 = Blockly.Python.valueToCode(block, 'NUM2', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var y3 = Blockly.Python.valueToCode(block, 'NUM3', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    y =  regMum(y);\r\n    y1 = regMum(y1);\r\n    y2 = regMum(y2);\r\n    y3 = regMum(y3);\r\n    var code = `lidarcar0.setStepMotor(${y},${y1},${y2},${y3})\\n`;\r\n    return code;\r\n}\r\n\r\nBlockly.Blocks['lidarcar_setServo'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.LIDARCAR_SETSERVO,\r\n            'args0': [\r\n                {\r\n                    'type': 'input_value',\r\n                    'name': 'NUM'\r\n                },\r\n                {\r\n                    'type': 'input_value',\r\n                    'name': 'ANGLE'\r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.SPEAKER_HUE\r\n        }\r\n    }\r\n}\r\n\r\nBlockly.Python['lidarcar_setServo'] = function (block) {\r\n    var y = Blockly.Python.valueToCode(block, 'NUM', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var a = Blockly.Python.valueToCode(block, 'ANGLE', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    \r\n    var code = 'lidarcar0.' + 'setServo(' + y + ', '+ a +')\\n';\r\n    return code;\r\n}\r\n\r\nBlockly.Blocks['lidarcar_control'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.LIDARCAR_CONTROL,\r\n            'args0': [\r\n                {\r\n                    'type': 'input_value',\r\n                    'name': 'NUMX'\r\n                },\r\n                {\r\n                    'type': 'input_value',\r\n                    'name': 'NUMY'\r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.SPEAKER_HUE\r\n        }\r\n    }\r\n}\r\n\r\nBlockly.Python['lidarcar_control'] = function (block) {\r\n    var x = Blockly.Python.valueToCode(block, 'NUMX', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var y = Blockly.Python.valueToCode(block, 'NUMY', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    \r\n    var code = 'lidarcar0.' + 'controlWheel(' + x + ', '+ y +')\\n';\r\n    return code;\r\n}\r\n\r\nBlockly.Blocks['lidarcar_drawMap'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.LIDARCAR_DRAWMAP,\r\n            'args0': [\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.SPEAKER_HUE\r\n        }\r\n    }\r\n}\r\n\r\nBlockly.Python['lidarcar_drawMap'] = function (block) {\r\n    var code = 'lidarcar0.lidar.draw_map()\\n';\r\n    return code;\r\n}\r\n\r\n\r\nBlockly.Blocks['lidarcar_getdistance'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.LIDARCAR_GETDISTANCE,\r\n            'args0': [\r\n                {\r\n                    'type': 'input_value',\r\n                    'name': 'NUY'\r\n                },\r\n            ],\r\n            'output': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.SPEAKER_HUE\r\n        }\r\n    }\r\n}\r\n\r\nBlockly.Python['lidarcar_getdistance'] = function (block) {\r\n    var y = Blockly.Python.valueToCode(block, 'NUY', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var code = `lidarcar0.lidar.get_distance(${y})`;\r\n    return [code, Blockly.Python.ORDER_CONDITIONAL];\r\n}\n\n//# sourceURL=webpack:///./app/components/m5_lidarcar.js?");

/***/ }),

/***/ "./app/components/m5_light.js":
/*!************************************!*\
  !*** ./app/components/m5_light.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\n   function getAll () {\r\n        var options = [];\r\n        for (var i = 0; i < Blockly.Units.length; i++) {\r\n            if (Blockly.Units[i].type === 'light') {\r\n                options.push([Blockly.Units[i].name, Blockly.Units[i].name]);\r\n            }\r\n        }\r\n        if (options.length === 0) return [['', '']];\r\n        return options;\r\n    }\r\n\r\n\r\n\r\nBlockly.Blocks['light_a_read'] = {\r\n    init: function () {\r\n        this.jsonInit(this._lightaread());\r\n    },\r\n    _lightaread: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LIGHT_A_READ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VARNAME', 'options':  getAll() \r\n                }\r\n            ],\r\n            'inputsInline': true,\r\n            'output':null,\r\n            'colour': Blockly.Msg.SPEAKER_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['light_a_read'] = function(block) {\r\n    var varname = block.getFieldValue('VARNAME');\r\n    return [varname + '.a_read()', Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\n\r\n\r\nBlockly.Blocks['light_d_read'] = {\r\n    init: function () {\r\n        this.jsonInit(this._lightbread());\r\n    },\r\n    _lightbread: function() {\r\n        return {\r\n            'message0': Blockly.Msg.LIGHT_D_READ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VARNAME', 'options':  getAll() \r\n                }\r\n            ],\r\n            'inputsInline': true,\r\n            'output':null,\r\n            'colour': Blockly.Msg.SPEAKER_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['light_d_read'] = function(block) {\r\n    var varname = block.getFieldValue('VARNAME');\r\n    return [varname + '.d_read()', Blockly.Python.ORDER_CONDITIONAL];\r\n}\n\n//# sourceURL=webpack:///./app/components/m5_light.js?");

/***/ }),

/***/ "./app/components/m5_lorawan.js":
/*!**************************************!*\
  !*** ./app/components/m5_lorawan.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\n\r\nBlockly.Blocks['lorawan_initrx'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.LORAWAN_INITTRX,\r\n            'args0': [\r\n            ],\r\n            \"message1\": \"%1\",\r\n            \"args1\": [\r\n                { \"type\": \"input_statement\", \"name\": \"FUNC\" }],\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.TIMER_HUE\r\n        }\r\n    }\r\n}\r\n\r\nBlockly.Python['lorawan_initrx'] = function (block) {\r\n    var func = Blockly.Python.statementToCode(block, 'FUNC', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    let code = `def lorawan0_cb(data):\\n  # global params\\n${func}  pass\\n`;\r\n    code +=  `lorawan0.initRxMode(lorawan0_cb)\\n`\r\n\r\n    return [code, Blockly.Python.ORDER_MEMBER];\r\n}\r\n\r\nBlockly.Blocks['lorawan_initp2p'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.LORAWAN_INITP2P,\r\n            'inputsInline': true,\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            \"args0\": [\r\n                { 'type': 'input_value', 'name': 'VALUE' },\r\n            ],\r\n            'colour': Blockly.Msg.TIMER_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['lorawan_initp2p'] = function (block) {\r\n    var value = Blockly.Python.valueToCode(block, 'VALUE', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var code =  `lorawan0.initP2PMode(${value})\\n`;\r\n    return code;\r\n}\r\n\r\nBlockly.Blocks['lorawan_data'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.LORAWAN_DATA,\r\n            'inputsInline': true,\r\n            'output': null,\r\n            \"args0\": [\r\n            ],\r\n            'colour': Blockly.Msg.TIMER_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['lorawan_data'] = function (block) {\r\n    var code =  `data`;\r\n    return [code, Blockly.Python.ORDER_MEMBER];\r\n}\r\n\r\nBlockly.Blocks['lorawan_txt'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.LORAWAN_TXT,\r\n            'inputsInline': true,\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            \"args0\": [\r\n                { 'type': 'input_value', 'name': 'VALUE' },\r\n            ],\r\n            'colour': Blockly.Msg.TIMER_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['lorawan_txt'] = function (block) {\r\n    var value = Blockly.Python.valueToCode(block, 'VALUE', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var code = `lorawan0.txStr(${value})\\n`;\r\n    return code;\r\n}\r\n\n\n//# sourceURL=webpack:///./app/components/m5_lorawan.js?");

/***/ }),

/***/ "./app/components/m5_makey.js":
/*!************************************!*\
  !*** ./app/components/m5_makey.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\n   function getAll () {\r\n    var options = [];\r\n    for (var i = 0; i < Blockly.Units.length; i++) {\r\n        if (Blockly.Units[i].type === 'makey') {\r\n            options.push([Blockly.Units[i].name, Blockly.Units[i].name]);\r\n        }\r\n    }\r\n    if (options.length === 0) return [['', '']];\r\n    return options;\r\n}\r\n\r\n\r\n\r\n\r\nBlockly.Blocks['makey_value'] = {\r\ninit: function () {\r\n    this.jsonInit(this._makevalue());\r\n},\r\n_makevalue: function() {\r\n    return {\r\n        'message0': Blockly.Msg.MAKEY_VALUE,\r\n        'args0': [\r\n            { 'type': 'input_dummy' },\r\n            {\r\n                'type': 'field_dropdown', 'name': 'VARNAME', 'options':  getAll() \r\n            }\r\n        ],\r\n        'inputsInline': true,\r\n        'output':null,\r\n        'colour': Blockly.Msg.NXT_MOTOR_HUE\r\n    };\r\n}\r\n}\r\nBlockly.Python['makey_value'] = function(block) {\r\n    var varname = block.getFieldValue('VARNAME');\r\n    return [varname + '.value()', Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\n\r\n\r\nBlockly.Blocks['makey_play_piano'] = {\r\ninit: function () {\r\n    this.jsonInit(this._makeyplaypiano());\r\n},\r\n_makeyplaypiano: function() {\r\n    return {\r\n        'message0': Blockly.Msg.MAKEY_PLAY_PIANO,\r\n        'args0': [\r\n            { 'type': 'input_dummy' },\r\n            {\r\n                'type': 'field_dropdown', 'name': 'VARNAME', 'options':  getAll() \r\n            },\r\n            {\r\n                'type': 'field_dropdown', 'name': 'BEAT', 'options': [\r\n                    ['1', '1'],\r\n                    ['1/2', '1/2'],\r\n                    ['1/4', '1/4'],\r\n                    ['1/8', '1/8'],\r\n                    ['1/16', '1/16'],\r\n                    ['2', '2'],\r\n                    ['4', '4']\r\n                ]\r\n            }\r\n        ],\r\n        'inputsInline': true,\r\n        'previousStatement': null,\r\n        'nextStatement': null,\r\n        'colour': Blockly.Msg.NXT_MOTOR_HUE\r\n    };\r\n}\r\n}\r\nBlockly.Python['makey_play_piano'] = function(block) {\r\n    var varname = block.getFieldValue('VARNAME');\r\n    var beat = block.getFieldValue('BEAT');\r\n    return varname + '.play_piano(' + beat + ')\\n';\r\n}\r\n\r\nBlockly.Blocks['makey_all_value'] = {\r\n    init: function () {\r\n        this.jsonInit(this._makevalue());\r\n    },\r\n    _makevalue: function() {\r\n        return {\r\n            'message0': Blockly.Msg.MAKEY_ALL_VALUE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VARNAME', 'options':  getAll() \r\n                }\r\n            ],\r\n            'inputsInline': true,\r\n            'output':null,\r\n            'colour': Blockly.Msg.NXT_MOTOR_HUE\r\n        };\r\n    }\r\n    }\r\n    Blockly.Python['makey_all_value'] = function(block) {\r\n        var varname = block.getFieldValue('VARNAME');\r\n        return [varname + '.get_value()', Blockly.Python.ORDER_CONDITIONAL];\r\n    }\r\n    \n\n//# sourceURL=webpack:///./app/components/m5_makey.js?");

/***/ }),

/***/ "./app/components/m5_mqtt.js":
/*!***********************************!*\
  !*** ./app/components/m5_mqtt.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("Blockly.Blocks['mqtt_set_client'] = {\r\n    init: function () {\r\n        this.jsonInit(this._pinsSetMap());\r\n    },\r\n    _pinsSetMap: function() {\r\n        return {\r\n            'message0': Blockly.Msg.MQTT_SET_CLIENT,\r\n            'args0': [\r\n                { 'type': 'input_value', 'name': 'ID'},\r\n                { 'type': 'input_value', 'name': 'SERVER'},\r\n                { 'type': 'input_value', 'name': 'PORT'},\r\n                { 'type': 'input_value', 'name': 'USER'},\r\n                { 'type': 'input_value', 'name': 'PASSWORD'},\r\n                { 'type': 'input_value', 'name': 'KEEPALIVE'},\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'colour': Blockly.Msg.RGB_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['mqtt_set_client'] = function (block) {\r\n\r\n    var id = Blockly.Python.valueToCode(block, 'ID', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    var server = Blockly.Python.valueToCode(block, 'SERVER', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    var port = Blockly.Python.valueToCode(block, 'PORT', Blockly.Python.ORDER_FUNCTION_CALL) || '1883';\r\n    var user = Blockly.Python.valueToCode(block, 'USER', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    var password = Blockly.Python.valueToCode(block, 'PASSWORD', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    var keepalive = Blockly.Python.valueToCode(block, 'KEEPALIVE', Blockly.Python.ORDER_FUNCTION_CALL) || '300';\r\n    return 'm5mqtt = M5mqtt(' + id + ', ' + server + ', ' + port + ', ' + user + ', ' + password + ', '+ keepalive +')\\n';\r\n}\r\n\r\n\r\nBlockly.Blocks['mqtt_sub'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.MQTT_SUB,\r\n            'args0': [\r\n                { 'type': 'input_value', 'name': 'FROM' },\r\n            ],\r\n            \"message1\": \"%1\",\r\n            \"args1\": [\r\n              {\"type\": \"input_statement\", \"name\": \"FUNC\"}],\r\n            'colour': Blockly.Msg.RGB_HUE\r\n        }\r\n    }\r\n}\r\n\r\nBlockly.Python['mqtt_sub'] = function (block) {\r\n    var from = Blockly.Python.valueToCode(block, 'FROM', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    var func = Blockly.Python.statementToCode(block, 'FUNC', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    var num = from.replace(/\\W/ig, '_')\r\n    let code = `def fun${num}(topic_data):\\n  # global params\\n${func}  pass\\n`;\r\n    code +=  'm5mqtt.subscribe' + '(str('+ from +'), fun'+num+')\\n'\r\n\r\n\r\n    return [code, Blockly.Python.ORDER_MEMBER];\r\n}\r\n\r\n\r\nBlockly.Blocks['mqtt_start'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.MQTT_START,\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'colour': Blockly.Msg.RGB_HUE\r\n        }\r\n    }\r\n}\r\n\r\nBlockly.Python['mqtt_start'] = function (block) {\r\n    return 'm5mqtt.start()\\n';\r\n}\r\n\r\nBlockly.Blocks['mqtt_get_topic_data'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.MQTT_GET_TOPICDATA,\r\n            'output': null,\r\n            'colour': Blockly.Msg.RGB_HUE\r\n        }\r\n    }\r\n}\r\n\r\nBlockly.Python['mqtt_get_topic_data'] = function (block) {\r\n    let code = 'topic_data'\r\n    return [code, Blockly.Python.ORDER_MEMBER];\r\n}\r\n\r\nBlockly.Blocks['mqtt_publish'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.MQTT_PUBLISH,\r\n            'args0': [\r\n                { 'type': 'input_value', 'name': 'FROM' },\r\n                { 'type': 'input_value', 'name': 'MSG' },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.RGB_HUE\r\n        }\r\n    }\r\n}\r\n\r\nBlockly.Python['mqtt_publish'] = function (block) {\r\n    var from =  Blockly.Python.valueToCode(block, 'FROM', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    var msg =  Blockly.Python.valueToCode(block, 'MSG', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    return `m5mqtt.publish(str(${from}),str(${msg}))\\n`\r\n}\r\n\r\n\n\n//# sourceURL=webpack:///./app/components/m5_mqtt.js?");

/***/ }),

/***/ "./app/components/m5_ncir.js":
/*!***********************************!*\
  !*** ./app/components/m5_ncir.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function gettofAll() {\r\n\tvar options = [];\r\n\tfor (var i = 0; i < Blockly.Units.length; i++) {\r\n\t\tif (Blockly.Units[i].type === 'ncir') {\r\n\t\t\toptions.push([Blockly.Units[i].name, Blockly.Units[i].name]);\r\n\t\t}\r\n\t}\r\n\tif (options.length === 0) return [['', '']];\r\n\treturn options;\r\n}\r\nBlockly.Blocks['unit_ncir_read'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.NCIR_READ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'IR', 'options': gettofAll\r\n                },\r\n            ],\r\n            'output': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.SPEAKER_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['unit_ncir_read'] = function (block) {\r\n    var ir = block.getFieldValue('IR') || '';\r\n    var code = ir + '.' +'read_tmp()';\r\n    return [code, Blockly.Python.ORDER_CONDITIONAL];\r\n}\n\n//# sourceURL=webpack:///./app/components/m5_ncir.js?");

/***/ }),

/***/ "./app/components/m5_neopixel.js":
/*!***************************************!*\
  !*** ./app/components/m5_neopixel.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\nfunction getAll() {\r\n\tvar options = [];\r\n\tfor (var i = 0; i < Blockly.Units.length; i++) {\r\n\t\tif (Blockly.Units[i].type === 'neopixel') {\r\n\t\t\toptions.push([Blockly.Units[i].name, Blockly.Units[i].name]);\r\n\t\t}\r\n\t}\r\n\tif (options.length === 0) return [['', '']];\r\n\treturn options;\r\n}\r\nBlockly.Blocks['rgb_multi_set_color'] = {\r\n\tinit: function () {\r\n\t\tthis.jsonInit(this._rgbmulyisetcolor());\r\n\t},\r\n\t_rgbmulyisetcolor: function () {\r\n\t\treturn {\r\n\t\t\t'message0': Blockly.Msg.RGB_MULTI_SET_COLOR,\r\n\t\t\t'args0': [\r\n\t\t\t\t{ 'type': 'input_dummy' },\r\n\t\t\t\t{ 'type': 'field_dropdown', 'name': 'VARNAME', 'options': getAll },\r\n\t\t\t\t{ 'type': 'input_value', 'name': 'INDEX' },\r\n\t\t\t\t{ 'type': 'input_dummy' },\r\n\t\t\t\t{ 'type': 'field_colour', 'name': 'COLOR', 'colour': '#ff0000' },\r\n\r\n\t\t\t],\r\n\t\t\t'previousStatement': null,\r\n\t\t\t'nextStatement': null,\r\n\t\t\t'inputsInline': true,\r\n\t\t\t'colour': Blockly.Msg.PINS_HUE\r\n\t\t};\r\n\t}\r\n}\r\nBlockly.Python['rgb_multi_set_color'] = function (block) {\r\n\tvar varname = block.getFieldValue('VARNAME');\r\n\tvar index = Blockly.Python.valueToCode(block, 'INDEX', Blockly.Python.ORDER_FUNCTION_CALL) || '10';\r\n\tvar color = block.getFieldValue('COLOR');\r\n\treturn varname + '.setColor(' + index + ', ' + color.replace('#', '0x') + ')\\n';\r\n}\r\nBlockly.Blocks['rgb_multi_set_color_from'] = {\r\n\tinit: function () {\r\n\t\tthis.jsonInit(this._rgbmultisetcolorfrom());\r\n\t},\r\n\t_rgbmultisetcolorfrom: function () {\r\n\t\treturn {\r\n\t\t\t'message0': Blockly.Msg.RGB_MULTI_SET_COLOR_FROM,\r\n\t\t\t'args0': [\r\n\t\t\t\t{ 'type': 'input_dummy' },\r\n\t\t\t\t{ 'type': 'field_dropdown', 'name': 'VARNAME', 'options': getAll},\r\n\t\t\t\t{ 'type': 'input_value', 'name': 'FROM' },\r\n\t\t\t\t{ 'type': 'input_value', 'name': 'TO' },\r\n\t\t\t\t{ 'type': 'input_dummy' },\r\n\t\t\t\t{ 'type': 'field_colour', 'name': 'COLOR', 'colour': '#ff0000' },\r\n\r\n\t\t\t],\r\n\t\t\t'previousStatement': null,\r\n\t\t\t'nextStatement': null,\r\n\t\t\t'inputsInline': true,\r\n\t\t\t'colour': Blockly.Msg.PINS_HUE\r\n\t\t};\r\n\t}\r\n}\r\nBlockly.Python['rgb_multi_set_color_from'] = function (block) {\r\n\tvar varname = block.getFieldValue('VARNAME');\r\n\tvar from = Blockly.Python.valueToCode(block, 'FROM', Blockly.Python.ORDER_FUNCTION_CALL) || '1';\r\n\tvar to = Blockly.Python.valueToCode(block, 'TO', Blockly.Python.ORDER_FUNCTION_CALL) || '5';\r\n\tvar color = block.getFieldValue('COLOR');\r\n\treturn varname + '.setColorFrom(' + from + ', ' + to + ', ' + color.replace('#', '0x') + ')\\n';\r\n}\r\n\r\nBlockly.Blocks['rgb_multi_set_color_all'] = {\r\n\tinit: function () {\r\n\t\tthis.jsonInit(this._rgbmulyisetcolorall());\r\n\t},\r\n\t_rgbmulyisetcolorall: function () {\r\n\t\treturn {\r\n\t\t\t'message0': Blockly.Msg.RGB_MULTI_SET_COLOR_ALL,\r\n\t\t\t'args0': [\r\n\t\t\t\t{ 'type': 'input_dummy' },\r\n\t\t\t\t{ 'type': 'field_dropdown', 'name': 'VARNAME', 'options': getAll() },\r\n\t\t\t\t{ 'type': 'input_dummy' },\r\n\t\t\t\t{ 'type': 'field_colour', 'name': 'COLOR', 'colour': '#ff0000' },\r\n\r\n\t\t\t],\r\n\t\t\t'previousStatement': null,\r\n\t\t\t'nextStatement': null,\r\n\t\t\t'inputsInline': true,\r\n\t\t\t'colour': Blockly.Msg.PINS_HUE\r\n\t\t};\r\n\t}\r\n}\r\nBlockly.Python['rgb_multi_set_color_all'] = function (block) {\r\n\tvar varname = block.getFieldValue('VARNAME');\r\n\tvar color = block.getFieldValue('COLOR');\r\n\treturn varname + '.setColorAll(' + color.replace('#', '0x') + ')\\n';\r\n}\r\n\r\nBlockly.Blocks['rgb_multi_set_color_from_rgb'] = {\r\n\tinit: function () {\r\n\t\tthis.jsonInit(this._rgbmulyisetfromrgb());\r\n\t},\r\n\t_rgbmulyisetfromrgb: function () {\r\n\t\treturn {\r\n\t\t\t'message0': Blockly.Msg.RGB_MULTI_SET_COLOR_FROM_RGB,\r\n\t\t\t'args0': [\r\n\t\t\t\t{ 'type': 'input_dummy' },\r\n\t\t\t\t{ 'type': 'field_dropdown', 'name': 'VARNAME', 'options': getAll },\r\n\t\t\t\t{ 'type': 'input_value', 'name': 'FROM' },\r\n\t\t\t\t{ 'type': 'input_value', 'name': 'TO' },\r\n\t\t\t\t{ 'type': 'input_value', 'name': 'R' },\r\n\t\t\t\t{ 'type': 'input_value', 'name': 'G' },\r\n\t\t\t\t{ 'type': 'input_value', 'name': 'B' },\r\n\t\t\t],\r\n\t\t\t'previousStatement': null,\r\n\t\t\t'nextStatement': null,\r\n\t\t\t'inputsInline': true,\r\n\t\t\t'colour': Blockly.Msg.PINS_HUE\r\n\t\t};\r\n\t}\r\n}\r\nBlockly.Python['rgb_multi_set_color_from_rgb'] = function(block) {\r\n    var varname = block.getFieldValue('VARNAME');\r\n    var from = Blockly.Python.valueToCode(block, 'FROM', Blockly.Python.ORDER_FUNCTION_CALL) || '1';\r\n    var to = Blockly.Python.valueToCode(block, 'TO', Blockly.Python.ORDER_FUNCTION_CALL) || '5';\r\n    var r = Blockly.Python.valueToCode(block, 'R', Blockly.Python.ORDER_NONE) || '0';\r\n    var g = Blockly.Python.valueToCode(block, 'G', Blockly.Python.ORDER_NONE) || '0';\r\n    var b = Blockly.Python.valueToCode(block, 'B', Blockly.Python.ORDER_NONE) || '0';\r\n    if(isNaN(parseInt(r)) || isNaN(parseInt(g)) || isNaN(parseInt(b))) {\r\n        return varname + `.setColorFrom(${from},${to},(${r} << 16) | (${g} << 8) | ${b})\\n`;\r\n    }\r\n    var hexR = Math.floor(Math.abs(parseInt(r)) % 256).toString(16);\r\n    var hexG = Math.floor(Math.abs(parseInt(g)) % 256).toString(16);\r\n    var hexB = Math.floor(Math.abs(parseInt(b)) % 256).toString(16);\r\n    if(hexR.length < 2) hexR = '0' + hexR;\r\n    if(hexG.length < 2) hexG = '0' + hexG;\r\n    if(hexB.length < 2) hexB = '0' + hexB;\r\n    return varname + '.setColorFrom(' + from + ', ' + to + ', 0x' + hexR + hexG + hexB + ')\\n';\r\n}\r\n\r\n\r\nBlockly.Blocks['rgb_multi_set_brightness'] = {\r\n\tinit: function () {\r\n\t\tthis.jsonInit(this._rgbmulyisetbrightness());\r\n\t},\r\n\t_rgbmulyisetbrightness: function () {\r\n\t\treturn {\r\n\t\t\t'message0': Blockly.Msg.RGB_MULTI_SET_BRIGHTNESS,\r\n\t\t\t'args0': [\r\n\t\t\t\t{ 'type': 'input_dummy' },\r\n\t\t\t\t{ 'type': 'field_dropdown', 'name': 'VARNAME', 'options': getAll },\r\n\t\t\t\t{ 'type': 'input_value', 'name': 'BRIGHTNESS' },\r\n\t\t\t],\r\n\t\t\t'previousStatement': null,\r\n\t\t\t'nextStatement': null,\r\n\t\t\t'inputsInline': true,\r\n\t\t\t'colour': Blockly.Msg.PINS_HUE\r\n\t\t};\r\n\t}\r\n}\r\nBlockly.Python['rgb_multi_set_brightness'] = function (block) {\r\n\tvar varname = block.getFieldValue('VARNAME');\r\n\tvar brightness = Blockly.Python.valueToCode(block, 'BRIGHTNESS', Blockly.Python.ORDER_FUNCTION_CALL) || '100';\r\n\treturn varname + '.setBrightness(' + brightness + ')\\n';\r\n}\r\n\r\nBlockly.Blocks['rgb_multi_set_matrix'] = {\r\n    init: function() {\r\n        this.setColour(Blockly.Msg.PINS_HUE);\r\n        this.setPreviousStatement(true);\r\n        this.setNextStatement(true);\r\n        this.setInputsInline(false);\r\n\r\n        this.appendDummyInput()\r\n            .appendField('Set ')\r\n            .appendField(new Blockly.FieldDropdown(this.getAllS), 'VARNAME')\r\n            .appendField('neopixel matrix in ')\r\n            .appendField(new Blockly.FieldColour('#FF0000'), 'COLOR');\r\n        for (var i = 0; i < 16; i++) {\r\n            var line = this.appendDummyInput();\r\n            for (var j = 0; j < 16; j++) {\r\n                line.appendField(new Blockly.FieldCheckbox('FALSE'), 'MAP_' + i + '_' + j);\r\n            }\r\n        }\r\n    },\r\n    getAllS: function() {\r\n        var options = [];\r\n        for (var i = 0; i < Blockly.Units.length; i++) {\r\n            if (Blockly.Units[i].type === 'neopixel') {\r\n                options.push([Blockly.Units[i].name, Blockly.Units[i].name]);\r\n            }\r\n        }\r\n        if (options.length === 0) return [['', '']];\r\n        return options;\r\n    }\r\n}\r\nBlockly.Python['rgb_multi_set_matrix'] = function(block) {\r\n    var varname = block.getFieldValue('VARNAME');\r\n    var color = block.getFieldValue('COLOR') || '#FF0000';\r\n    var map = [];\r\n    var index = [];\r\n    for (var i = 0; i < 16; i++) {\r\n        for (var j = 0; j < 16; j++) {\r\n            if(block.getFieldValue('MAP_' + i + '_' + j) === 'FALSE') continue;\r\n            if(i % 2 != 0) {\r\n                index.push(i * 16 + (j + 1));\r\n            } else {\r\n                index.push(i * 16 + (16 - j));\r\n            }\r\n        }\r\n    }\r\n\r\n    index.sort(function(a, b) { return a - b; });\r\n    var group = [];\r\n    for(var i = 0; i < index.length;) {\r\n        group.push([index[i]]);\r\n        var j = i + 1;\r\n        while(j < index.length) {\r\n            if(index[j] - index[j - 1] === 1) {\r\n                group[group.length - 1].push(index[j]);\r\n                j++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        i = j;\r\n    }\r\n    \r\n    for(var i = 0; i < group.length; i++) {\r\n        if(group[i].length === 1) {\r\n            map.push(varname + '.setColor(' + group[i][0] + ', ' + color.replace('#', '0x') + ')');\r\n        } else {\r\n            map.push(varname + '.setColorFrom(' + group[i][0] + ', ' + group[i][group[i].length - 1] + ', ' + color.replace('#', '0x') + ')');\r\n        }\r\n    }\r\n\r\n\r\n    return map.join('\\n') + '\\n';\r\n}\r\n\r\nBlockly.Blocks['rgb_multi_set_matrix_rgb'] = {\r\n    init: function() {\r\n        this.setColour(Blockly.Msg.PINS_HUE);\r\n        this.setPreviousStatement(true);\r\n        this.setNextStatement(true);\r\n        this.setInputsInline(false);\r\n\r\n        this.appendDummyInput()\r\n            .appendField('Set ')\r\n            .appendField(new Blockly.FieldDropdown(this.getAll), 'VARNAME')\r\n            .appendField('neopixel matrix in ')\r\n\r\n        this.appendValueInput('R')\r\n            .appendField('red');\r\n        this.appendValueInput('G')\r\n            .appendField('green');\r\n        this.appendValueInput('B')\r\n            .appendField('blue');\r\n        \r\n        for (var i = 0; i < 16; i++) {\r\n            var line = this.appendDummyInput();\r\n            for (var j = 0; j < 16; j++) {\r\n                line.appendField(new Blockly.FieldCheckbox('FALSE'), 'MAP_' + i + '_' + j);\r\n            }\r\n        }\r\n    },\r\n    getAll: function() {\r\n        var options = [];\r\n        for (var i = 0; i < Blockly.Units.length; i++) {\r\n            if (Blockly.Units[i].type === 'neopixel') {\r\n                options.push([Blockly.Units[i].name, Blockly.Units[i].name]);\r\n            }\r\n        }\r\n        if (options.length === 0) return [['', '']];\r\n        return options;\r\n    }\r\n}\r\nBlockly.Python['rgb_multi_set_matrix_rgb'] = function(block) {\r\n    var varname = block.getFieldValue('VARNAME');\r\n    var r = Blockly.Python.valueToCode(block, 'R', Blockly.Python.ORDER_NONE) || '0';\r\n    var g = Blockly.Python.valueToCode(block, 'G', Blockly.Python.ORDER_NONE) || '0';\r\n    var b = Blockly.Python.valueToCode(block, 'B', Blockly.Python.ORDER_NONE) || '0';\r\n    var hexR = Math.floor(Math.abs(parseInt(r)) % 256).toString(16);\r\n    var hexG = Math.floor(Math.abs(parseInt(g)) % 256).toString(16);\r\n    var hexB = Math.floor(Math.abs(parseInt(b)) % 256).toString(16);\r\n    if(hexR.length < 2) hexR = '0' + hexR;\r\n    if(hexG.length < 2) hexG = '0' + hexG;\r\n    if(hexB.length < 2) hexB = '0' + hexB;\r\n    \r\n    var map = [];\r\n    var index = [];\r\n    for (var i = 0; i < 16; i++) {\r\n        for (var j = 0; j < 16; j++) {\r\n            if(block.getFieldValue('MAP_' + i + '_' + j) === 'FALSE') continue;\r\n            if(i % 2 != 0) {\r\n                index.push(i * 16 + (j + 1));\r\n                \r\n            } else {\r\n                index.push(i * 16 + (16 - j));\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    index.sort(function(a, b) { return a - b; });\r\n    var group = [];\r\n    for(var i = 0; i < index.length;) {\r\n        group.push([index[i]]);\r\n        var j = i + 1;\r\n        while(j < index.length) {\r\n            if(index[j] - index[j - 1] === 1) {\r\n                group[group.length - 1].push(index[j]);\r\n                j++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        i = j;\r\n    }\r\n    \r\n    for(var i = 0; i < group.length; i++) {\r\n        if(group[i].length === 1) {\r\n            if(isNaN(parseInt(r)) || isNaN(parseInt(g)) || isNaN(parseInt(b))) {\r\n                map.push(varname + \".setColor(\" + group[i][0] + \", \" + \"int('0x%02x%02x%02x' % (round(min(100, max(0, \" + r +\")) * 2.55), round(min(100, max(0, \" + g +\")) * 2.55), round(min(100, max(0, \" + b +\")) * 2.55))))\\n\");\r\n            } else {\r\n                map.push(varname + '.setColor(' + group[i][0] + ', 0x' + hexR + hexG + hexB + ')');\r\n            }\r\n        } else {\r\n            if(isNaN(parseInt(r)) || isNaN(parseInt(g)) || isNaN(parseInt(b))) {\r\n                map.push(varname + \".setColor(\" + group[i][0] + ', ' + group[i][group[i].length - 1] + \", \" + \"int('0x%02x%02x%02x' % (round(min(100, max(0, \" + r +\")) * 2.55), round(min(100, max(0, \" + g +\")) * 2.55), round(min(100, max(0, \" + b +\")) * 2.55))))\\n\");\r\n            } else {\r\n                map.push(varname + '.setColor(' + group[i][0] + ', ' + group[i][group[i].length - 1] + ', 0x' + hexR + hexG + hexB + ')');\r\n            }\r\n        }\r\n    }\r\n\r\n    return map.join('\\n') + '\\n';\r\n}\r\n\r\nBlockly.Blocks['rgb_multi_set_hexagon_matrix'] = {\r\n    init: function() {\r\n        this.setColour(Blockly.Msg.PINS_HUE);\r\n        this.setPreviousStatement(true);\r\n        this.setNextStatement(true);\r\n        this.setInputsInline(false);\r\n\r\n        this.appendDummyInput()\r\n            .appendField('Set ')\r\n            .appendField(new Blockly.FieldDropdown(this.getAll), 'VARNAME')\r\n            .appendField('neopixel hexagon matrix in ')\r\n            .appendField(new Blockly.FieldColour('#FF0000'), 'COLOR');\r\n\r\n        for (var i = 0; i < 7; i++) {\r\n            var line = this.appendDummyInput();\r\n            for (var j = 0; j < 7; j++) {\r\n                if((i == 0 && j == 4) || (i == 0 && j == 5) || (i == 0 && j == 6) || (i == 1 && j == 5) || (i == 1 && j == 6) || (i == 2 && j == 6) ||\r\n                (i == 6 && j == 4) || (i == 5 && j == 5) || (i == 6 && j == 5) || (i == 4 && j == 6) || (i == 5 && j == 6) || (i == 6 && j == 6)) continue;\r\n                line.appendField(new Blockly.FieldCheckbox('FALSE'), 'MAP_' + i + '_' + j);\r\n            }\r\n        }\r\n\r\n        var _this = this;\r\n        setTimeout(function(){\r\n            var g = _this.svgGroup_.querySelectorAll('g');\r\n\r\n            g[2].style.transform = 'translate(10px, 67.5px)';\r\n            g[3].style.transform = 'translate(10px, 92.5px)';\r\n            g[4].style.transform = 'translate(10px, 117.5px)';\r\n            g[5].style.transform = 'translate(10px, 142.5px)';\r\n\r\n            g[6].style.transform = 'translate(34px, 55px)';\r\n            g[7].style.transform = 'translate(34px, 80px)';\r\n            g[8].style.transform = 'translate(34px, 105px)';\r\n            g[9].style.transform = 'translate(34px, 130px)';\r\n            g[10].style.transform = 'translate(34px, 155px)';\r\n\r\n            g[11].style.transform = 'translate(58px, 42.5px)';\r\n            g[12].style.transform = 'translate(58px, 67.5px)';\r\n            g[13].style.transform = 'translate(58px, 92.5px)';\r\n            g[14].style.transform = 'translate(58px, 117.5px)';\r\n            g[15].style.transform = 'translate(58px, 142.5px)';\r\n            g[16].style.transform = 'translate(58px, 167.5px)';\r\n\r\n            g[17].style.transform = 'translate(82px, 30px)';\r\n            g[18].style.transform = 'translate(82px, 55px)';\r\n            g[19].style.transform = 'translate(82px, 80px)';\r\n            g[20].style.transform = 'translate(82px, 105px)';\r\n            g[21].style.transform = 'translate(82px, 130px)';\r\n            g[22].style.transform = 'translate(82px, 155px)';\r\n            g[23].style.transform = 'translate(82px, 180px)';\r\n\r\n            g[24].style.transform = 'translate(106px, 42.5px)';\r\n            g[25].style.transform = 'translate(106px, 67.5px)';\r\n            g[26].style.transform = 'translate(106px, 92.5px)';\r\n            g[27].style.transform = 'translate(106px, 117.5px)';\r\n            g[28].style.transform = 'translate(106px, 142.5px)';\r\n            g[29].style.transform = 'translate(106px, 167.5px)';\r\n\r\n            g[30].style.transform = 'translate(130px, 55px)';\r\n            g[31].style.transform = 'translate(130px, 80px)';\r\n            g[32].style.transform = 'translate(130px, 105px)';\r\n            g[33].style.transform = 'translate(130px, 130px)';\r\n            g[34].style.transform = 'translate(130px, 155px)';\r\n\r\n            g[35].style.transform = 'translate(154px, 67.5px)';\r\n            g[36].style.transform = 'translate(154px, 92.5px)';\r\n            g[37].style.transform = 'translate(154px, 117.5px)';\r\n            g[38].style.transform = 'translate(154px, 142.5px)';\r\n        });\r\n        \r\n    },\r\n    getAll: function() {\r\n        var options = [];\r\n        for (var i = 0; i < Blockly.Units.length; i++) {\r\n            if (Blockly.Units[i].type === 'neopixel') {\r\n                options.push([Blockly.Units[i].name, Blockly.Units[i].name]);\r\n            }\r\n        }\r\n        if (options.length === 0) return [['', '']];\r\n        return options;\r\n    },\r\n    getIndexMap: function(i, j) {\r\n        \r\n    },\r\n    _indexMap: {\r\n        '0-0': 34, '0-1': 35, '0-2': 36, '0-3': 37, '1-0': 29, '1-1': 30, '1-2': 31, '1-3': 32, '1-4': 33, '2-0': 23,\r\n        '2-1': 24, '2-2': 25, '2-3': 26, '2-4': 27, '2-5': 28, '3-0': 16, '3-1': 17, '3-2': 18, '3-3': 19, '3-4': 20,\r\n        '3-5': 21, '3-6': 22, '4-0': 10, '4-1': 11, '4-2': 12, '4-3': 13, '4-4': 14, '4-5': 15, '5-0': 5, '5-1': 6,\r\n        '5-2': 7, '5-3': 8, '5-4': 9, '6-0': 1, '6-1': 2, '6-2': 3, '6-3': 4\r\n    }\r\n}\r\nBlockly.Python['rgb_multi_set_hexagon_matrix'] = function(block) {\r\n    var varname = block.getFieldValue('VARNAME');\r\n    var color = block.getFieldValue('COLOR') || '#FF0000';\r\n    var map = [];\r\n    var index = [];\r\n    for (var i = 0; i < 7; i++) {\r\n        for (var j = 0; j < 7; j++) {\r\n            if(block.getFieldValue('MAP_' + i + '_' + j) === 'FALSE' || block.getFieldValue('MAP_' + i + '_' + j) == null) continue;\r\n            index.push(block._indexMap[i + '-' + j]);\r\n        }\r\n    }\r\n\r\n    index.sort(function(a, b) { return a - b; });\r\n    var group = [];\r\n    for(var i = 0; i < index.length;) {\r\n        group.push([index[i]]);\r\n        var j = i + 1;\r\n        while(j < index.length) {\r\n            if(index[j] - index[j - 1] === 1) {\r\n                group[group.length - 1].push(index[j]);\r\n                j++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        i = j;\r\n    }\r\n    \r\n    for(var i = 0; i < group.length; i++) {\r\n        if(group[i].length === 1) {\r\n            map.push(varname + '.setColor(' + group[i][0] + ', ' + color.replace('#', '0x') + ')');\r\n        } else {\r\n            map.push(varname + '.setColorFrom(' + group[i][0] + ', ' + group[i][group[i].length - 1] + ', ' + color.replace('#', '0x') + ')');\r\n        }\r\n    }\r\n\r\n    return map.join('\\n') + '\\n';\r\n}\r\n\r\nBlockly.Blocks['rgb_multi_set_hexagon_matrix_rgb'] = {\r\n    init: function() {\r\n        this.setColour(Blockly.Msg.PINS_HUE);\r\n        this.setPreviousStatement(true);\r\n        this.setNextStatement(true);\r\n        this.setInputsInline(false);\r\n\r\n        this.appendDummyInput()\r\n            .appendField('Set ')\r\n            .appendField(new Blockly.FieldDropdown(this.getAll), 'VARNAME')\r\n            .appendField('neopixel hexagon matrix in ');\r\n        \r\n        this.appendValueInput('R')\r\n            .appendField('red');\r\n        this.appendValueInput('G')\r\n            .appendField('green');\r\n        this.appendValueInput('B')\r\n            .appendField('blue');\r\n\r\n        for (var i = 0; i < 7; i++) {\r\n            var line = this.appendDummyInput();\r\n            for (var j = 0; j < 7; j++) {\r\n                if((i == 0 && j == 4) || (i == 0 && j == 5) || (i == 0 && j == 6) || (i == 1 && j == 5) || (i == 1 && j == 6) || (i == 2 && j == 6) ||\r\n                (i == 6 && j == 4) || (i == 5 && j == 5) || (i == 6 && j == 5) || (i == 4 && j == 6) || (i == 5 && j == 6) || (i == 6 && j == 6)) continue;\r\n                line.appendField(new Blockly.FieldCheckbox('FALSE'), 'MAP_' + i + '_' + j);\r\n            }\r\n        }\r\n\r\n        var _this = this;\r\n        setTimeout(function(){\r\n            var g = _this.svgGroup_.querySelectorAll('g');\r\n            g[7].style.transform = 'translate(10px, 145.5px)';\r\n            g[8].style.transform = 'translate(10px, 170.5px)';\r\n            g[9].style.transform = 'translate(10px, 195.5px)';\r\n            g[10].style.transform = 'translate(10px, 220.5px)';\r\n\r\n            g[11].style.transform = 'translate(34px, 133px)';\r\n            g[12].style.transform = 'translate(34px, 158px)';\r\n            g[13].style.transform = 'translate(34px, 183px)';\r\n            g[14].style.transform = 'translate(34px, 208px)';\r\n            g[15].style.transform = 'translate(34px, 233px)';\r\n\r\n            g[16].style.transform = 'translate(58px, 120.5px)';\r\n            g[17].style.transform = 'translate(58px, 145.5px)';\r\n            g[18].style.transform = 'translate(58px, 170.5px)';\r\n            g[19].style.transform = 'translate(58px, 195.5px)';\r\n            g[20].style.transform = 'translate(58px, 220.5px)';\r\n            g[21].style.transform = 'translate(58px, 245.5px)';\r\n\r\n            g[22].style.transform = 'translate(82px, 108px)';\r\n            g[23].style.transform = 'translate(82px, 133px)';\r\n            g[24].style.transform = 'translate(82px, 158px)';\r\n            g[25].style.transform = 'translate(82px, 183px)';\r\n            g[26].style.transform = 'translate(82px, 208px)';\r\n            g[27].style.transform = 'translate(82px, 233px)';\r\n            g[28].style.transform = 'translate(82px, 258px)';\r\n\r\n            g[29].style.transform = 'translate(106px, 120.5px)';\r\n            g[30].style.transform = 'translate(106px, 145.5px)';\r\n            g[31].style.transform = 'translate(106px, 170.5px)';\r\n            g[32].style.transform = 'translate(106px, 195.5px)';\r\n            g[33].style.transform = 'translate(106px, 220.5px)';\r\n            g[34].style.transform = 'translate(106px, 245.5px)';\r\n\r\n            g[35].style.transform = 'translate(130px, 133px)';\r\n            g[36].style.transform = 'translate(130px, 158px)';\r\n            g[37].style.transform = 'translate(130px, 183px)';\r\n            g[38].style.transform = 'translate(130px, 208px)';\r\n            g[39].style.transform = 'translate(130px, 233px)';\r\n\r\n            g[40].style.transform = 'translate(154px, 145.5px)';\r\n            g[41].style.transform = 'translate(154px, 170.5px)';\r\n            g[42].style.transform = 'translate(154px, 195.5px)';\r\n            g[43].style.transform = 'translate(154px, 220.5px)';\r\n        });\r\n        \r\n    },\r\n    getAll: function() {\r\n        var options = [];\r\n        for (var i = 0; i < Blockly.Units.length; i++) {\r\n            if (Blockly.Units[i].type === 'neopixel') {\r\n                options.push([Blockly.Units[i].name, Blockly.Units[i].name]);\r\n            }\r\n        }\r\n        if (options.length === 0) return [['', '']];\r\n        return options;\r\n    },\r\n    getIndexMap: function(i, j) {\r\n        \r\n    },\r\n    _indexMap: {\r\n        '0-0': 34, '0-1': 35, '0-2': 36, '0-3': 37, '1-0': 29, '1-1': 30, '1-2': 31, '1-3': 32, '1-4': 33, '2-0': 23,\r\n        '2-1': 24, '2-2': 25, '2-3': 26, '2-4': 27, '2-5': 28, '3-0': 16, '3-1': 17, '3-2': 18, '3-3': 19, '3-4': 20,\r\n        '3-5': 21, '3-6': 22, '4-0': 10, '4-1': 11, '4-2': 12, '4-3': 13, '4-4': 14, '4-5': 15, '5-0': 5, '5-1': 6,\r\n        '5-2': 7, '5-3': 8, '5-4': 9, '6-0': 1, '6-1': 2, '6-2': 3, '6-3': 4\r\n    }\r\n}\r\nBlockly.Python['rgb_multi_set_hexagon_matrix_rgb'] = function(block) {\r\n    var varname = block.getFieldValue('VARNAME');\r\n    var map = [];\r\n    var index = [];\r\n    var r = Blockly.Python.valueToCode(block, 'R', Blockly.Python.ORDER_NONE) || '0';\r\n    var g = Blockly.Python.valueToCode(block, 'G', Blockly.Python.ORDER_NONE) || '0';\r\n    var b = Blockly.Python.valueToCode(block, 'B', Blockly.Python.ORDER_NONE) || '0';\r\n    var hexR = Math.floor(Math.abs(parseInt(r)) % 256).toString(16);\r\n    var hexG = Math.floor(Math.abs(parseInt(g)) % 256).toString(16);\r\n    var hexB = Math.floor(Math.abs(parseInt(b)) % 256).toString(16);\r\n    if(hexR.length < 2) hexR = '0' + hexR;\r\n    if(hexG.length < 2) hexG = '0' + hexG;\r\n    if(hexB.length < 2) hexB = '0' + hexB;\r\n    for (var i = 0; i < 7; i++) {\r\n        for (var j = 0; j < 7; j++) {\r\n            if(block.getFieldValue('MAP_' + i + '_' + j) === 'FALSE' || block.getFieldValue('MAP_' + i + '_' + j) == null) continue;\r\n            index.push(block._indexMap[i + '-' + j])\r\n        }\r\n    }\r\n\r\n    index.sort(function(a, b) { return a - b; });\r\n    var group = [];\r\n    for(var i = 0; i < index.length;) {\r\n        group.push([index[i]]);\r\n        var j = i + 1;\r\n        while(j < index.length) {\r\n            if(index[j] - index[j - 1] === 1) {\r\n                group[group.length - 1].push(index[j]);\r\n                j++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        i = j;\r\n    }\r\n    \r\n    for(var i = 0; i < group.length; i++) {\r\n        if(group[i].length === 1) {\r\n            if(isNaN(parseInt(r)) || isNaN(parseInt(g)) || isNaN(parseInt(b))) {\r\n                map.push(varname + \".setColor(\" + group[i][0] + \", \" + \"int('0x%02x%02x%02x' % (round(min(100, max(0, \" + r +\")) * 2.55), round(min(100, max(0, \" + g +\")) * 2.55), round(min(100, max(0, \" + b +\")) * 2.55))))\\n\");\r\n            } else {\r\n                map.push(varname + '.setColor(' + group[i][0] + ', 0x' + hexR + hexG + hexB + ')');\r\n            }\r\n        } else {\r\n            if(isNaN(parseInt(r)) || isNaN(parseInt(g)) || isNaN(parseInt(b))) {\r\n                map.push(varname + \".setColorFrom(\" + group[i][0] + ', ' + group[i][group[i].length - 1] + \", \" + \"int('0x%02x%02x%02x' % (round(min(100, max(0, \" + r +\")) * 2.55), round(min(100, max(0, \" + g +\")) * 2.55), round(min(100, max(0, \" + b +\")) * 2.55))))\\n\");\r\n            } else {\r\n                map.push(varname + '.setColorFrom(' + group[i][0] + ', ' + group[i][group[i].length - 1] + ', 0x' + hexR + hexG + hexB + ')');\r\n            }\r\n        }\r\n    }\r\n\r\n    return map.join('\\n') + '\\n';\r\n}\n\n//# sourceURL=webpack:///./app/components/m5_neopixel.js?");

/***/ }),

/***/ "./app/components/m5_network.js":
/*!**************************************!*\
  !*** ./app/components/m5_network.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("Blockly.Blocks['wifi_connect'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.WIFI_CONNECT,\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'colour': Blockly.Msg.PINS_HUE\r\n        }\r\n    }\r\n}\r\n\r\nBlockly.Python['wifi_connect'] = function (block) {\r\n    return 'import wifisetup\\nwifisetup.auto_connect()\\n';\r\n}\n\n//# sourceURL=webpack:///./app/components/m5_network.js?");

/***/ }),

/***/ "./app/components/m5_pins.js":
/*!***********************************!*\
  !*** ./app/components/m5_pins.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// function_main_event\r\nBlockly.Blocks['pins_analog_read'] = {\r\n    init: function () {\r\n        this.jsonInit(this._functionMainEvent());\r\n    },\r\n    _functionMainEvent: function() {\r\n        return {\r\n            'message0': Blockly.Msg.PINS_ANALOG_READ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'field_dropdown', 'name': 'PIN', 'options':[\r\n                    ['36', '36'],\r\n                    ['35', '35']\r\n                ] },\r\n            ],\r\n            'inputsInline': true,\r\n            \"output\": null,\r\n            'colour': Blockly.Msg.PINS_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['pins_analog_read'] = function (block) {\r\n    Blockly.addModule('pin');\r\n    Blockly.addDeclare('pin');\r\n    var pin = block.getFieldValue('PIN') || '4';\r\n    return ['pin.analogRead(' + pin + ')', Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\n\r\n// function_main_event\r\nBlockly.Blocks['pins_analog_write'] = {\r\n    init: function () {\r\n        this.jsonInit(this._pinsAnalogWrite());\r\n    },\r\n    _pinsAnalogWrite: function() {\r\n        return {\r\n            'message0': Blockly.Msg.PINS_ANALOG_WRITE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'input_value', 'name': 'PIN'},\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'input_value', 'name': 'DUTY'},\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.PINS_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['pins_analog_write'] = function (block) {\r\n    Blockly.addModule('pin');\r\n    Blockly.addDeclare('pin');\r\n    // var pin = block.getFieldValue('PIN') || '4';\r\n    var pin = Blockly.Python.valueToCode(block, 'PIN', Blockly.Python.ORDER_FUNCTION_CALL) || '26';\r\n    var duty = Blockly.Python.valueToCode(block, 'DUTY', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    return 'pin.analogWrite(' + pin + ', ' + duty + ')\\n';\r\n}\r\n// function_main_event\r\nBlockly.Blocks['pins_digital_read'] = {\r\n    init: function () {\r\n        this.jsonInit(this._pinnsDihitalRead());\r\n    },\r\n    _pinnsDihitalRead: function() {\r\n        return {\r\n            'message0': Blockly.Msg.PINS_DIGITAL_READ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'input_value', 'name': 'PIN'},\r\n            ],\r\n            'inputsInline': true,\r\n            'output': null,\r\n            'colour': Blockly.Msg.PINS_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['pins_digital_read'] = function (block) {\r\n    Blockly.addModule('pin');\r\n    Blockly.addDeclare('pin');\r\n    var pin = Blockly.Python.valueToCode(block, 'PIN', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var code = 'pin.digitalRead(' + pin + ')';\r\n    return [code, Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\n// function_main_event\r\nBlockly.Blocks['pins_digital_write'] = {\r\n    init: function () {\r\n        this.jsonInit(this._pinnsDihitalRead());\r\n    },\r\n    _pinnsDihitalRead: function() {\r\n        return {\r\n            'message0': Blockly.Msg.PINS_DIGITAL_WRITE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'input_value', 'name': 'PIN'},\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'field_dropdown', 'name': 'VALUE', 'options':[\r\n                    ['0', '0'],\r\n                    ['1', '1']\r\n                ] },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.PINS_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['pins_digital_write'] = function (block) {\r\n    Blockly.addModule('pin');\r\n    Blockly.addDeclare('pin');\r\n    var pin = Blockly.Python.valueToCode(block, 'PIN', Blockly.Python.ORDER_FUNCTION_CALL) || '26';\r\n    var value = block.getFieldValue('VALUE') || '0';\r\n    return 'pin.digitalWrite(' + pin + ', ' + value + ')\\n';\r\n}\r\n\r\n\r\n// function_main_event\r\nBlockly.Blocks['pins_set_mode'] = {\r\n    init: function () {\r\n        this.jsonInit(this._pinsSetMode());\r\n    },\r\n    _pinsSetMode: function() {\r\n        return {\r\n            'message0': Blockly.Msg.PINS_SET_MODE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'input_value', 'name': 'PIN'},\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'field_dropdown', 'name': 'MODE', 'options':[\r\n                    ['OUT', 'OUT'],\r\n                    ['IN', 'IN'],\r\n                    ['OUT_OD', 'OUT_OD'],\r\n                    ['INOUT', 'INOUT'],\r\n                    ['INOUT_OD', 'INOUT_OD']\r\n                ]},\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'field_dropdown', 'name': 'PULL', 'options':[\r\n                    ['PULL_FLOAT', 'PULL_FLOAT'],\r\n                    ['PULL_UP', 'PULL_UP'],\r\n                    ['PULL_DOWN', 'PULL_DOWN'],\r\n                    ['PULL_UPDOWN', 'PULL_UPDOWN']\r\n                ]},\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.PINS_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['pins_set_mode'] = function (block) {\r\n    Blockly.addModule('pin');\r\n    Blockly.addDeclare('pin');\r\n    var pin = Blockly.Python.valueToCode(block, 'PIN', Blockly.Python.ORDER_FUNCTION_CALL) || '5';\r\n    var mode = block.getFieldValue('mode') || 'OUT';\r\n    var pull = block.getFieldValue('PULL') || 'PULL_FLOAT';\r\n    return 'pin.pin_mode(' + pin + ', machine.ADC.' + mode + ', machine.ADC.' + pull + ')\\n';\r\n}\r\n\r\n// function_main_event\r\nBlockly.Blocks['pins_set_map'] = {\r\n    init: function () {\r\n        this.jsonInit(this._pinsSetMap());\r\n    },\r\n    _pinsSetMap: function() {\r\n        return {\r\n            'message0': Blockly.Msg.PINS_SET_MAP,\r\n            'args0': [\r\n                { 'type': 'input_value', 'name': 'MAP'},\r\n                { 'type': 'input_value', 'name': 'FROM_LOW'},\r\n                { 'type': 'input_value', 'name': 'FROM_HIGH'},\r\n                { 'type': 'input_value', 'name': 'TO_LOW'},\r\n                { 'type': 'input_value', 'name': 'TO_HIGH'},\r\n            ],\r\n            'output': null,\r\n            'colour': Blockly.Msg.PINS_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['pins_set_map'] = function (block) {\r\n    Blockly.addModule('pin');\r\n    Blockly.addDeclare('pin');\r\n    var map = Blockly.Python.valueToCode(block, 'MAP', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var fromLow = Blockly.Python.valueToCode(block, 'FROM_LOW', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var fromHigh = Blockly.Python.valueToCode(block, 'FROM_HIGH', Blockly.Python.ORDER_FUNCTION_CALL) || '1023';\r\n    var toLow = Blockly.Python.valueToCode(block, 'TO_LOW', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var toHigh = Blockly.Python.valueToCode(block, 'TO_HIGH', Blockly.Python.ORDER_FUNCTION_CALL) || '4';\r\n    return ['map_value(' + map + ', ' + fromLow + ', ' + fromHigh + ', ' + toLow + ', ' + toHigh + ')\\n', Blockly.Python.ORDER_NONE];\r\n}\r\n\n\n//# sourceURL=webpack:///./app/components/m5_pins.js?");

/***/ }),

/***/ "./app/components/m5_pir.js":
/*!**********************************!*\
  !*** ./app/components/m5_pir.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function getAllPIR() {\r\n    var options = [];\r\n    for (var i = 0; i < Blockly.Units.length; i++) {\r\n        if (Blockly.Units[i].type  === 'pir') {\r\n            options.push([Blockly.Units[i].name, Blockly.Units[i].name]);\r\n        }\r\n    }\r\n    if (options.length === 0) return [['', '']];\r\n    return options;\r\n}\r\n\r\nBlockly.Blocks['pir_read'] = {\r\n    init: function () {\r\n        this.jsonInit(this._pirread());\r\n    },\r\n    _pirread: function() {\r\n        return {\r\n            'message0': Blockly.Msg.PIR_READ ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VARNAME', 'options': getAllPIR() \r\n                }\r\n            ],\r\n            'inputsInline': true,\r\n            'output':null,\r\n            'colour': Blockly.Msg.SERVO_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['pir_read'] = function (block) {\r\n    var varname = block.getFieldValue('VARNAME');\r\n    return [varname + '.read()', Blockly.Python.ORDER_CONDITIONAL];\r\n}\n\n//# sourceURL=webpack:///./app/components/m5_pir.js?");

/***/ }),

/***/ "./app/components/m5_pulse.js":
/*!************************************!*\
  !*** ./app/components/m5_pulse.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function getAll() {\r\n    var options = [];\r\n    for (var i = 0; i < Blockly.Units.length; i++) {\r\n        if (Blockly.Units[i].type === 'pulse') {\r\n            options.push([Blockly.Units[i].name, Blockly.Units[i].name]);\r\n        }\r\n    }\r\n    if (options.length === 0) return [['', '']];\r\n    return options;\r\n}\r\n\r\n\r\n\r\nBlockly.Blocks['pulse_get_ir'] = {\r\n    init: function () {\r\n        this.jsonInit(this._plusegetir());\r\n    },\r\n    _plusegetir: function () {\r\n        return {\r\n            'message0': Blockly.Msg.PULSE_GET_IR,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VARNAME', 'options': getAll()\r\n                }\r\n            ],\r\n            'inputsInline': true,\r\n            \"output\": null,\r\n            'colour': Blockly.Msg.RGB_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['pulse_get_ir'] = function (block){\r\n    var varname = block.getFieldValue('VARNAME');\r\n    return [varname + '.get_ir()', Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\n\r\nBlockly.Blocks['pulse_get_red'] = {\r\n    init: function () {\r\n        this.jsonInit(this._weighgetweight());\r\n    },\r\n    _weighgetweight: function () {\r\n        return {\r\n            'message0': Blockly.Msg.PULSE_GET_RED,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VARNAME', 'options': getAll()\r\n                }\r\n            ],\r\n            'inputsInline': true,\r\n            \"output\": null,\r\n            'colour': Blockly.Msg.RGB_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['pulse_get_red'] = function (block){\r\n    var varname = block.getFieldValue('VARNAME');\r\n    return [varname + '.get_red()', Blockly.Python.ORDER_CONDITIONAL];\r\n}\n\n//# sourceURL=webpack:///./app/components/m5_pulse.js?");

/***/ }),

/***/ "./app/components/m5_pwm.js":
/*!**********************************!*\
  !*** ./app/components/m5_pwm.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\n\r\n\r\nBlockly.Blocks['pwm'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxttext());\r\n    },\r\n    _nxttext: function() {\r\n        return {\r\n            'message0': Blockly.Msg.PWM_PIN,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    \"type\": \"field_variable\",\r\n                    \"name\": \"VAR\",\r\n                    \"variable\": \"pwm\"\r\n                },\r\n                {\r\n                    'type': 'input_value', 'name':'PIN'\r\n                }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.PWM_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['pwm'] = function (block) {\r\n    Blockly.addModule('machine');\r\n    var varname = block.getField('VAR').variable_.name || '';\r\n    var pin = Blockly.Python.valueToCode(block, 'PIN', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    return  varname + ' = ' + 'machine.PWM(' + pin + ')\\n';\r\n}\r\n\r\n\r\n\r\nBlockly.Blocks['pwm_freq'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxttext());\r\n    },\r\n    _nxttext: function() {\r\n        return {\r\n            'message0': Blockly.Msg.PWM_FREQ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    \"type\": \"field_variable\",\r\n                    \"name\": \"VAR\",\r\n                    \"variable\": \"pwm\"\r\n                },\r\n                {\r\n                    'type': 'input_value', 'name':'VALUE'\r\n                }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.PWM_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['pwm_freq'] = function (block) {\r\n    var varname = block.getField('VAR').variable_.name || '';\r\n    var value = Blockly.Python.valueToCode(block, 'VALUE', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    return varname + '.freq(' + value + ')\\n';\r\n}\r\n\r\n\r\nBlockly.Blocks['pwm_duty'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxttext());\r\n    },\r\n    _nxttext: function() {\r\n        return {\r\n            'message0': Blockly.Msg.PWM_DUTY,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    \"type\": \"field_variable\",\r\n                    \"name\": \"VAR\",\r\n                    \"variable\": \"pwm\"\r\n                },\r\n                {\r\n                    'type': 'input_value', 'name':'VALUE'\r\n                }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.PWM_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['pwm_duty'] = function (block) {\r\n    var varname = block.getField('VAR').variable_.name || '';\r\n    var value = Blockly.Python.valueToCode(block, 'VALUE', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    return varname + '.duty(' + value + ')\\n';\r\n}\r\n\n\n//# sourceURL=webpack:///./app/components/m5_pwm.js?");

/***/ }),

/***/ "./app/components/m5_rect.js":
/*!***********************************!*\
  !*** ./app/components/m5_rect.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\n\r\nfunction getAllRects () {\r\n    var options = [];\r\n    for (var i = 0; i < Blockly.Component.length; i++) {\r\n        if (Blockly.Component[i].type === 'rectangle') {\r\n            options.push([Blockly.Component[i].name, Blockly.Component[i].name]);\r\n        }\r\n    }\r\n    if (options.length === 0) return [['', '']];\r\n    return options;\r\n}\r\n// rect_set_size\r\nBlockly.Blocks['rect_set_size'] = {\r\n    init: function () {\r\n        this.jsonInit(this._rectSetSize());\r\n    },\r\n    _rectSetSize: function() {\r\n        return {\r\n            'message0': Blockly.Msg.RECT_SET_SIZE ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'field_dropdown', 'name': 'COMPONENT', 'options': getAllRects },\r\n                { 'type': 'input_value', 'name': 'WIDTH' },\r\n                { 'type': 'input_value', 'name': 'HEIGHT' }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_RECT_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['rect_set_size'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var width = Blockly.Python.valueToCode(block, 'WIDTH', Blockly.Python.ORDER_FUNCTION_CALL) || '30';\r\n    var height = Blockly.Python.valueToCode(block, 'HEIGHT', Blockly.Python.ORDER_FUNCTION_CALL) || '30'\r\n    return component + '.setSize(' + width + ', ' + height +')\\n';\r\n}\r\n// rect_set_size_width\r\nBlockly.Blocks['rect_set_size_width'] = {\r\n    init: function () {\r\n        this.jsonInit(this._rectSetSizeWidth());\r\n    },\r\n    _rectSetSizeWidth: function() {\r\n        return {\r\n            'message0': Blockly.Msg.RECT_SET_SIZE_WIDTH,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'COMPONENT', 'options': getAllRects \r\n                },\r\n                { 'type': 'input_value', 'name': 'WIDTH' }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_RECT_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['rect_set_size_width'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var width = Blockly.Python.valueToCode(block, 'WIDTH', Blockly.Python.ORDER_FUNCTION_CALL) || '30';\r\n    return component + '.setSize(width=' + width + ')\\n';\r\n}\r\n// rect_set_size_height\r\nBlockly.Blocks['rect_set_size_height'] = {\r\n    init: function () {\r\n        this.jsonInit(this._rectSetSizeHeight());\r\n    },\r\n    _rectSetSizeHeight: function() {\r\n        return {\r\n            'message0': Blockly.Msg.RECT_SET_SIZE_HEIGHT,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'COMPONENT', 'options':  getAllRects \r\n                },\r\n                { 'type': 'input_value', 'name': 'HEIGHT' }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_RECT_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['rect_set_size_height'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var height = Blockly.Python.valueToCode(block, 'HEIGHT', Blockly.Python.ORDER_FUNCTION_CALL) || '30'\r\n    return component + '.setSize(height=' + height +')\\n';\r\n}\r\n// rect_set_position\r\nBlockly.Blocks['rect_set_position'] = {\r\n    init: function () {\r\n        this.jsonInit(this._rectSetPosition());\r\n    },\r\n    _rectSetPosition: function() {\r\n        return {\r\n            'message0': Blockly.Msg.RECT_SET_POSITION,\r\n            'args0': [\r\n              { 'type': 'input_dummy' },\r\n              {\r\n                'type': 'field_dropdown', 'name': 'COMPONENT', 'options':  getAllRects \r\n              },\r\n              { 'type': 'input_value', 'name': 'X' },\r\n              { 'type': 'input_value', 'name': 'Y' }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_RECT_HUE\r\n          }\r\n    }\r\n}\r\nBlockly.Python['rect_set_position'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var x = Blockly.Python.valueToCode(block, 'X', Blockly.Python.ORDER_FUNCTION_CALL) || '30';\r\n    var y = Blockly.Python.valueToCode(block, 'Y', Blockly.Python.ORDER_FUNCTION_CALL) || '30'\r\n    return component + '.setPosition(' + x + ', ' + y +')\\n';\r\n}\r\n // rect_set_position_x\r\nBlockly.Blocks['rect_set_position_x'] = {\r\n    init: function () {\r\n        this.jsonInit(this._rectSetPositionX());\r\n    },\r\n    _rectSetPositionX: function() {\r\n        return {\r\n            'message0': Blockly.Msg.RECT_SET_POSITION_X,\r\n            'args0': [\r\n              { 'type': 'input_dummy' },\r\n              {\r\n                'type': 'field_dropdown', 'name': 'COMPONENT', 'options':  getAllRects \r\n              },\r\n              { 'type': 'input_value', 'name': 'X' },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_RECT_HUE\r\n          }\r\n    }\r\n}\r\nBlockly.Python['rect_set_position_x'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var x = Blockly.Python.valueToCode(block, 'X', Blockly.Python.ORDER_FUNCTION_CALL) || '30';\r\n    return component + '.setPosition(x=' + x + ')\\n';\r\n}\r\n// rect_set_position_y\r\nBlockly.Blocks['rect_set_position_y'] = {\r\n    init: function () {\r\n        this.jsonInit(this._rectSetPositionY());\r\n    },\r\n    _rectSetPositionY: function() {\r\n        return {\r\n            'message0': Blockly.Msg.RECT_SET_POSITION_Y,\r\n            'args0': [\r\n              { 'type': 'input_dummy' },\r\n              {\r\n                'type': 'field_dropdown', 'name': 'COMPONENT', 'options': getAllRects \r\n              },\r\n              {\r\n                'type': 'input_value',\r\n                'name': 'Y'\r\n              }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_RECT_HUE\r\n          }\r\n    }\r\n}\r\nBlockly.Python['rect_set_position_y'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var y = Blockly.Python.valueToCode(block, 'Y', Blockly.Python.ORDER_FUNCTION_CALL) || '30';\r\n    return component + '.setPosition(y=' + y + ')\\n';\r\n}\r\n// rect_set_bgcolor\r\nBlockly.Blocks['rect_set_bgcolor'] = {\r\n    init: function () {\r\n        this.jsonInit(this._rectSetBgColor());\r\n    },\r\n    _rectSetBgColor: function() {\r\n        return  {\r\n            'message0': Blockly.Msg.RECT_SET_BGCOLOR,\r\n            'args0': [\r\n              { 'type': 'input_dummy' },\r\n              {\r\n                'type': 'field_dropdown', 'name': 'COMPONENT', 'options':  getAllRects \r\n              },\r\n              { 'type': 'field_colour', 'name': 'COLOR', 'colour': '#ff0000'},\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_RECT_HUE\r\n          };\r\n    }\r\n}\r\nBlockly.Python['rect_set_bgcolor'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var color = block.getFieldValue('COLOR') || '#ff0000';\r\n    return component + '.setBgColor(' + color.replace('#', '0x') +')\\n';\r\n}\r\n// rectSetBgcolorRgb\r\nBlockly.Blocks['rect_set_bgcolor_rgb'] = {\r\n    init: function () {\r\n        this.jsonInit(this._rectSetBgColorRgb());\r\n    },\r\n    _rectSetBgColorRgb: function() {\r\n        return {\r\n            'message0': Blockly.Msg.RECT_SET_BGCOLOR_RGB,\r\n            'args0': [\r\n              { 'type': 'input_dummy' },\r\n              {\r\n                'type': 'field_dropdown', 'name': 'COMPONENT', 'options':  getAllRects \r\n              },\r\n              { 'type': 'input_value', 'name': 'R' },\r\n              { 'type': 'input_value', 'name': 'G' },\r\n              { 'type': 'input_value', 'name': 'B' },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_RECT_HUE\r\n          }\r\n    }\r\n}\r\nBlockly.Python['rect_set_bgcolor_rgb'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var r = Blockly.Python.valueToCode(block, 'R', Blockly.Python.ORDER_NONE) || '0';\r\n    var g = Blockly.Python.valueToCode(block, 'G', Blockly.Python.ORDER_NONE) || '0';\r\n    var b = Blockly.Python.valueToCode(block, 'B', Blockly.Python.ORDER_NONE) || '0';\r\n    if(isNaN(parseInt(r)) || isNaN(parseInt(g)) || isNaN(parseInt(b))) {\r\n        return component + `.setBgColor((${r} << 16) | (${g} << 8) | ${b})\\n`;\r\n    }\r\n    var hexR = Math.floor(Math.abs(parseInt(r)) % 256).toString(16);\r\n    var hexG = Math.floor(Math.abs(parseInt(g)) % 256).toString(16);\r\n    var hexB = Math.floor(Math.abs(parseInt(b)) % 256).toString(16);\r\n    if(hexR.length < 2) hexR = '0' + hexR;\r\n    if(hexG.length < 2) hexG = '0' + hexG;\r\n    if(hexB.length < 2) hexB = '0' + hexB;\r\n    return component + '.setBgColor(0x' + hexR + hexG + hexB + ')\\n';\r\n}\r\n// rectSetBorderColor\r\nBlockly.Blocks['rect_set_bordercolor'] = {\r\n    init: function () {\r\n        this.jsonInit(this._rectSetBorderColor());\r\n    },\r\n    _rectSetBorderColor: function() {\r\n        return  {\r\n            'message0': Blockly.Msg.RECT_SET_BORDER_COLOR,\r\n            'args0': [\r\n              { 'type': 'input_dummy' },\r\n              {\r\n                'type': 'field_dropdown', 'name': 'COMPONENT', 'options':  getAllRects \r\n              },\r\n              { 'type': 'field_colour', 'name': 'COLOR', 'colour': '#ff0000'},\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_RECT_HUE\r\n          };\r\n    }\r\n}\r\nBlockly.Python['rect_set_bordercolor'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var color = block.getFieldValue('COLOR') || '#ff0000';\r\n    return component + '.setBorderColor(' + color.replace('#', '0x') +')\\n';\r\n}\r\n// rectSetBorderColorRgb\r\nBlockly.Blocks['rect_set_bordercolor_rgb'] = {\r\n    init: function () {\r\n        this.jsonInit(this._rectSetBorderColorRgb());\r\n    },\r\n    _rectSetBorderColorRgb: function() {\r\n        return {\r\n            'message0': Blockly.Msg.RECT_SET_BORDERCOLOR_RGB,\r\n            'args0': [\r\n              { 'type': 'input_dummy' },\r\n              {\r\n                'type': 'field_dropdown', 'name': 'COMPONENT', 'options':  getAllRects \r\n              },\r\n              { 'type': 'input_value', 'name': 'R' },\r\n              { 'type': 'input_value', 'name': 'G' },\r\n              { 'type': 'input_value', 'name': 'B' },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_RECT_HUE\r\n          }\r\n    }\r\n}\r\nBlockly.Python['rect_set_bordercolor_rgb'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var r = Blockly.Python.valueToCode(block, 'R', Blockly.Python.ORDER_NONE) || '0';\r\n    var g = Blockly.Python.valueToCode(block, 'G', Blockly.Python.ORDER_NONE) || '0';\r\n    var b = Blockly.Python.valueToCode(block, 'B', Blockly.Python.ORDER_NONE) || '0';\r\n    if(isNaN(parseInt(r)) || isNaN(parseInt(g)) || isNaN(parseInt(b))) {\r\n        return component + `.setBorderColor((${r} << 16) | (${g} << 8) | ${b})\\n`;\r\n    }\r\n    var hexR = Math.floor(Math.abs(parseInt(r)) % 256).toString(16);\r\n    var hexG = Math.floor(Math.abs(parseInt(g)) % 256).toString(16);\r\n    var hexB = Math.floor(Math.abs(parseInt(b)) % 256).toString(16);\r\n    if(hexR.length < 2) hexR = '0' + hexR;\r\n    if(hexG.length < 2) hexG = '0' + hexG;\r\n    if(hexB.length < 2) hexB = '0' + hexB;\r\n    return component + '.setBorderColor(0x' + hexR + hexG + hexB + ')\\n';\r\n}\r\n\r\n\r\nBlockly.Blocks['rect_set_mode'] = {\r\n    init: function () {\r\n        this.jsonInit(this._labelSetPosition());\r\n    },\r\n    _labelSetPosition: function() {\r\n        return {\r\n            'message0': Blockly.Msg.RECT_SET_MODE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'COMPONENT', 'options': getAllRects\r\n                },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'MODE', 'options': [['hide','hide'],['show','show']]\r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_RECT_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['rect_set_mode'] = function(block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var mode = block.getFieldValue('MODE');\r\n    return component + '.'+ mode +'()\\n';\r\n}\n\n//# sourceURL=webpack:///./app/components/m5_rect.js?");

/***/ }),

/***/ "./app/components/m5_relay.js":
/*!************************************!*\
  !*** ./app/components/m5_relay.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function getAll() {\r\n\tvar options = [];\r\n\tfor (var i = 0; i < Blockly.Units.length; i++) {\r\n\t\tif (Blockly.Units[i].type === 'relay') {\r\n\t\t\toptions.push([Blockly.Units[i].name, Blockly.Units[i].name]);\r\n\t\t}\r\n\t}\r\n\tif (options.length === 0) return [['', '']];\r\n\treturn options;\r\n}\r\nBlockly.Blocks['set_relay_on'] = {\r\n\tinit: function () {\r\n\t\tthis.jsonInit(this._rgbmulyisetcolor());\r\n\t},\r\n\t_rgbmulyisetcolor: function () {\r\n\t\treturn {\r\n\t\t\t'message0': Blockly.Msg.RELAY_SET_ON,\r\n\t\t\t'args0': [\r\n\t\t\t\t{ 'type': 'input_dummy' },\r\n\t\t\t\t{ 'type': 'field_dropdown', 'name': 'VARNAME', 'options': getAll },\r\n            ],\r\n            'previousStatement': null,\r\n\t\t\t'nextStatement': null,\r\n\t\t\t'inputsInline': true,\r\n\t\t\t'colour': Blockly.Msg.SERVO_HUE\r\n\t\t};\r\n\t}\r\n}\r\nBlockly.Python['set_relay_on'] = function (block) {\r\n\tvar varname = block.getFieldValue('VARNAME');\r\n\treturn varname + '.on()\\n';\r\n}\r\n\r\n\r\nBlockly.Blocks['set_relay_off'] = {\r\n\tinit: function () {\r\n\t\tthis.jsonInit(this._rgbmulyisetcolor());\r\n\t},\r\n\t_rgbmulyisetcolor: function () {\r\n\t\treturn {\r\n\t\t\t'message0': Blockly.Msg.RELAY_SET_OFF,\r\n\t\t\t'args0': [\r\n\t\t\t\t{ 'type': 'input_dummy' },\r\n\t\t\t\t{ 'type': 'field_dropdown', 'name': 'VARNAME', 'options': getAll },\r\n            ],\r\n            'previousStatement': null,\r\n\t\t\t'nextStatement': null,\r\n\t\t\t'inputsInline': true,\r\n\t\t\t'colour': Blockly.Msg.SERVO_HUE\r\n\t\t};\r\n\t}\r\n}\r\nBlockly.Python['set_relay_off'] = function (block) {\r\n\tvar varname = block.getFieldValue('VARNAME');\r\n\treturn varname + '.off()\\n';\r\n}\r\n\n\n//# sourceURL=webpack:///./app/components/m5_relay.js?");

/***/ }),

/***/ "./app/components/m5_remote.js":
/*!*************************************!*\
  !*** ./app/components/m5_remote.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\n\r\n\r\n\r\nBlockly.Blocks['remote_set_qrcode'] = {\r\n    init: function () {\r\n        this.jsonInit(this._functionInEvent());\r\n    },\r\n    _functionInEvent: function() {\r\n        return {\r\n            'message0': Blockly.Msg.REMOTE_SET_QRCODE ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {'type': 'input_value', 'name':'X'},\r\n                {'type': 'input_value', 'name':'Y'},\r\n                {'type': 'input_value', 'name':'SIZE'},\r\n            ],\r\n            'inputsInline': true,\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'colour': Blockly.Msg.REMOTE_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['remote_set_qrcode'] = function (block) {\r\n    Blockly.addModule('remote');\r\n    var x = Blockly.Python.valueToCode(block, 'X', Blockly.Python.ORDER_FUNCTION_CALL) || '72';\r\n    var y = Blockly.Python.valueToCode(block, 'Y', Blockly.Python.ORDER_FUNCTION_CALL) || '32';\r\n    var size = Blockly.Python.valueToCode(block, 'SIZE', Blockly.Python.ORDER_FUNCTION_CALL) || '176';\r\n    // var remoteURL = 'http://flow-remote.m5stack.com/';\r\n    var dataObj = [];\r\n    for (var i = 0; i < Blockly.Remotes.length; i++) {\r\n        dataObj.push({\r\n            name: Blockly.Remotes[i].name,\r\n            event: Blockly.Remotes[i].event,\r\n            type: Blockly.Remotes[i].type\r\n        });\r\n    }\r\n    var dataStr = JSON.stringify({\r\n        id: localStorage.getItem('mui_apikey'),\r\n        data: dataObj\r\n    });\r\n    return 'lcd.qrcode(\\'' + window['remoteURL'] + '?remote=' + Blockly.REMOTE_KEY + '\\', ' + x + ', ' + y + ', ' + size + ')\\n';\r\n}\r\n\r\nBlockly.Blocks['remote_add_switch'] = {\r\n    init: function(){\r\n                this.appendDummyInput()\r\n            .appendField(Blockly.Msg.REMOTE_ADD_SWITCH)\r\n            .appendField(new Blockly.FieldTextInput('SwitchName'), \"NAME\")\r\n            .appendField(\"\", \"PARAMS\");\r\n        this.setMutator(new Blockly.Mutator([\"procedures_mutatorarg\"]));\r\n        (this.workspace.options.comments || this.workspace.options.parentWorkspace && this.workspace.options.parentWorkspace.options.comments ) && Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT && this.setCommentText(Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT);\r\n        this.setColour(Blockly.Msg.REMOTE_HUE);\r\n        this.setTooltip(Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP);\r\n        this.setHelpUrl(Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL);\r\n        this.arguments_=[];\r\n        this.argumentVarModels_=[];\r\n        this.setStatements_(!0);\r\n        this.statementConnection_=null\r\n    },\r\n    _functionInEvent(){\r\n        \r\n        return {\r\n            'message0': Blockly.Msg.REMOTE_ADD_SWITCH ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {'type': 'input_value', 'name':'NAME', 'text': 'SwitchName'},\r\n            ],\r\n            'inputsInline': true,\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'colour': Blockly.Msg.REMOTE_HUE\r\n        };\r\n\r\n    },\r\n    setStatements_: Blockly.Blocks['procedures_defnoreturn'].setStatements_,\r\n    updateParams_: Blockly.Blocks['procedures_defnoreturn'].updateParams_,\r\n    mutationToDom: Blockly.Blocks['procedures_defnoreturn'].mutationToDom,\r\n    domToMutation: Blockly.Blocks['procedures_defnoreturn'].domToMutation,\r\n    decompose: Blockly.Blocks['procedures_defnoreturn'].decompose,\r\n    compose: Blockly.Blocks['procedures_defnoreturn'].compose,\r\n    getProcedureDef: function() {\r\n        if(this.type == 'remote_add_switch') return [this.getFieldValue('NAME'), this.arguments_, false, false];\r\n        console.log(this.getFieldValue('NAME'), this.arguments_, false);\r\n        \r\n        return [this.getFieldValue('NAME'), this.arguments_, false];\r\n    },\r\n    getVars: Blockly.Blocks['procedures_defnoreturn'].getVars,\r\n    getVarModels: Blockly.Blocks['procedures_defnoreturn'].getVarModels,\r\n    renameVarById: Blockly.Blocks['procedures_defnoreturn'].renameVarById,\r\n    updateVarName: Blockly.Blocks['procedures_defnoreturn'].updateVarName,\r\n    displayRenamedVar_: Blockly.Blocks['procedures_defnoreturn'].displayRenamedVar_,\r\n    customContextMenu: Blockly.Blocks['procedures_defnoreturn'].customContextMenu\r\n}\r\nBlockly.Python['remote_add_switch'] = function(block) {\r\n    Blockly.addModule('remote');\r\n    var name = block.getFieldValue('NAME') || 'SwitchName';\r\n    var func = block.getFieldValue('NAME') || 'SwitchName';\r\n    var params = block.getFieldValue('PARAMS').replace(/with: /g, '') || '';\r\n    func = func.replace(/ /g, '_');\r\n    func = '_remote_' + func;\r\n    var data = Blockly.Python.statementToCode(block, 'STACK', Blockly.Python.ORDER_FUNCTION_CALL) || '  pass';\r\n    var unitVarnames = Blockly.Units.map(u => u['name']);\r\n    var defFuncs = window[\"Blockly\"].Procedures.allProcedures(window[\"BlocklyEditor\"])[0].concat(window[\"Blockly\"].Procedures.allProcedures(window[\"BlocklyEditor\"])[1]).filter(f => f[3] != false).map(f => f[0]);\r\n    var defGlobal = Blockly.defineGlobal().concat(unitVarnames).concat(defFuncs);\r\n    var paramList = params.split(', ');\r\n    for(var i = 0; i < defGlobal.length; i++) {\r\n        if(paramList.indexOf(defGlobal[i]) > -1) {\r\n            defGlobal.splice(i, 1);\r\n            i--;\r\n        }\r\n    }\r\n    var code = 'def ' + func + '(' + params + '):\\n' + data;\r\n    if (defGlobal.length > 0) {\r\n        code = 'def ' + func + '(' + params + '):\\n  global ' + defGlobal.join(', ') + ' \\n' + data;\r\n    } else {\r\n        code = 'def ' + func + '(' + params + '):\\n' + data;\r\n    }\r\n    Blockly.addRemote({\r\n        id: block.id,\r\n        event: func,\r\n        code: code,\r\n        name: name,\r\n        type: 'switch'\r\n    });\r\n\r\n    return '';\r\n}\r\n\r\nBlockly.Blocks['remote_add_button'] = {\r\n    init: function(){\r\n        this.appendDummyInput()\r\n            .appendField(Blockly.Msg.ADD_REMOTE_BUTTON)\r\n            .appendField(new Blockly.FieldTextInput('ButtonName'), \"NAME\")\r\n            .appendField(\"\", \"PARAMS\");\r\n        (this.workspace.options.comments || this.workspace.options.parentWorkspace && this.workspace.options.parentWorkspace.options.comments ) && Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT && this.setCommentText(Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT);\r\n        this.setColour(Blockly.Msg.REMOTE_HUE);\r\n        this.setTooltip(Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP);\r\n        this.setHelpUrl(Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL);\r\n        this.arguments_=[];\r\n        this.argumentVarModels_=[];\r\n        this.setStatements_(!0);\r\n        this.statementConnection_=null\r\n    },\r\n    setStatements_: Blockly.Blocks['procedures_defnoreturn'].setStatements_,\r\n    updateParams_: Blockly.Blocks['procedures_defnoreturn'].updateParams_,\r\n    mutationToDom: Blockly.Blocks['procedures_defnoreturn'].mutationToDom,\r\n    domToMutation: Blockly.Blocks['procedures_defnoreturn'].domToMutation,\r\n    decompose: Blockly.Blocks['procedures_defnoreturn'].decompose,\r\n    compose: Blockly.Blocks['procedures_defnoreturn'].compose,\r\n    getProcedureDef: function() {\r\n        if(this.type == 'remote_add_button') return [this.getFieldValue('NAME'), this.arguments_, false, false];\r\n        return [this.getFieldValue('NAME'), this.arguments_, false];\r\n    },\r\n    getVars: Blockly.Blocks['procedures_defnoreturn'].getVars,\r\n    getVarModels: Blockly.Blocks['procedures_defnoreturn'].getVarModels,\r\n    renameVarById: Blockly.Blocks['procedures_defnoreturn'].renameVarById,\r\n    updateVarName: Blockly.Blocks['procedures_defnoreturn'].updateVarName,\r\n    displayRenamedVar_: Blockly.Blocks['procedures_defnoreturn'].displayRenamedVar_,\r\n    customContextMenu: Blockly.Blocks['procedures_defnoreturn'].customContextMenu\r\n}\r\nBlockly.Python['remote_add_button'] = function(block) {\r\n    Blockly.addModule('remote');\r\n    var name = block.getFieldValue('NAME') || 'ButtonName';\r\n    var func = block.getFieldValue('NAME') || 'ButtonName';\r\n    var params = block.getFieldValue('PARAMS').replace(/with: /g, '') || '';\r\n    func = func.replace(/ /g, '_');\r\n    func = '_remote_' + func;\r\n    var data = Blockly.Python.statementToCode(block, 'STACK', Blockly.Python.ORDER_FUNCTION_CALL) || '  pass';\r\n    var unitVarnames = Blockly.Units.map(u => u['name']);\r\n    var defFuncs = window[\"Blockly\"].Procedures.allProcedures(window[\"BlocklyEditor\"])[0].concat(window[\"Blockly\"].Procedures.allProcedures(window[\"BlocklyEditor\"])[1]).filter(f => f[3] != false).map(f => f[0]);\r\n    var defGlobal = Blockly.defineGlobal().concat(unitVarnames).concat(defFuncs);\r\n    var paramList = params.split(', ');\r\n    for(var i = 0; i < defGlobal.length; i++) {\r\n        if(paramList.indexOf(defGlobal[i]) > -1) {\r\n            defGlobal.splice(i, 1);\r\n            i--;\r\n        }\r\n    }\r\n    var code = 'def ' + func + '(' + params + '):\\n' + data;\r\n    if (defGlobal.length > 0) {\r\n        code = 'def ' + func + '(' + params + '):\\n  global ' + defGlobal.join(', ') + ' \\n' + data;\r\n    } else {\r\n        code = 'def ' + func + '(' + params + '):\\n' + data;\r\n    }\r\n    Blockly.addRemote({\r\n        id: block.id,\r\n        event: func,\r\n        code: code,\r\n        name: name,\r\n        type: 'button'\r\n    });\r\n\r\n    return '';\r\n}\r\n\r\nBlockly.Blocks['remote_add_slider'] = {\r\n    init: function(){\r\n        this.appendDummyInput()\r\n            .appendField(Blockly.Msg.ADD_REMOTE_SLIDER)\r\n            .appendField(new Blockly.FieldTextInput('SliderName'), \"NAME\")\r\n            .appendField(\"\", \"PARAMS\");\r\n        this.setMutator(new Blockly.Mutator([\"procedures_mutatorarg\"]));\r\n        (this.workspace.options.comments || this.workspace.options.parentWorkspace && this.workspace.options.parentWorkspace.options.comments ) && Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT && this.setCommentText(Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT);\r\n        this.setColour(Blockly.Msg.REMOTE_HUE);\r\n        this.setTooltip(Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP);\r\n        this.setHelpUrl(Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL);\r\n        this.arguments_=[];\r\n        this.argumentVarModels_=[];\r\n        this.setStatements_(!0);\r\n        this.statementConnection_=null\r\n    },\r\n    setStatements_: Blockly.Blocks['procedures_defnoreturn'].setStatements_,\r\n    updateParams_: Blockly.Blocks['procedures_defnoreturn'].updateParams_,\r\n    mutationToDom: Blockly.Blocks['procedures_defnoreturn'].mutationToDom,\r\n    domToMutation: Blockly.Blocks['procedures_defnoreturn'].domToMutation,\r\n    decompose: Blockly.Blocks['procedures_defnoreturn'].decompose,\r\n    compose: Blockly.Blocks['procedures_defnoreturn'].compose,\r\n    getProcedureDef: function() {\r\n        if(this.type == 'remote_add_slider') return [this.getFieldValue('NAME'), this.arguments_, false, false];\r\n        return [this.getFieldValue('NAME'), this.arguments_, false];\r\n    },\r\n    getVars: Blockly.Blocks['procedures_defnoreturn'].getVars,\r\n    getVarModels: Blockly.Blocks['procedures_defnoreturn'].getVarModels,\r\n    renameVarById: Blockly.Blocks['procedures_defnoreturn'].renameVarById,\r\n    updateVarName: Blockly.Blocks['procedures_defnoreturn'].updateVarName,\r\n    displayRenamedVar_: Blockly.Blocks['procedures_defnoreturn'].displayRenamedVar_,\r\n    customContextMenu: Blockly.Blocks['procedures_defnoreturn'].customContextMenu\r\n}\r\nBlockly.Python['remote_add_slider'] = function(block) {\r\n    Blockly.addModule('remote');\r\n    var name = block.getFieldValue('NAME') || 'SliderName';\r\n    var func = block.getFieldValue('NAME') || 'SliderName';\r\n    var params = block.getFieldValue('PARAMS').replace(/with: /g, '') || '';\r\n    func = func.replace(/ /g, '_');\r\n    func = '_remote_' + func;\r\n    var data = Blockly.Python.statementToCode(block, 'STACK', Blockly.Python.ORDER_FUNCTION_CALL) || '  pass';\r\n    var unitVarnames = Blockly.Units.map(u => u['name']);\r\n    var defFuncs = window[\"Blockly\"].Procedures.allProcedures(window[\"BlocklyEditor\"])[0].concat(window[\"Blockly\"].Procedures.allProcedures(window[\"BlocklyEditor\"])[1]).filter(f => f[3] != false).map(f => f[0]);\r\n    var defGlobal = Blockly.defineGlobal().concat(unitVarnames).concat(defFuncs);\r\n    var paramList = params.split(', ');\r\n    for(var i = 0; i < defGlobal.length; i++) {\r\n        if(paramList.indexOf(defGlobal[i]) > -1) {\r\n            defGlobal.splice(i, 1);\r\n            i--;\r\n        }\r\n    }\r\n    var code = 'def ' + func + '(' + params + '):\\n' + data;\r\n    if (defGlobal.length > 0) {\r\n        code = 'def ' + func + '(' + params + '):\\n  global ' + defGlobal.join(', ') + ' \\n' + data;\r\n    } else {\r\n        code = 'def ' + func + '(' + params + '):\\n' + data;\r\n    }\r\n    Blockly.addRemote({\r\n        id: block.id,\r\n        event: func,\r\n        code: code,\r\n        name: name,\r\n        type: 'slider'\r\n    });\r\n\r\n    return '';\r\n}\r\n\r\nBlockly.Blocks['remote_add_label'] = {\r\n    init: function(){\r\n        this.appendDummyInput()\r\n            .appendField(Blockly.Msg.ADD_REMOTE_LABEL.ADD)\r\n            .appendField(new Blockly.FieldDropdown([\r\n                ['Others', 'Others'],\r\n                ['Temperature', 'Temperature'],\r\n                ['Humidity', 'Humidity'],\r\n                ['Pressure', 'Pressure'],\r\n                ['PIR Status', 'PIR Status'],\r\n                ['Angle', 'Angle'],\r\n                ['Weight', 'Weight']\r\n            ]), 'TYPE')\r\n            .appendField(Blockly.Msg.ADD_REMOTE_LABEL.LABEL)\r\n            .appendField(new Blockly.FieldTextInput('LabelName'), \"NAME\")\r\n            .appendField(\"\", \"PARAMS\");\r\n        this.appendValueInput('RETURN')\r\n            .setAlign(Blockly.ALIGN_RIGHT)\r\n            .appendField(Blockly.Msg['PROCEDURES_DEFRETURN_RETURN']);\r\n        this.setMutator(new Blockly.Mutator([\"procedures_mutatorarg\"]));\r\n        (this.workspace.options.comments || this.workspace.options.parentWorkspace && this.workspace.options.parentWorkspace.options.comments ) && Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT && this.setCommentText(Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT);\r\n        this.setColour(Blockly.Msg.REMOTE_HUE);\r\n        this.setTooltip(Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP);\r\n        this.setHelpUrl(Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL);\r\n        this.arguments_=[];\r\n        this.argumentVarModels_=[];\r\n        this.setStatements_(!0);\r\n        this.statementConnection_=null\r\n    },\r\n    setStatements_: Blockly.Blocks['procedures_defreturn'].setStatements_,\r\n    updateParams_: Blockly.Blocks['procedures_defreturn'].updateParams_,\r\n    mutationToDom: Blockly.Blocks['procedures_defreturn'].mutationToDom,\r\n    domToMutation: Blockly.Blocks['procedures_defreturn'].domToMutation,\r\n    decompose: Blockly.Blocks['procedures_defreturn'].decompose,\r\n    compose: Blockly.Blocks['procedures_defreturn'].compose,\r\n    getProcedureDef: function() {\r\n        if(this.type == 'remote_add_label') return [this.getFieldValue('NAME'), this.arguments_, true, false];\r\n        return [this.getFieldValue('NAME'), this.arguments_, true];\r\n    },\r\n    getVars: Blockly.Blocks['procedures_defreturn'].getVars,\r\n    getVarModels: Blockly.Blocks['procedures_defreturn'].getVarModels,\r\n    renameVarById: Blockly.Blocks['procedures_defreturn'].renameVarById,\r\n    updateVarName: Blockly.Blocks['procedures_defreturn'].updateVarName,\r\n    displayRenamedVar_: Blockly.Blocks['procedures_defreturn'].displayRenamedVar_,\r\n    customContextMenu: Blockly.Blocks['procedures_defreturn'].customContextMenu\r\n}\r\nBlockly.Python['remote_add_label'] = function(block) {\r\n    Blockly.addModule('remote');\r\n    var name = block.getFieldValue('NAME') || 'LabelName';\r\n    var func = block.getFieldValue('NAME') || 'LabelName';\r\n    var params = block.getFieldValue('PARAMS').replace(/with: /g, '') || '';\r\n    var icon = block.getFieldValue('TYPE') || 'Others';\r\n    func = func.replace(/ /g, '_');\r\n    func = '_remote_' + func;\r\n    var data = Blockly.Python.statementToCode(block, 'STACK', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    var returnValue = Blockly.Python.valueToCode(block, 'RETURN', Blockly.Python.ORDER_NONE) || '';\r\n    var unitVarnames = Blockly.Units.map(u => u['name']);\r\n    var defFuncs = window[\"Blockly\"].Procedures.allProcedures(window[\"BlocklyEditor\"])[0].concat(window[\"Blockly\"].Procedures.allProcedures(window[\"BlocklyEditor\"])[1]).filter(f => f[3] != false).map(f => f[0]);\r\n    var defGlobal = Blockly.defineGlobal().concat(unitVarnames).concat(defFuncs);\r\n    var paramList = params.split(', ');\r\n    for(var i = 0; i < defGlobal.length; i++) {\r\n        if(paramList.indexOf(defGlobal[i]) > -1) {\r\n            defGlobal.splice(i, 1);\r\n            i--;\r\n        }\r\n    }\r\n    var code = 'def ' + func + '(' + params + '):\\n' + data;\r\n    var returnCode = '';\r\n    if(returnValue !== '') returnCode = '  return ' + returnValue;\r\n    else returnCode = '  pass';\r\n    if (defGlobal.length > 0) {\r\n        code = 'def ' + func + '(' + params + '):\\n  global ' + defGlobal.join(', ') + ' \\n' + data + returnCode;\r\n    } else {\r\n        code = 'def ' + func + '(' + params + '):\\n' + data + returnCode;\r\n    }\r\n    Blockly.addRemote({\r\n        id: block.id,\r\n        event: func,\r\n        code: code,\r\n        name: name,\r\n        type: 'label',\r\n        icon: icon\r\n    });\r\n\r\n    return '';\r\n}\n\n//# sourceURL=webpack:///./app/components/m5_remote.js?");

/***/ }),

/***/ "./app/components/m5_rfid.js":
/*!***********************************!*\
  !*** ./app/components/m5_rfid.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// unit dac\r\nfunction getunitAll() {\r\n\tvar options = [];\r\n\tfor (var i = 0; i < Blockly.Units.length; i++) {\r\n\t\tif (Blockly.Units[i].type === 'rfid') {\r\n\t\t\toptions.push([Blockly.Units[i].name, Blockly.Units[i].name]);\r\n\t\t}\r\n\t}\r\n\tif (options.length === 0) return [['', '']];\r\n\treturn options;\r\n}\r\nBlockly.Blocks['rfid_readStr'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.RFID_READSTR,\r\n            \"output\": null,\r\n            \"args0\": [\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'RFID', 'options': getunitAll\r\n                },\r\n                { 'type': 'input_value', 'name': 'VALUE' },\r\n            ],\r\n            'colour': Blockly.Msg.TIMER_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['rfid_readStr'] = function (block) {\r\n    var color = block.getFieldValue('RFID') || '';\r\n    var value = Blockly.Python.valueToCode(block, 'VALUE', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var code =  color + `.read_str(${value})`;\r\n    return [code, Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\nBlockly.Blocks['write_block'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.RFID_WRITE,\r\n            'inputsInline': true,\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            \"args0\": [\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'RFID', 'options': getunitAll\r\n                },\r\n                { 'type': 'input_value', 'name': 'VALUE' },\r\n                { 'type': 'input_value', 'name': 'VALUE1' },\r\n            ],\r\n            'colour': Blockly.Msg.TIMER_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['write_block'] = function (block) {\r\n    var color = block.getFieldValue('RFID') || '';\r\n    var value = Blockly.Python.valueToCode(block, 'VALUE', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var value1 = Blockly.Python.valueToCode(block, 'VALUE1', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var code =  color + `.write_block(${value1},${value})\\n`;\r\n    return code;\r\n}\r\n\r\nBlockly.Blocks['rfid_cardOn'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.RFID_CARDON,\r\n            \"output\": null,\r\n            \"args0\": [\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'RFID', 'options': getunitAll\r\n                },\r\n            ],\r\n            'colour': Blockly.Msg.TIMER_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['rfid_cardOn'] = function (block) {\r\n    var color = block.getFieldValue('RFID') || '';\r\n    var code =  color + `.card_on()`;\r\n    return [code, Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\nBlockly.Blocks['rfid_uid'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.RFID_UID,\r\n            \"output\": null,\r\n            \"args0\": [\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'RFID', 'options': getunitAll\r\n                },\r\n            ],\r\n            'colour': Blockly.Msg.TIMER_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['rfid_uid'] = function (block) {\r\n    var color = block.getFieldValue('RFID') || '';\r\n    var code =  color + `.read_uid()`;\r\n    return [code, Blockly.Python.ORDER_CONDITIONAL];\r\n}\n\n//# sourceURL=webpack:///./app/components/m5_rfid.js?");

/***/ }),

/***/ "./app/components/m5_rgb.js":
/*!**********************************!*\
  !*** ./app/components/m5_rgb.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\nBlockly.Blocks['rgb_init'] = {\r\n    init: function () {\r\n        this.jsonInit(this._rgbInit());\r\n    },\r\n    _rgbInit: function() {\r\n        return {\r\n            'message0': Blockly.Msg.RGB_INIT ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.RGB_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['rgb_init'] = function (block) {\r\n    Blockly.addModule('rgb');\r\n    Blockly.addDeclare('rgb');\r\n    return 'global rgb\\nrgb = RGB_Bar()\\n';\r\n}\r\n\r\n\r\n// titleShow\r\nBlockly.Blocks['rgb_set_all'] = {\r\n    init: function () {\r\n        this.jsonInit(this._rgbSetAll());\r\n    },\r\n    _rgbSetAll: function() {\r\n        return {\r\n            'message0': Blockly.Msg.RGB_SET_ALL,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'field_colour', 'name': 'COLOR', 'colour': '#ff0000'}\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.RGB_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['rgb_set_all'] = function (block) {\r\n    Blockly.addModule('rgb');\r\n    var color = block.getFieldValue('COLOR') || '#ff0000';\r\n    return 'rgb.set_all(' + color.replace('#', '0x') + ')\\n';\r\n}\r\n\r\n\r\n\r\n// titleHide\r\nBlockly.Blocks['rgb_set_all_rgb'] = {\r\n    init: function () {\r\n        this.jsonInit(this._rgbSetAllRgb());\r\n    },\r\n    _rgbSetAllRgb: function() {\r\n        return {\r\n            'message0': Blockly.Msg.RGB_SET_ALL_RGB,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'input_value', 'name': 'R' },\r\n                { 'type': 'input_value', 'name': 'G' },\r\n                { 'type': 'input_value', 'name': 'B' },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.RGB_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['rgb_set_all_rgb'] = function(block) {\r\n    Blockly.addModule('rgb');\r\n    var r = Blockly.Python.valueToCode(block, 'R', Blockly.Python.ORDER_NONE) || '0';\r\n    var g = Blockly.Python.valueToCode(block, 'G', Blockly.Python.ORDER_NONE) || '0';\r\n    var b = Blockly.Python.valueToCode(block, 'B', Blockly.Python.ORDER_NONE) || '0';\r\n    if(isNaN(parseInt(r)) || isNaN(parseInt(g)) || isNaN(parseInt(b))) {\r\n        return `rgb.set_all((${r} << 16) | (${g} << 8) | ${b})\\n`;\r\n    }\r\n    var hexR = Math.floor(Math.abs(parseInt(r)) % 256).toString(16);\r\n    var hexG = Math.floor(Math.abs(parseInt(g)) % 256).toString(16);\r\n    var hexB = Math.floor(Math.abs(parseInt(b)) % 256).toString(16);\r\n    if(hexR.length < 2) hexR = '0' + hexR;\r\n    if(hexG.length < 2) hexG = '0' + hexG;\r\n    if(hexB.length < 2) hexB = '0' + hexB;\r\n    return 'rgb.set_all(0x' + hexR + hexG + hexB + ')\\n';\r\n}\r\n\r\n\r\n\r\n// titleSetColor\r\nBlockly.Blocks['rgb_set_dir'] = {\r\n    init: function () {\r\n        this.jsonInit(this._rgbSetDir());\r\n    },\r\n    _rgbSetDir: function() {\r\n        return {\r\n            'message0': Blockly.Msg.RGB_SET_DIR,\r\n            'args0': [\r\n              { 'type': 'input_dummy' },\r\n              {\r\n                'type': 'field_dropdown', 'name': 'DIR', 'options': [\r\n                    [Blockly.Msg._OPTION_LEFT, 'left'],\r\n                    [Blockly.Msg._OPTION_RIGHT, 'right']\r\n                ]\r\n              },\r\n              {\r\n                'type': 'field_colour',\r\n                'name': 'COLOR',\r\n                'colour': '#ff0000'\r\n              }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.RGB_HUE\r\n          }\r\n    }\r\n}\r\nBlockly.Python['rgb_set_dir'] = function (block) {\r\n    Blockly.addModule('rgb');\r\n    var dir = block.getFieldValue('DIR') || 'left';\r\n    var color = block.getFieldValue('COLOR') || '#ff0000';\r\n    return 'rgb.set_dir(\"' + dir + '\", ' + color.replace('#', '0x') + ')\\n';\r\n}\r\n\r\n\r\n\r\n\r\n // titleSetColorRgb\r\nBlockly.Blocks['rgb_set_dir_rgb'] = {\r\n    init: function () {\r\n        this.jsonInit(this._rgbSetDirRgb());\r\n    },\r\n    _rgbSetDirRgb: function() {\r\n        return {\r\n            'message0': Blockly.Msg.RGB_SET_DIR_RGB,\r\n            'args0': [\r\n              { 'type': 'input_dummy' },\r\n              {\r\n                'type': 'field_dropdown', 'name': 'DIR', 'options': [\r\n                    [Blockly.Msg._OPTION_LEFT, 'left'],\r\n                    [Blockly.Msg._OPTION_RIGHT, 'right']\r\n                ]\r\n              },\r\n              { 'type': 'input_value', 'name': 'R' },\r\n              { 'type': 'input_value', 'name': 'G' },\r\n              { 'type': 'input_value', 'name': 'B' },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.RGB_HUE\r\n          }\r\n    }\r\n}\r\nBlockly.Python['rgb_set_dir_rgb'] = function(block) {\r\n    Blockly.addModule('rgb');\r\n    var dir = block.getFieldValue('DIR') || 'left';\r\n    var r = Blockly.Python.valueToCode(block, 'R', Blockly.Python.ORDER_NONE) || '0';\r\n    var g = Blockly.Python.valueToCode(block, 'G', Blockly.Python.ORDER_NONE) || '0';\r\n    var b = Blockly.Python.valueToCode(block, 'B', Blockly.Python.ORDER_NONE) || '0';\r\n    if(isNaN(parseInt(r)) || isNaN(parseInt(g)) || isNaN(parseInt(b))) {\r\n        return `rgb.set_dir('${dir}', (${r} << 16) | (${g} << 8) | ${b})\\n`;\r\n    }\r\n    var hexR = Math.floor(Math.abs(parseInt(r)) % 256).toString(16);\r\n    var hexG = Math.floor(Math.abs(parseInt(g)) % 256).toString(16);\r\n    var hexB = Math.floor(Math.abs(parseInt(b)) % 256).toString(16);\r\n    if(hexR.length < 2) hexR = '0' + hexR;\r\n    if(hexG.length < 2) hexG = '0' + hexG;\r\n    if(hexB.length < 2) hexB = '0' + hexB;\r\n    return 'rgb.set_dir(\"' + dir + '\", 0x' + hexR + hexG + hexB + ')\\n';\r\n}\r\n\r\n\r\n// titleSetBgColor\r\nBlockly.Blocks['rgb_set'] = {\r\n    init: function () {\r\n        this.jsonInit(this._rgbSet());\r\n    },\r\n    _rgbSet: function() {\r\n        return {\r\n            'message0': Blockly.Msg.RGB_SET,\r\n            'args0': [\r\n              { 'type': 'input_dummy' },\r\n              { 'type': 'input_value', 'name': 'INDEX' },\r\n              {\r\n                'type': 'field_colour',\r\n                'name': 'COLOR',\r\n                'colour': '#ff0000'\r\n              }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.RGB_HUE\r\n          }\r\n    }\r\n}\r\nBlockly.Python['rgb_set'] = function (block) {\r\n    Blockly.addModule('rgb');\r\n    var index = Blockly.Python.valueToCode(block, 'INDEX', Blockly.Python.ORDER_NONE) || '1';\r\n    var color = block.getFieldValue('COLOR') || '#ff0000';\r\n    return 'rgb.set(' + index + ', ' + color.replace('#', '0x') + ')\\n';\r\n}\r\n\r\n\r\n\r\n// titleSetBgColorRgb\r\nBlockly.Blocks['rgb_set_rgb'] = {\r\n    init: function () {\r\n        this.jsonInit(this._rgbSetRgb());\r\n    },\r\n    _rgbSetRgb: function() {\r\n        return  {\r\n            'message0': Blockly.Msg.RGB_SET_RGB,\r\n            'args0': [\r\n              { 'type': 'input_dummy' },\r\n              { 'type': 'input_value', 'name': 'INDEX' },\r\n              { 'type': 'input_value', 'name': 'R' },\r\n              { 'type': 'input_value', 'name': 'G' },\r\n              { 'type': 'input_value', 'name': 'B' },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.RGB_HUE\r\n          };\r\n    }\r\n}\r\nBlockly.Python['rgb_set_rgb'] = function (block) {\r\n    Blockly.addModule('rgb');\r\n    var index = Blockly.Python.valueToCode(block, 'INDEX', Blockly.Python.ORDER_NONE) || '1';\r\n    var r = Blockly.Python.valueToCode(block, 'R', Blockly.Python.ORDER_NONE) || '0';\r\n    var g = Blockly.Python.valueToCode(block, 'G', Blockly.Python.ORDER_NONE) || '0';\r\n    var b = Blockly.Python.valueToCode(block, 'B', Blockly.Python.ORDER_NONE) || '0';\r\n    if(isNaN(parseInt(r)) || isNaN(parseInt(g)) || isNaN(parseInt(b))) {\r\n        return `rgb.set(${index},(${r} << 16) | (${g} << 8) | ${b})\\n`;\r\n    }\r\n    var hexR = Math.floor(Math.abs(parseInt(r)) % 256).toString(16);\r\n    var hexG = Math.floor(Math.abs(parseInt(g)) % 256).toString(16);\r\n    var hexB = Math.floor(Math.abs(parseInt(b)) % 256).toString(16);\r\n    if(hexR.length < 2) hexR = '0' + hexR;\r\n    if(hexG.length < 2) hexG = '0' + hexG;\r\n    if(hexB.length < 2) hexB = '0' + hexB;\r\n    return 'rgb.set(' + index + ', 0x' + hexR + hexG + hexB + ')\\n';\r\n}\r\n\r\nBlockly.Blocks['rgb_set_brightness'] = {\r\n    init: function () {\r\n        this.jsonInit(this._rgbSetBrightness());\r\n    },\r\n    _rgbSetBrightness: function() {\r\n        return {\r\n            'message0': Blockly.Msg.RGB_SET_BRIGHTNESS ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'input_value', 'name': 'BRIGHTNESS' }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.RGB_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['rgb_set_brightness'] = function(block) {\r\n    Blockly.addModule('rgb');\r\n    var brightness = Blockly.Python.valueToCode(block, 'BRIGHTNESS', Blockly.Python.ORDER_FUNCTION_CALL) || '10';\r\n    return 'rgb.setBrightness(' + brightness + ')\\n';\r\n}\r\n\r\n\r\n/** unit RGB */\r\n\r\n\r\nfunction getAll() {\r\n\tvar options = [];\r\n\tfor (var i = 0; i < Blockly.Units.length; i++) {\r\n\t\tif (Blockly.Units[i].type === 'rgb') {\r\n\t\t\toptions.push([Blockly.Units[i].name, Blockly.Units[i].name]);\r\n\t\t}\r\n\t}\r\n\tif (options.length === 0) return [['', '']];\r\n\treturn options;\r\n}\r\nBlockly.Blocks['rgb_unit_set_color'] = {\r\n\tinit: function () {\r\n\t\tthis.jsonInit(this._rgbmulyisetcolor());\r\n\t},\r\n\t_rgbmulyisetcolor: function () {\r\n\t\treturn {\r\n\t\t\t'message0': Blockly.Msg.RGB_MULTI_SET_COLOR,\r\n\t\t\t'args0': [\r\n\t\t\t\t{ 'type': 'input_dummy' },\r\n\t\t\t\t{ 'type': 'field_dropdown', 'name': 'VARNAME', 'options': getAll },\r\n\t\t\t\t{ 'type': 'input_value', 'name': 'INDEX' },\r\n\t\t\t\t{ 'type': 'input_dummy' },\r\n\t\t\t\t{ 'type': 'field_colour', 'name': 'COLOR', 'colour': '#ff0000' },\r\n\r\n\t\t\t],\r\n\t\t\t'previousStatement': null,\r\n\t\t\t'nextStatement': null,\r\n\t\t\t'inputsInline': true,\r\n\t\t\t'colour': Blockly.Msg.PINS_HUE\r\n\t\t};\r\n\t}\r\n}\r\nBlockly.Python['rgb_unit_set_color'] = function (block) {\r\n\tvar varname = block.getFieldValue('VARNAME');\r\n\tvar index = Blockly.Python.valueToCode(block, 'INDEX', Blockly.Python.ORDER_FUNCTION_CALL) || '10';\r\n\tvar color = block.getFieldValue('COLOR');\r\n\treturn varname + '.setColor(' + index + ', ' + color.replace('#', '0x') + ')\\n';\r\n}\r\n\r\n\r\nBlockly.Blocks['rgb_unit_set_color_from'] = {\r\n\tinit: function () {\r\n\t\tthis.jsonInit(this._rgbmultisetcolorfrom());\r\n\t},\r\n\t_rgbmultisetcolorfrom: function () {\r\n\t\treturn {\r\n\t\t\t'message0': Blockly.Msg.RGB_MULTI_SET_COLOR_FROM,\r\n\t\t\t'args0': [\r\n\t\t\t\t{ 'type': 'input_dummy' },\r\n\t\t\t\t{ 'type': 'field_dropdown', 'name': 'VARNAME', 'options': getAll},\r\n\t\t\t\t{ 'type': 'input_value', 'name': 'FROM' },\r\n\t\t\t\t{ 'type': 'input_value', 'name': 'TO' },\r\n\t\t\t\t{ 'type': 'input_dummy' },\r\n\t\t\t\t{ 'type': 'field_colour', 'name': 'COLOR', 'colour': '#ff0000' },\r\n\r\n\t\t\t],\r\n\t\t\t'previousStatement': null,\r\n\t\t\t'nextStatement': null,\r\n\t\t\t'inputsInline': true,\r\n\t\t\t'colour': Blockly.Msg.PINS_HUE\r\n\t\t};\r\n\t}\r\n}\r\nBlockly.Python['rgb_unit_set_color_from'] = function (block) {\r\n\tvar varname = block.getFieldValue('VARNAME');\r\n\tvar from = Blockly.Python.valueToCode(block, 'FROM', Blockly.Python.ORDER_FUNCTION_CALL) || '1';\r\n\tvar to = Blockly.Python.valueToCode(block, 'TO', Blockly.Python.ORDER_FUNCTION_CALL) || '3';\r\n\tvar color = block.getFieldValue('COLOR');\r\n\treturn varname + '.setColorFrom(' + from + ', ' + to + ', ' + color.replace('#', '0x') + ')\\n';\r\n}\r\n\r\nBlockly.Blocks['rgb_unit_set_color_all'] = {\r\n\tinit: function () {\r\n\t\tthis.jsonInit(this._rgbmulyisetcolorall());\r\n\t},\r\n\t_rgbmulyisetcolorall: function () {\r\n\t\treturn {\r\n\t\t\t'message0': Blockly.Msg.RGB_MULTI_SET_COLOR_ALL,\r\n\t\t\t'args0': [\r\n\t\t\t\t{ 'type': 'input_dummy' },\r\n\t\t\t\t{ 'type': 'field_dropdown', 'name': 'VARNAME', 'options': getAll },\r\n\t\t\t\t{ 'type': 'input_dummy' },\r\n\t\t\t\t{ 'type': 'field_colour', 'name': 'COLOR', 'colour': '#ff0000' },\r\n\r\n\t\t\t],\r\n\t\t\t'previousStatement': null,\r\n\t\t\t'nextStatement': null,\r\n\t\t\t'inputsInline': true,\r\n\t\t\t'colour': Blockly.Msg.PINS_HUE\r\n\t\t};\r\n\t}\r\n}\r\nBlockly.Python['rgb_unit_set_color_all'] = function (block) {\r\n\tvar varname = block.getFieldValue('VARNAME');\r\n\tvar color = block.getFieldValue('COLOR');\r\n\treturn varname + '.setColorAll(' + color.replace('#', '0x') + ')\\n';\r\n}\r\n\r\nBlockly.Blocks['rgb_unit_set_brightness'] = {\r\n\tinit: function () {\r\n\t\tthis.jsonInit(this._rgbmulyisetbrightness());\r\n\t},\r\n\t_rgbmulyisetbrightness: function () {\r\n\t\treturn {\r\n\t\t\t'message0': Blockly.Msg.RGB_MULTI_SET_BRIGHTNESS,\r\n\t\t\t'args0': [\r\n\t\t\t\t{ 'type': 'input_dummy' },\r\n\t\t\t\t{ 'type': 'field_dropdown', 'name': 'VARNAME', 'options': getAll },\r\n\t\t\t\t{ 'type': 'input_value', 'name': 'BRIGHTNESS' },\r\n\t\t\t],\r\n\t\t\t'previousStatement': null,\r\n\t\t\t'nextStatement': null,\r\n\t\t\t'inputsInline': true,\r\n\t\t\t'colour': Blockly.Msg.PINS_HUE\r\n\t\t};\r\n\t}\r\n}\r\nBlockly.Python['rgb_unit_set_brightness'] = function (block) {\r\n\tvar varname = block.getFieldValue('VARNAME');\r\n\tvar brightness = Blockly.Python.valueToCode(block, 'BRIGHTNESS', Blockly.Python.ORDER_FUNCTION_CALL) || '100';\r\n\treturn varname + '.setBrightness(' + brightness + ')\\n';\r\n}\n\n//# sourceURL=webpack:///./app/components/m5_rgb.js?");

/***/ }),

/***/ "./app/components/m5_servo.js":
/*!************************************!*\
  !*** ./app/components/m5_servo.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function getAll() {\r\n    var options = [];\r\n    for (var i = 0; i < Blockly.Units.length; i++) {\r\n        if (Blockly.Units[i].type === 'servo') {\r\n            options.push([Blockly.Units[i].name, Blockly.Units[i].name]);\r\n        }\r\n    }\r\n    if (options.length === 0) return [['', '']];\r\n    return options;\r\n}\r\n\r\nBlockly.Blocks['servo_init'] = {\r\n    init: function () {\r\n        this.jsonInit(this._servoinit());\r\n    },\r\n    _servoinit: function () {\r\n        return {\r\n            'message0': Blockly.Msg.SERVO_HUE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    \"type\": \"field_variable\",\r\n                    \"name\": \"VAR\",\r\n                    \"variable\": \"servo\"\r\n                },\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'input_value', 'name': 'PIN' }\r\n            ],\r\n            'inputsInline': true,\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'colour': Blockly.Msg.SERVO_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['servo_init'] = function (block) {\r\n    Blockly.addModule('servo');\r\n    var varname = block.getField('VAR').variable_.name || '';\r\n    var pin = Blockly.Python.valueToCode(block, 'PIN', Blockly.Python.ORDER_FUNCTION_CALL) || '1';\r\n    return varname + ' = Servo(' + pin + ')\\n';\r\n}\r\nBlockly.Blocks['servo_angle'] = {\r\n    init: function () {\r\n        this.jsonInit(this._servoangle());\r\n    },\r\n    _servoangle: function () {\r\n        return {\r\n            'message0': Blockly.Msg.SERVO_ANGLE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'INDEX', 'options': [\r\n                        ['0', '0'],\r\n                        ['1', '1'],\r\n                        ['2', '2'],\r\n                        ['3', '3'],\r\n                        ['4', '4'],\r\n                        ['5', '5'],\r\n                        ['6', '6'],\r\n                        ['7', '7'],\r\n                        ['8', '8'],\r\n                        ['9', '9'],\r\n                        ['10', '10'],\r\n                        ['11', '11'],\r\n                    ]\r\n                },\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'input_value', 'name': 'ANGLE' },\r\n                { 'type': 'input_dummy' },\r\n            ],\r\n            'inputsInline': true,\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'colour': Blockly.Msg.SERVO_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['servo_angle'] = function (block) {\r\n    Blockly.addModule('servo');\r\n    var index = block.getFieldValue('INDEX') || '0';\r\n    var angle = Blockly.Python.valueToCode(block, 'ANGLE', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    return 'servo.write_angle(' + index + ', ' + angle + ')' + '\\n';\r\n}\r\n\r\nBlockly.Blocks['servo_write'] = {\r\n    init: function () {\r\n        this.jsonInit(this._servowirte());\r\n    },\r\n    _servowirte: function () {\r\n        return {\r\n            'message0': Blockly.Msg.SERVO_WRITE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'INDEX', 'options': [\r\n                        ['0', '0'],\r\n                        ['1', '1'],\r\n                        ['2', '2'],\r\n                        ['3', '3'],\r\n                        ['4', '4'],\r\n                        ['5', '5'],\r\n                        ['6', '6'],\r\n                        ['7', '7'],\r\n                        ['8', '8'],\r\n                        ['9', '9'],\r\n                        ['10', '10'],\r\n                        ['11', '11'],\r\n                    ]\r\n                },\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'input_value', 'name': 'TIME' },\r\n                { 'type': 'input_dummy' },\r\n            ],\r\n            'inputsInline': true,\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'colour': Blockly.Msg.SERVO_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['servo_write'] = function (block) {\r\n    Blockly.addModule('servo');\r\n    var index = block.getFieldValue('INDEX') || '0';\r\n    var time = Blockly.Python.valueToCode(block, 'TIME', Blockly.Python.ORDER_FUNCTION_CALL) || '600';\r\n    return 'servo.write_us(' + index + ', ' + time + ')' + '\\n';\r\n}\r\n\r\nBlockly.Blocks['servo_unit_write_us'] = {\r\n    init: function () {\r\n        this.jsonInit(this._servowirteus());\r\n    },\r\n    _servowirteus: function () {\r\n        return {\r\n            'message0': Blockly.Msg.SERVO_UNIT_WRITE_US,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VARNAME', 'options': getAll()\r\n                },\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'input_value', 'name': 'TIME' },\r\n                { 'type': 'input_dummy' },\r\n            ],\r\n            'inputsInline': true,\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'colour': Blockly.Msg.SERVO_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['servo_unit_write_us'] = function (block) {\r\n    var varname = block.getFieldValue('VARNAME');\r\n    var time = Blockly.Python.valueToCode(block, 'TIME', Blockly.Python.ORDER_FUNCTION_CALL) || '600';\r\n    return varname + '.write_us(' + time + ')' + '\\n';\r\n}\r\n\r\nBlockly.Blocks['servo_unit_write_angle'] = {\r\n    init: function () {\r\n        this.jsonInit(this._servowirteangle());\r\n    },\r\n    _servowirteangle: function () {\r\n        return {\r\n            'message0': Blockly.Msg.SERVO_UNIT_WRITE_ANGLE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VARNAME', 'options': getAll()\r\n                },\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'input_value', 'name': 'ANGLE' },\r\n            ],\r\n            'inputsInline': true,\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'colour': Blockly.Msg.SERVO_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['servo_unit_write_angle'] = function (block) {\r\n    var varname = block.getFieldValue('VARNAME');\r\n    var angle = Blockly.Python.valueToCode(block, 'ANGLE', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    return varname + '.write_angle(' + angle + ')' + '\\n';\r\n}\n\n//# sourceURL=webpack:///./app/components/m5_servo.js?");

/***/ }),

/***/ "./app/components/m5_speaker.js":
/*!**************************************!*\
  !*** ./app/components/m5_speaker.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\n// function_in_event\r\n\r\n// function_main_event\r\nBlockly.Blocks['speaker_tone'] = {\r\n    init: function () {\r\n        this.jsonInit(this._speakerTone());\r\n    },\r\n    _speakerTone: function() {\r\n        return {\r\n            'message0': Blockly.Msg.SPEAKER_TONE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'input_value', 'name': 'FREQ'},\r\n                { 'type': 'input_value', 'name': 'TIMEOUT'},\r\n                { 'type': 'input_dummy' },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.SPEAKER_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['speaker_tone'] = function (block) {\r\n    var freq = Blockly.Python.valueToCode(block, 'FREQ', Blockly.Python.ORDER_FUNCTION_CALL) || '1600';\r\n    var timeout = Blockly.Python.valueToCode(block, 'TIMEOUT', Blockly.Python.ORDER_FUNCTION_CALL) || '200';\r\n    return 'speaker.tone(' + freq + ', ' + timeout + ')\\n';\r\n}\r\n\r\n\r\n// function_main_event\r\nBlockly.Blocks['speaker_vol'] = {\r\n    init: function () {\r\n        this.jsonInit(this._speakerVol());\r\n    },\r\n    _speakerVol: function() {\r\n        return {\r\n            'message0': Blockly.Msg.SPEAKER_VOL,\r\n            'args0': [\r\n                { 'type': 'input_value', 'name': 'VOLUME'},\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.SPEAKER_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['speaker_vol'] = function (block) {\r\n    var volume = Blockly.Python.valueToCode(block, 'VOLUME', Blockly.Python.ORDER_FUNCTION_CALL) || '1';\r\n    return 'speaker.volume(' + volume + ')\\n';\r\n}\r\n\r\n// function_main_event\r\nBlockly.Blocks['speaker_sing'] = {\r\n    init: function () {\r\n        this.jsonInit(this._speakerSing());\r\n    },\r\n    _speakerSing: function() {\r\n        return {\r\n            'message0': Blockly.Msg.SPEAKER_SING,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'field_dropdown', 'name': 'TONE', 'options':[\r\n                    ['Low A', '220'], ['Low B', '247'], ['Low C', '131'], ['Low D', '147'], ['Low E', '165'], ['Low F', '175'], ['Low G', '196'],\r\n                    ['Middle A', '448'], ['Middle B', '494'], ['Middle C', '262'], ['Middle D', '294'], ['Middle E', '330'], ['Middle F', '349'], ['Middle G', '392'],\r\n                    ['High A', '889'], ['High B', '988'], ['High C', '523'], ['High D', '587'], ['High E', '659'], ['High F', '698'], ['High G', '784'],\r\n                    ['Low A#', '233'], ['Low C#', '139'], ['Low D#', '156'], ['Low F#', '185'], ['Low G#', '208'],\r\n                    ['Middle A#', '466'], ['Middle C#', '277'], ['Middle D#', '311'], ['Middle F#', '370'], ['Middle G#', '415'],\r\n                    ['High A#', '932'], ['High C#', '554'], ['High D#', '622'], ['High F#', '740'], ['High  G#', '831']\r\n                ]},\r\n                { 'type': 'field_dropdown', 'name': 'BEAT', 'options':[\r\n                    ['1', '1'],\r\n                    ['1/2', '1/2'],\r\n                    ['1/4', '1/4'],\r\n                    ['1/8', '1/8'],\r\n                    ['1/16', '1/16'],\r\n                    ['2', '2'],\r\n                    ['4', '4']\r\n                ]},\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.SPEAKER_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['speaker_sing'] = function (block) {\r\n    var tone = block.getFieldValue('TONE') || '220';\r\n    var beat = block.getFieldValue('BEAT') || '1';\r\n    return 'speaker.sing(' + tone + ', ' + beat + ')\\n';\r\n}\r\n\n\n//# sourceURL=webpack:///./app/components/m5_speaker.js?");

/***/ }),

/***/ "./app/components/m5_step_motor.js":
/*!*****************************************!*\
  !*** ./app/components/m5_step_motor.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\n\r\nBlockly.Blocks['motor_instance'] = {\r\n    init: function () {\r\n        this.jsonInit(this._motorInstance());\r\n    },\r\n    _motorInstance: function() {\r\n        return {\r\n            'message0': Blockly.Msg.MOTOR_INSTANCE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'X_VAR_MOTOR', 'options':[\r\n                        ['stepmotor1', 'stepmotor1'],\r\n                        ['stepmotor2', 'stepmotor2'],\r\n                        ['stepmotor3', 'stepmotor3'],\r\n                        ['stepmotor4', 'stepmotor4'],\r\n                    ]\r\n                },\r\n                { 'type': 'input_dummy' },\r\n                {'type': 'field_input', 'name': 'ADDRESS', 'text': '0x70'}\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.MOTOR_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['motor_instance'] = function (block) {\r\n    var motor = block.getFieldValue('X_VAR_MOTOR') || 'stepmotor1';\r\n    var address = block.getFieldValue('ADDRESS') || '0x70';\r\n    return motor + ' = StepMotor(addr='+ address + ')\\n';\r\n}\r\n\r\n// function_main_event\r\nBlockly.Blocks['motor_move_xyz'] = {\r\n    init: function () {\r\n        this.jsonInit(this._motorMoveXyz());\r\n    },\r\n    _motorMoveXyz: function() {\r\n        return {\r\n            'message0': Blockly.Msg.MOTOR_MOVE_XYZ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'X_VAR_MOTOR', 'options':[\r\n                        ['stepmotor1', 'stepmotor1'],\r\n                        ['stepmotor2', 'stepmotor2'],\r\n                        ['stepmotor3', 'stepmotor3'],\r\n                        ['stepmotor4', 'stepmotor4'],\r\n                    ]\r\n                },\r\n                { 'type': 'input_value', 'name': 'X'},\r\n                { 'type': 'input_value', 'name': 'Y'},\r\n                { 'type': 'input_value', 'name': 'Z'},\r\n                { 'type': 'input_value', 'name': 'SPEED'},\r\n                { 'type': 'input_dummy' },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.MOTOR_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['motor_move_xyz'] = function (block) {\r\n    var motor = block.getFieldValue('X_VAR_MOTOR') || 'stepmotor1';\r\n    var x = Blockly.Python.valueToCode(block, 'X', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var y = Blockly.Python.valueToCode(block, 'Y', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var z = Blockly.Python.valueToCode(block, 'Z', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var speed = Blockly.Python.valueToCode(block, 'SPEED', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    return motor + '.turn(x=' + x + ',  y=' + y + ', z=' + z + ', speed=' + speed + ')\\n';\r\n}\r\n\r\n\r\nBlockly.Blocks['motor_g_code'] = {\r\n    init: function () {\r\n        this.jsonInit(this._motorInstance());\r\n    },\r\n    _motorInstance: function() {\r\n        return {\r\n            'message0': Blockly.Msg.MOTOR_G_CODE,\r\n            'args0': [\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'X_VAR_MOTOR', 'options':[\r\n                        ['stepmotor1', 'stepmotor1'],\r\n                        ['stepmotor2', 'stepmotor2'],\r\n                        ['stepmotor3', 'stepmotor3'],\r\n                        ['stepmotor4', 'stepmotor4'],\r\n                    ]\r\n                },\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'input_value', 'name': 'TEXT' },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.MOTOR_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['motor_g_code'] = function (block) {\r\n    var motor = block.getFieldValue('X_VAR_MOTOR') || 'stepmotor1';\r\n    var text = Blockly.Python.valueToCode(block, 'TEXT', Blockly.Python.ORDER_NONE) || '';\r\n    return motor + '.g_code('+ text + ')\\n';\r\n}\r\n\r\n\r\nBlockly.Blocks['motor_set_mode'] = {\r\n    init: function () {\r\n        this.jsonInit(this._motorInstance());\r\n    },\r\n    _motorInstance: function() {\r\n        return {\r\n            'message0': Blockly.Msg.MOTOR_SET_MODE,\r\n            'args0': [\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'X_VAR_MOTOR', 'options':[\r\n                        ['stepmotor1', 'stepmotor1'],\r\n                        ['stepmotor2', 'stepmotor2'],\r\n                        ['stepmotor3', 'stepmotor3'],\r\n                        ['stepmotor4', 'stepmotor4'],\r\n                    ]\r\n                },\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'TEXT', 'options':[\r\n                        ['distance', 'distance'],\r\n                        ['absolute', 'absolute'],\r\n                    ]\r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.MOTOR_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['motor_set_mode'] = function (block) {\r\n    var motor = block.getFieldValue('X_VAR_MOTOR') || 'stepmotor1';\r\n    var text = block.getFieldValue('TEXT') || '';\r\n    return motor + `.set_mode(\"${text}\")\\n`;\r\n}\r\n\r\n\r\n\r\nBlockly.Blocks['motor_lock'] = {\r\n    init: function () {\r\n        this.jsonInit(this._motorInstance());\r\n    },\r\n    _motorInstance: function() {\r\n        return {\r\n            'message0': Blockly.Msg.MOTOR_LOCK,\r\n            'args0': [\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'X_VAR_MOTOR', 'options':[\r\n                        ['stepmotor1', 'stepmotor1'],\r\n                        ['stepmotor2', 'stepmotor2'],\r\n                        ['stepmotor3', 'stepmotor3'],\r\n                        ['stepmotor4', 'stepmotor4'],\r\n                    ]\r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.MOTOR_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['motor_lock'] = function (block) {\r\n    var motor = block.getFieldValue('X_VAR_MOTOR') || 'stepmotor1';\r\n    return motor + '.lock_motor()\\n';\r\n}\r\n\r\n\r\nBlockly.Blocks['motor_unlock'] = {\r\n    init: function () {\r\n        this.jsonInit(this._motorInstance());\r\n    },\r\n    _motorInstance: function() {\r\n        return {\r\n            'message0': Blockly.Msg.MOTOR_UNLOCK,\r\n            'args0': [\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'X_VAR_MOTOR', 'options':[\r\n                        ['stepmotor1', 'stepmotor1'],\r\n                        ['stepmotor2', 'stepmotor2'],\r\n                        ['stepmotor3', 'stepmotor3'],\r\n                        ['stepmotor4', 'stepmotor4'],\r\n                    ]\r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.MOTOR_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['motor_unlock'] = function (block) {\r\n    var motor = block.getFieldValue('X_VAR_MOTOR') || 'stepmotor1';\r\n    return motor + '.unlock_motor()\\n';\r\n}\n\n//# sourceURL=webpack:///./app/components/m5_step_motor.js?");

/***/ }),

/***/ "./app/components/m5_timer.js":
/*!************************************!*\
  !*** ./app/components/m5_timer.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\nBlockly.Blocks['timer_delay'] = {\r\n    init: function () {\r\n        this.jsonInit(this._timerDelay());\r\n    },\r\n    _timerDelay: function() {\r\n        return {\r\n            'message0': Blockly.Msg.TIMER_DELAY,\r\n            'args0': [\r\n                { 'type': 'input_value', 'name': 'DELAY'},\r\n                { 'type': 'input_dummy' },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.TIMER_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['timer_delay'] = function (block) {\r\n    var delay = Blockly.Python.valueToCode(block, 'DELAY', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    return 'wait(' + delay + ')\\n';\r\n    // return 'if _thread.wait(' + (delay * 1000) + ') == _thread.EXIT: raise OSError\\n';\r\n}\r\n\n\n//# sourceURL=webpack:///./app/components/m5_timer.js?");

/***/ }),

/***/ "./app/components/m5_title.js":
/*!************************************!*\
  !*** ./app/components/m5_title.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\n\r\nfunction getAllTitles () {\r\n    \r\n    var options = [];\r\n    for (var i = 0; i < Blockly.Component.length; i++) {\r\n        if (Blockly.Component[i].type === 'title') {\r\n            options.push([Blockly.Component[i].name, Blockly.Component[i].name]);\r\n        }\r\n    }\r\n    if (options.length === 0) return [['', '']];\r\n    return options;\r\n}\r\n// titleSetText\r\nBlockly.Blocks['title_set_text'] = {\r\n    init: function () {\r\n        this.jsonInit(this._titleSetTextJson());\r\n    },\r\n    _titleSetTextJson: function() {\r\n        return {\r\n            'message0': Blockly.Msg.TITLE_SET_TEXT ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                { 'type': 'field_dropdown', 'name': 'COMPONENT', 'options': getAllTitles },\r\n                { 'type': 'input_value', 'name': 'TEXT' },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_TITLE_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['title_set_text'] = function (block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var text = Blockly.Python.valueToCode(block, 'TEXT', Blockly.Python.ORDER_NONE) || '';\r\n    if (block.childBlocks_[0].type === 'text') {\r\n        return component + '.setTitle(' + text + ')\\n';\r\n    }\r\n    return component + '.setTitle(str(' + text + '))\\n';\r\n}\r\n\r\n// titleShow\r\nBlockly.Blocks['title_show'] = {\r\n    init: function () {\r\n        this.jsonInit(this._titleShow());\r\n    },\r\n    _titleShow: function() {\r\n        return {\r\n            'message0': Blockly.Msg.TITLE_SHOW,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'COMPONENT', 'options': getAllTitles \r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_TITLE_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['title_show'] = function (block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    return component + '.show()\\n';\r\n}\r\n\r\n// titleHide\r\nBlockly.Blocks['title_hide'] = {\r\n    init: function () {\r\n        this.jsonInit(this._titleHide());\r\n    },\r\n    _titleHide: function() {\r\n        return {\r\n            'message0': Blockly.Msg.TITLE_HIDE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'COMPONENT', 'options':  getAllTitles \r\n                },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_TITLE_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['title_hide'] = function (block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    return component + '.hide()\\n';\r\n}\r\n\r\n// titleSetColor\r\nBlockly.Blocks['title_set_color'] = {\r\n    init: function () {\r\n        this.jsonInit(this._titleSetColor());\r\n    },\r\n    _titleSetColor: function() {\r\n        return {\r\n            'message0': Blockly.Msg.TITLE_SET_COLOR,\r\n            'args0': [\r\n              { 'type': 'input_dummy' },\r\n              {\r\n                'type': 'field_dropdown', 'name': 'COMPONENT', 'options':  getAllTitles \r\n              },\r\n              {\r\n                'type': 'field_colour',\r\n                'name': 'COLOR',\r\n                'colour': '#ff0000'\r\n              }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_TITLE_HUE\r\n          }\r\n    }\r\n}\r\nBlockly.Python['title_set_color'] = function (block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var color = block.getFieldValue('COLOR') || '#ff0000';\r\n    return component + '.setFgColor(' + color.replace('#', '0x') + ')\\n';\r\n}\r\n // titleSetColorRgb\r\nBlockly.Blocks['title_set_color_rgb'] = {\r\n    init: function () {\r\n        this.jsonInit(this._titleSetColorRgb());\r\n    },\r\n    _titleSetColorRgb: function() {\r\n        return {\r\n            'message0': Blockly.Msg.TITLE_SET_COLOR_RGB,\r\n            'args0': [\r\n              { 'type': 'input_dummy' },\r\n              {\r\n                'type': 'field_dropdown', 'name': 'COMPONENT', 'options':  getAllTitles \r\n              },\r\n              { 'type': 'input_value', 'name': 'R' },\r\n              { 'type': 'input_value', 'name': 'G' },\r\n              { 'type': 'input_value', 'name': 'B' },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_TITLE_HUE\r\n          }\r\n    }\r\n}\r\nBlockly.Python['title_set_color_rgb'] = function (block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var r = Blockly.Python.valueToCode(block, 'R', Blockly.Python.ORDER_NONE) || '0';\r\n    var g = Blockly.Python.valueToCode(block, 'G', Blockly.Python.ORDER_NONE) || '0';\r\n    var b = Blockly.Python.valueToCode(block, 'B', Blockly.Python.ORDER_NONE) || '0';\r\n    if(isNaN(parseInt(r)) || isNaN(parseInt(g)) || isNaN(parseInt(b))) {\r\n        return component + `.setFgColor((${r} << 16) | (${g} << 8) | ${b})\\n`;\r\n    }\r\n    var hexR = Math.floor(Math.abs(parseInt(r)) % 256).toString(16);\r\n    var hexG = Math.floor(Math.abs(parseInt(g)) % 256).toString(16);\r\n    var hexB = Math.floor(Math.abs(parseInt(b)) % 256).toString(16);\r\n    if (hexR.length < 2) hexR = '0' + hexR;\r\n    if (hexG.length < 2) hexG = '0' + hexG;\r\n    if (hexB.length < 2) hexB = '0' + hexB;\r\n    return component + '.setFgColor(0x' + hexR + hexG + hexB + ')\\n';\r\n}\r\n// titleSetBgColor\r\nBlockly.Blocks['title_set_bgcolor'] = {\r\n    init: function () {\r\n        this.jsonInit(this._titleSetBgColor());\r\n    },\r\n    _titleSetBgColor: function() {\r\n        return {\r\n            'message0': Blockly.Msg.TITLE_SET_BGCOLOR,\r\n            'args0': [\r\n              { 'type': 'input_dummy' },\r\n              {\r\n                'type': 'field_dropdown', 'name': 'COMPONENT', 'options': getAllTitles \r\n              },\r\n              {\r\n                'type': 'field_colour',\r\n                'name': 'COLOR',\r\n                'colour': '#ff0000'\r\n              }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_TITLE_HUE\r\n          }\r\n    }\r\n}\r\nBlockly.Python['title_set_bgcolor'] = function (block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var color = block.getFieldValue('COLOR') || '#ff0000';\r\n    return component + '.setBgColor(' + color.replace('#', '0x') + ')\\n';\r\n}\r\n// titleSetBgColorRgb\r\nBlockly.Blocks['title_set_bgcolor_rgb'] = {\r\n    init: function () {\r\n        this.jsonInit(this._titleSetBgColorRgb());\r\n    },\r\n    _titleSetBgColorRgb: function() {\r\n        return  {\r\n            'message0': Blockly.Msg.TITLE_SET_BGCOLOR_RGB,\r\n            'args0': [\r\n              { 'type': 'input_dummy' },\r\n              {\r\n                'type': 'field_dropdown', 'name': 'COMPONENT', 'options':  getAllTitles \r\n              },\r\n              { 'type': 'input_value', 'name': 'R' },\r\n              { 'type': 'input_value', 'name': 'G' },\r\n              { 'type': 'input_value', 'name': 'B' },\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.COMPONENT_TITLE_HUE\r\n          };\r\n    }\r\n}\r\nBlockly.Python['title_set_bgcolor_rgb'] = function (block) {\r\n    var component = block.getFieldValue('COMPONENT');\r\n    var r = Blockly.Python.valueToCode(block, 'R', Blockly.Python.ORDER_NONE) || '0';\r\n    var g = Blockly.Python.valueToCode(block, 'G', Blockly.Python.ORDER_NONE) || '0';\r\n    var b = Blockly.Python.valueToCode(block, 'B', Blockly.Python.ORDER_NONE) || '0';\r\n    if(isNaN(parseInt(r)) || isNaN(parseInt(g)) || isNaN(parseInt(b))) {\r\n        return component + `.setBgColor((${r} << 16) | (${g} << 8) | ${b})\\n`;\r\n    }\r\n    var hexR = Math.floor(Math.abs(parseInt(r)) % 256).toString(16);\r\n    var hexG = Math.floor(Math.abs(parseInt(g)) % 256).toString(16);\r\n    var hexB = Math.floor(Math.abs(parseInt(b)) % 256).toString(16);\r\n    if (hexR.length < 2) hexR = '0' + hexR;\r\n    if (hexG.length < 2) hexG = '0' + hexG;\r\n    if (hexB.length < 2) hexB = '0' + hexB;\r\n    return component + '.setBgColor(0x' + hexR + hexG + hexB + ')\\n';\r\n}\r\n\r\n\n\n//# sourceURL=webpack:///./app/components/m5_title.js?");

/***/ }),

/***/ "./app/components/m5_tof.js":
/*!**********************************!*\
  !*** ./app/components/m5_tof.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\nfunction gettofAll() {\r\n\tvar options = [];\r\n\tfor (var i = 0; i < Blockly.Units.length; i++) {\r\n\t\tif (Blockly.Units[i].type === 'tof') {\r\n\t\t\toptions.push([Blockly.Units[i].name, Blockly.Units[i].name]);\r\n\t\t}\r\n\t}\r\n\tif (options.length === 0) return [['', '']];\r\n\treturn options;\r\n}\r\nBlockly.Blocks['unit_tof_state'] = {\r\n    init: function () {\r\n        this.jsonInit(this._buttonPressedHandler());\r\n    },\r\n    _buttonPressedHandler: function () {\r\n        return {\r\n            'message0': Blockly.Msg.TOF_STATE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'TOF', 'options': gettofAll\r\n                },\r\n            ],\r\n            'output': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.SPEAKER_HUE\r\n        }\r\n    }\r\n}\r\nBlockly.Python['unit_tof_state'] = function (block) {\r\n    var tof = block.getFieldValue('TOF') || '';\r\n    var code = tof + '.' +'get_distance()';\r\n    return [code, Blockly.Python.ORDER_CONDITIONAL];\r\n}\n\n//# sourceURL=webpack:///./app/components/m5_tof.js?");

/***/ }),

/***/ "./app/components/m5_track.js":
/*!************************************!*\
  !*** ./app/components/m5_track.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\nfunction getAll() {\r\n    var options = [];\r\n    for (var i = 0; i < Blockly.Units.length; i++) {\r\n        if (Blockly.Units[i].type === 'track') {\r\n            options.push([Blockly.Units[i].name, Blockly.Units[i].name]);\r\n        }\r\n    }\r\n    if (options.length === 0) return [['', '']];\r\n    return options;\r\n}\r\n\r\n\r\nBlockly.Blocks['m5track_get_analog'] = {\r\n    init: function () {\r\n        this.jsonInit(this._speakerSing());\r\n    },\r\n    _speakerSing: function() {\r\n        return {\r\n            'message0': Blockly.Msg.M5TRACK_GET_ANALOG,\r\n            'args0': [\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VARNAME', 'options': getAll()\r\n                },\r\n                { 'type': 'field_dropdown', 'name': 'ANALOG', 'options':[['1', '1'], ['2', '2'],['3', '3'],['4', '4']]},\r\n            ],\r\n            'inputsInline': true,\r\n            \"output\": null,\r\n            'colour': 185\r\n        };\r\n    }\r\n}\r\nBlockly.Python['m5track_get_analog'] = function (block) {\r\n    var varname = block.getFieldValue('VARNAME');\r\n    var analog = block.getFieldValue('ANALOG');\r\n    return [`${varname}.get_analog_value(${analog})`,Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\nBlockly.Blocks['m5track_get_digital'] = {\r\n    init: function () {\r\n        this.jsonInit(this._speakerSing());\r\n    },\r\n    _speakerSing: function() {\r\n        return {\r\n            'message0': Blockly.Msg.M5TRACK_GET_DIGITAL,\r\n            'args0': [\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VARNAME', 'options': getAll()\r\n                },\r\n                { 'type': 'field_dropdown', 'name': 'DIGITAL', 'options':[['1', '1'], ['2', '2'],['3', '3'],['4', '4']]},\r\n            ],\r\n            'inputsInline': true,\r\n            \"output\": null,\r\n            'colour': 185\r\n        };\r\n    }\r\n}\r\nBlockly.Python['m5track_get_digital'] = function (block) {\r\n    var digital = block.getFieldValue('DIGITAL');\r\n    var varname = block.getFieldValue('VARNAME');\r\n    return [`${varname}.get_digital_value(${digital})`,Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\nBlockly.Blocks['m5track_set_analog'] = {\r\n    init: function () {\r\n        this.jsonInit(this._m5balamove());\r\n    },\r\n    _m5balamove: function() {\r\n        return {\r\n            'message0': Blockly.Msg.M5TRACK_SET_ANALOG,\r\n            'args0': [\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VARNAME', 'options': getAll()\r\n                },\r\n                { 'type': 'input_value', 'name': 'NUM'},\r\n                { 'type': 'input_value', 'name': 'NUM1'},\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': 185\r\n        };\r\n    }\r\n}\r\nBlockly.Python['m5track_set_analog'] = function (block) {\r\n    var varname = block.getFieldValue('VARNAME');\r\n    var num = Blockly.Python.valueToCode(block, 'NUM', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var num1 = Blockly.Python.valueToCode(block, 'NUM1', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    return `${varname}.set_analog_value(${num},${num1})\\n`;\r\n}\r\n\n\n//# sourceURL=webpack:///./app/components/m5_track.js?");

/***/ }),

/***/ "./app/components/m5_uart.js":
/*!***********************************!*\
  !*** ./app/components/m5_uart.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\nBlockly.Blocks['uart'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxttext());\r\n    },\r\n    _nxttext: function () {\r\n        return {\r\n            'message0': Blockly.Msg.UART_PIN,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    \"type\": \"field_variable\",\r\n                    \"name\": \"VAR\",\r\n                    \"variable\": \"uart\"\r\n                },\r\n                {\r\n                    'type': 'input_value', 'name': 'TX'\r\n                },\r\n                {\r\n                    'type': 'input_value', 'name': 'RX'\r\n                },\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'BAUD', 'options': [['9600', '9600'], ['115200', '115200'], ['230400', '230400'], ['256000', '256000'], ['512000', '512000'], ['921600', '921600']]\r\n                }\r\n            ],\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.UART_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['uart'] = function (block) {\r\n    Blockly.addModule('machine');\r\n    var varname = block.getField('VAR').variable_.name || '';\r\n    var tx = Blockly.Python.valueToCode(block, 'TX', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var rx = Blockly.Python.valueToCode(block, 'RX', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var baud = block.getFieldValue('BAUD') || '';\r\n    return  varname + ' = machine.UART(1, tx=' + tx + ', rx=' + rx + ')\\n' + varname + '.init(' + baud + ', bits=8, parity=None, stop=1)\\n';\r\n    // return 'global ' + varname + '\\n' + varname + ' = machine.UART(1, tx=' + tx + ', rx=' + rx + ')\\n' + varname + '.init(' + baud + ', bits=8, parity=None, stop=1)\\n';\r\n}\r\n\r\nBlockly.Blocks['uart_read'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxttext());\r\n    },\r\n    _nxttext: function () {\r\n        return {\r\n            'message0': Blockly.Msg.UART_READ,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    \"type\": \"field_variable\",\r\n                    \"name\": \"VAR\",\r\n                    \"variable\": \"uart\"\r\n                },\r\n            ],\r\n            \"output\": null,\r\n            'inputsInline': true,\r\n            'colour': Blockly.Msg.UART_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['uart_read'] = function (block) {\r\n    var varname = block.getField('VAR').variable_.name || '';\r\n    return  [ varname + '.read()', Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\nBlockly.Blocks['uart_read_characters'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxttext());\r\n    },\r\n    _nxttext: function () {\r\n        return {\r\n            'message0': Blockly.Msg.UART_READ_CHARACTERS,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    \"type\": \"field_variable\",\r\n                    \"name\": \"VAR\",\r\n                    \"variable\": \"uart\"\r\n                },\r\n                {'type': 'input_value', 'name': 'NUM'}\r\n\r\n            ],\r\n            'inputsInline': true,\r\n            \"output\": null,\r\n            'colour': Blockly.Msg.UART_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['uart_read_characters'] = function (block) {\r\n    var varname = block.getField('VAR').variable_.name || '';\r\n    var num = Blockly.Python.valueToCode(block, 'NUM', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    return [`${varname}.read(${num})`, Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\nBlockly.Blocks['uart_readline'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxttext());\r\n    },\r\n    _nxttext: function () {\r\n        return {\r\n            'message0': Blockly.Msg.UART_READLINE,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    \"type\": \"field_variable\",\r\n                    \"name\": \"VAR\",\r\n                    \"variable\": \"uart\"\r\n                },\r\n            ],\r\n            'inputsInline': true,\r\n             'output': null,\r\n            'colour': Blockly.Msg.UART_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['uart_readline'] = function (block) {\r\n    var varname = block.getField('VAR').variable_.name || '';\r\n    return [`${varname}.readline()`, Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\nBlockly.Blocks['uart_readinto'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxttext());\r\n    },\r\n    _nxttext: function () {\r\n        return {\r\n            'message0': Blockly.Msg.UART_READINTO,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    \"type\": \"field_variable\",\r\n                    \"name\": \"VAR\",\r\n                    \"variable\": \"uart\"\r\n                },\r\n                {\r\n                    \"type\": \"field_variable\",\r\n                    \"name\": \"VAR1\",\r\n                    \"variable\": \"buf\"\r\n                },\r\n            ],\r\n            'inputsInline': true,\r\n            \"output\": null,\r\n            'colour': Blockly.Msg.UART_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['uart_readinto'] = function (block) {\r\n    var varname = block.getField('VAR').variable_.name || '';\r\n    var varname1 = block.getField('VAR1').variable_.name || '';\r\n    return [`${varname}.read(${varname1})`, Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\nBlockly.Blocks['uart_write'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxttext());\r\n    },\r\n    _nxttext: function () {\r\n        return {\r\n            'message0': Blockly.Msg.UART_WRITE,\r\n            'args0': [\r\n                { 'type': 'input_value', 'name': 'VALUE' },\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    \"type\": \"field_variable\",\r\n                    \"name\": \"VAR\",\r\n                    \"variable\": \"uart\"\r\n                },\r\n            ],\r\n            'inputsInline': true,\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'colour': Blockly.Msg.UART_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['uart_write'] = function (block) {\r\n\r\n    var value = Blockly.Python.valueToCode(block, 'VALUE', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var value1 = value.replace(/\\\\\\\\/g,'\\\\');\r\n    var varname = block.getField('VAR').variable_.name || '';\r\n    return varname + '.write(' + value1 + ')\\n';\r\n}\r\n\r\nBlockly.Blocks['uart_any'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxttext());\r\n    },\r\n    _nxttext: function () {\r\n        return {\r\n            'message0': Blockly.Msg.UART_READANY,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    \"type\": \"field_variable\",\r\n                    \"name\": \"VAR\",\r\n                    \"variable\": \"uart\"\r\n                },\r\n            ],\r\n            'inputsInline': true,\r\n             'output': null,\r\n            'colour': Blockly.Msg.UART_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['uart_any'] = function (block) {\r\n    var varname = block.getField('VAR').variable_.name || '';\r\n    console.log(varname);\r\n    \r\n    return [ varname + '.any()', Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\nBlockly.Blocks['uart_write_number'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxttext());\r\n    },\r\n    _nxttext: function () {\r\n        return {\r\n            'message0': Blockly.Msg.UART_WRITE_NUMBER,\r\n            'args0': [\r\n                { 'type': 'input_value', 'name': 'VALUE' },\r\n                {\r\n                    \"type\": \"field_variable\",\r\n                    \"name\": \"VAR\",\r\n                    \"variable\": \"uart\"\r\n                },\r\n            ],\r\n            'inputsInline': true,\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'colour': Blockly.Msg.UART_HUE\r\n        };\r\n    }\r\n}  \r\nBlockly.Python['uart_write_number'] = function (block) {\r\n    var value = Blockly.Python.valueToCode(block, 'VALUE', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var varname = block.getField('VAR').variable_.name || '';\r\n    return varname + '.write(' + value + ')\\n';\r\n}\r\n\r\n\r\nBlockly.Blocks['uart_write_line'] = {\r\n    init: function () {\r\n        this.jsonInit(this._nxttext());\r\n    },\r\n    _nxttext: function () {\r\n        return {\r\n            'message0': Blockly.Msg.UART_WRITE_LINE,\r\n            'args0': [\r\n                { 'type': 'input_value', 'name': 'VALUE' },\r\n                {\r\n                    \"type\": \"field_variable\",\r\n                    \"name\": \"VAR\",\r\n                    \"variable\": \"uart\"\r\n                },\r\n            ],\r\n            'inputsInline': true,\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'colour': Blockly.Msg.UART_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['uart_write_line'] = function (block) {\r\n    var value = Blockly.Python.valueToCode(block, 'VALUE', Blockly.Python.ORDER_FUNCTION_CALL) || '0';\r\n    var varname = block.getField('VAR').variable_.name || '';\r\n    var value1 = value.replace(/\\'/g,'').replace(/\\\\\\\\/g,'\\\\');\r\n    return `${varname}.write('${value1}\\\\r\\\\n')\\n`;\r\n}\r\n\n\n//# sourceURL=webpack:///./app/components/m5_uart.js?");

/***/ }),

/***/ "./app/components/m5_weigh.js":
/*!************************************!*\
  !*** ./app/components/m5_weigh.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function getAll() {\r\n    var options = [];\r\n    for (var i = 0; i < Blockly.Units.length; i++) {\r\n        if (Blockly.Units[i].type === 'weigh') {\r\n            options.push([Blockly.Units[i].name, Blockly.Units[i].name]);\r\n        }\r\n    }\r\n    if (options.length === 0) return [['', '']];\r\n    return options;\r\n}\r\n\r\n\r\nBlockly.Blocks['weigh_zero'] = {\r\n    init: function () {\r\n        this.jsonInit(this._weighzero());\r\n    },\r\n    _weighzero: function () {\r\n        return {\r\n            'message0': Blockly.Msg.WEIGH_ZERO,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VARNAME', 'options': getAll()\r\n                }\r\n            ],\r\n            'inputsInline': true,\r\n            'previousStatement': null,\r\n            'nextStatement': null,\r\n            'colour': Blockly.Msg.DAC_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['weigh_zero'] = function(block) {\r\n    var varname = block.getFieldValue('VARNAME');\r\n    return varname + '.zero()\\n';\r\n}\r\n\r\nBlockly.Blocks['weigh_get_weight'] = {\r\n    init: function () {\r\n        this.jsonInit(this._weighgetweight());\r\n    },\r\n    _weighgetweight: function () {\r\n        return {\r\n            'message0': Blockly.Msg.WEIGH_GET_WEIGHT,\r\n            'args0': [\r\n                { 'type': 'input_dummy' },\r\n                {\r\n                    'type': 'field_dropdown', 'name': 'VARNAME', 'options': getAll()\r\n                }\r\n            ],\r\n            'inputsInline': true,\r\n            \"output\":null,\r\n            'colour': Blockly.Msg.DAC_HUE\r\n        };\r\n    }\r\n}\r\nBlockly.Python['weigh_get_weight'] = function(block) {\r\n    var varname = block.getFieldValue('VARNAME');\r\n    return [varname + '.get_weight()', Blockly.Python.ORDER_CONDITIONAL];\r\n}\n\n//# sourceURL=webpack:///./app/components/m5_weigh.js?");

/***/ }),

/***/ "./app/m52.js":
/*!********************!*\
  !*** ./app/m52.js ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("Blockly.Component = [];\r\nBlockly.Declare = [];\r\nBlockly.modules = [];\r\nBlockly.ButtonEvents = [];\r\nBlockly.Remotes = [];\r\nBlockly.Units = [];\r\nBlockly.ResImages = [];\r\n\r\nBlockly.Msg.MATH_HUE = '#30A9DE';\r\nBlockly.Msg.TEXTS_HUE = '#F17F42';\r\nBlockly.Msg.LOOPS_HUE = '#58C9B9';\r\nBlockly.Msg.LOGIC_HUE = '#22559C';\r\nBlockly.Msg.VARIABLES_HUE = '#791E94';\r\nBlockly.Msg.LISTS_HUE = '#2EC4B6';\r\nBlockly.Msg.LCD_HUE = '#FFBC42';\r\nBlockly.Msg.BUTTON_HUE = '#D81159';\r\nBlockly.Msg.SPEAKER_HUE = '#4F86C6';\r\nBlockly.Msg.TIMER_HUE = '#EE2560';\r\nBlockly.Msg.SDCARD_HUE = '#75D701';\r\nBlockly.Msg.GPIO_HUE = '#EF5285';\r\nBlockly.Msg.PWM_HUE = '#F100E5';\r\nBlockly.Msg.ADC_HUE = '#5C196B';\r\nBlockly.Msg.DAC_HUE = '#0080FF';\r\nBlockly.Msg.UART_HUE = '#3AC569';\r\nBlockly.Msg.FUNCTION_HUE = '#995BA5';\r\nBlockly.Msg.COMPONENT_HUE = '#75D701';\r\nBlockly.Msg.COMPONENT_LABEL_HUE = '#EC6A5C';\r\nBlockly.Msg.COMPONENT_TITLE_HUE = '#EE7785';\r\nBlockly.Msg.COMPONENT_RECT_HUE = '#D1B6E1';\r\nBlockly.Msg.COMPONENT_CIRCLE_HUE = '#4FB0C6';\r\nBlockly.Msg.COMPONENT_IMAGE_HUE = '#AAABD3';\r\nBlockly.Msg.M5STAND_HUE = '#8CD790';\r\nBlockly.Msg.MOTOR_HUE = '#75D701';\r\nBlockly.Msg.SERVO_HUE = '#005874';\r\nBlockly.Msg.NXT_MOTOR_HUE = '#80D4F6';\r\nBlockly.Msg.RGB_HUE = '#68bcfe';\r\nBlockly.Msg.DHT_HUE = '#fe4365';\r\nBlockly.Msg.PINS_HUE = '#3ac569';\r\nBlockly.Msg.ADVANCED_HUE = '#ff5f2e';\r\nBlockly.Msg.BASIC_HUE = '#fdc23e';\r\nBlockly.Msg.REMOTE_HUE = '#00b9f1';\r\nBlockly.Msg.EMOJI_HUE = '#EE7785';\r\nBlockly.Msg.IIC_HUE = '#EF5285';\r\nBlockly.Msg.TRACK_HUE = '185';\r\nBlockly.Msg.LEGO_MOTOR_HUE = '#445533';\r\n\r\nBlockly.Generator.prototype.workspaceToCode = function (workspace) {\r\n    if (!workspace) {\r\n        // Backwards compatibility from before there could be multiple workspaces.\r\n        console.warn('No workspace specified in workspaceToCode call.  Guessing.');\r\n        workspace = Blockly.getMainWorkspace();\r\n    }\r\n    var code = [];\r\n    this.init(workspace);\r\n    var blocks = workspace.getTopBlocks();\r\n    for (var x = 0, block; block = blocks[x]; x++) {\r\n        var line = this.blockToCode(block);\r\n        if (goog.isArray(line)) {\r\n            // Value blocks return tuples of code and operator order.\r\n            // Top-level blocks don't care about operator order.\r\n            line = line[0];\r\n        }\r\n        if (line) {\r\n            if (block.outputConnection) {\r\n                // This block is a naked value.  Ask the language's code generator if\r\n                // it wants to append a semicolon, or something.\r\n                line = this.scrubNakedValue(line);\r\n            }\r\n            code.push(line);\r\n        }\r\n    }\r\n    code = code.join('\\n');  // Blank line between each section.\r\n    code = this.finish(code);\r\n    // Final scrubbing of whitespace.\r\n    code = code.replace(/^\\s+\\n/, '');\r\n    code = code.replace(/\\n\\s+$/, '\\n');\r\n    code = code.replace(/[ \\t]+\\n/g, '\\n');\r\n    return code;\r\n};\r\n\r\nBlockly.addModule = function (module_name) {\r\n    if (Blockly.modules.indexOf(module_name) === -1) Blockly.modules.push(module_name);\r\n    else return;\r\n}\r\n\r\nBlockly.addDeclare = function (varname) {\r\n    if (Blockly.Declare.indexOf(varname) === -1) {\r\n        Blockly.Declare.push(varname);\r\n    }\r\n}\r\n\r\nBlockly.addButtonEvent = function (eventObj) {\r\n    if (Blockly.ButtonEvents.length === 0) return Blockly.ButtonEvents.push(eventObj);\r\n    var isExist = false;\r\n    for (var i = 0; i < Blockly.ButtonEvents.length; i++) {\r\n        if (Blockly.ButtonEvents[i].event === eventObj.event) {\r\n            isExist = true;\r\n            break;\r\n        }\r\n        if(Blockly.ButtonEvents[i].id === eventObj.id) {\r\n            isExist = true;\r\n            Blockly.ButtonEvents[i].event = eventObj.event;\r\n            break;\r\n        }\r\n    }\r\n    if (!isExist) Blockly.ButtonEvents.push(eventObj);\r\n}\r\n\r\nBlockly.addRemote = function (eventObj) {\r\n    if (Blockly.Remotes.length === 0) return Blockly.Remotes.push(eventObj);\r\n    for (var i = 0; i < Blockly.Remotes.length; i++) {\r\n        if (Blockly.Remotes[i].id === eventObj.id) {\r\n            Blockly.Remotes.splice(i, 1);\r\n            break;\r\n        }\r\n    }\r\n    Blockly.Remotes.push(eventObj);\r\n}\r\n\r\nBlockly.defineGlobal = function () {\r\n    var defineList = [];\r\n\r\n    // Define Component\r\n\r\n    var varialbes = [];\r\n    var blocks = this.getMainWorkspace().getAllBlocks();\r\n    for (var i = 0; i < blocks.length; i++) {\r\n        if (blocks[i].type === \"variables_get\" || blocks[i].type === \"variables_set\") {\r\n            var varname = this.getMainWorkspace().getVariableById(blocks[i].getVars()).name;\r\n            if (varialbes.indexOf(varname) > -1) continue;\r\n            varialbes.push(varname);\r\n        }\r\n        if (blocks[i].type === 'math_change') {\r\n            if (varialbes.indexOf('Number') === -1) {\r\n                varialbes.push('Number');\r\n            }\r\n          }\r\n          if (blocks[i].type === 'uart_readinto') {\r\n            if (varialbes.indexOf('uart') === -1) {\r\n                varialbes.push('uart');\r\n            }\r\n          }\r\n          if (blocks[i].type === 'math_constant') {\r\n            if (varialbes.indexOf('math') === -1) {\r\n                varialbes.push('math');\r\n            }\r\n          }\r\n          if (blocks[i].type === 'math_random_float') {\r\n            if (varialbes.indexOf('random') === -1) {\r\n                varialbes.push('random');\r\n            }\r\n          }\r\n        // if(blocks[i].type === \"emoji_show\" || blocks[i].type === \"emoji_set_single\") {\r\n        //     if (varialbes.indexOf('emoji') > -1) continue;\r\n        //     varialbes.push('emoji');\r\n        // }\r\n    }\r\n\r\n    var modules = [];\r\n    for(var i = 0; i < Blockly.modules.length; i++) {\r\n        \r\n        if (Blockly.modules[i] === 'machine') {\r\n        } else {\r\n            modules.push(Blockly.modules[i]);\r\n        }\r\n    }\r\n\r\n    let declare = Array.from(new Set(Blockly.Declare));     \r\n    return defineList.concat(varialbes, declare);\r\n}\r\n\r\n/**\r\n * Default Event\r\n */\r\n\r\n/**\r\n * Button\r\n */\r\n\r\n/**\r\n * Speaker\r\n */\r\n\r\n/**\r\n * Component - Title\r\n */\r\n\r\n\r\n/**\r\n * Component - Label\r\n */\r\n\r\n/**\r\n * Component - Rect\r\n */\r\n\r\n/**\r\n * Component - Circle\r\n */\r\n\r\n/**\r\n * Component Image\r\n */\r\n\r\n\r\n/**\r\n * M5Stand\r\n */\r\n\r\n/**\r\n * Timer\r\n */\r\n\r\n/**\r\n * Motor\r\n */\r\n\r\n/**\r\n * SD Card\r\n */\r\nBlockly.Blocks['sdcard_mountsd'] = {\r\n    init: function () {\r\n        this.setColour(Blockly.Msg.SDCARD_HUE);\r\n        this.setPreviousStatement(true);\r\n        this.setNextStatement(true);\r\n        this.setInputsInline(true);\r\n\r\n        this.appendDummyInput()\r\n            .appendField('SD mount');\r\n    }\r\n}\r\nBlockly.Python['sdcard_mountsd'] = function (block) {\r\n    return 'uos.mountsd()\\n';\r\n}\r\n\r\nBlockly.Blocks['sdcard_listdir'] = {\r\n    init: function () {\r\n        this.setColour(Blockly.Msg.SDCARD_HUE);\r\n        this.setPreviousStatement(true);\r\n        this.setNextStatement(true);\r\n        this.setInputsInline(true);\r\n\r\n        this.appendDummyInput()\r\n            .appendField('Listdir: ');\r\n        this.appendValueInput('PATH');\r\n    }\r\n}\r\nBlockly.Python['sdcard_listdir'] = function (block) {\r\n    var path = Blockly.Python.valueToCode(block, 'PATH', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    return 'uos.listdir(' + path + ')';\r\n}\r\n\r\n/**\r\n * GPIO\r\n */\r\n\r\n\r\n/**\r\n * PWM\r\n */\r\n\r\n\r\n/**\r\n * ADC\r\n */\r\n\r\n\r\n/**\r\n * DAC\r\n */\r\n\r\n\r\n/**\r\n * UART\r\n */\r\n\r\n\r\n// Servo\r\n\r\n// NXT_MOTOR_HUE\r\n\r\n\r\n\r\n\r\nBlockly.Blocks['basic_on_setup'] = {\r\n    init: function () {\r\n        this.setColour(Blockly.Msg.BASIC_HUE);\r\n        this.setNextStatement(true);\r\n\r\n        this.setDeletable(false);\r\n\r\n        this.appendDummyInput()\r\n            .appendField('Setup');\r\n    }\r\n}\r\nBlockly.Python['basic_on_setup'] = function (block) {\r\n    return '# Define Event\\n';\r\n}\r\n\r\n\r\n\r\n/**\r\n * Button\r\n */\r\n\r\n\r\nBlockly.Blocks['button_for_callback'] = {\r\n    init: function () {\r\n        this.setColour(Blockly.Msg.BASIC_HUE);\r\n        this.setPreviousStatement(true);\r\n        this.setNextStatement(true);\r\n        this.setInputsInline(true);\r\n\r\n        this.appendDummyInput()\r\n            .appendField('button')\r\n            .appendField(new Blockly.FieldDropdown([['A', 'A'], ['B', 'B'], ['C', 'C']]), 'BUTTON')\r\n            .appendField(' ')\r\n            .appendField(new Blockly.FieldDropdown([['released for', 'releasedFor']]), 'EVENT')\r\n        this.appendValueInput('DURATION');\r\n        this.appendDummyInput()\r\n            .appendField('s');\r\n        this.appendDummyInput()\r\n            .appendField(' to ')\r\n            .appendField(new Blockly.FieldTextInput(''), 'FUNC');\r\n    }\r\n}\r\nBlockly.Python['button_for_callback'] = function (block) {\r\n    var button = block.getFieldValue('BUTTON') || 'A';\r\n    var event = block.getFieldValue('EVENT') || 'wasPressed';\r\n    var func = block.getFieldValue('FUNC') || 'None';\r\n    var duration = Blockly.Python.valueToCode(block, 'DURATION', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    var code = 'button' + button + '.' + event + '(' + duration + ', callback=' + func + ')\\n';\r\n    return code;\r\n}\r\n\r\n\r\n\r\nBlockly.Blocks['button_state_for'] = {\r\n    init: function () {\r\n        this.setColour(Blockly.Msg.BASIC_HUE);\r\n        this.setOutput(true);\r\n        this.setInputsInline(true);\r\n\r\n        this.appendDummyInput()\r\n            .appendField('button')\r\n            .appendField(new Blockly.FieldDropdown([['A', 'A'], ['B', 'B'], ['C', 'C']]), 'BUTTON')\r\n            .appendField(' ')\r\n            .appendField(new Blockly.FieldDropdown([['pressed for', 'pressedFor'], ['released for', 'releasedFor']]), 'EVENT')\r\n        this.appendValueInput('DURATION');\r\n        this.appendDummyInput()\r\n            .appendField('s');\r\n    }\r\n}\r\nBlockly.Python['button_state_for'] = function (block) {\r\n    var button = block.getFieldValue('BUTTON') || 'A';\r\n    var event = block.getFieldValue('EVENT') || 'wasPressed';\r\n    var duration = Blockly.Python.valueToCode(block, 'DURATION', Blockly.Python.ORDER_FUNCTION_CALL) || '';\r\n    var code = 'button' + button + '.' + event + '(' + duration + ')';\r\n    return [code, Blockly.Python.ORDER_CONDITIONAL];\r\n}\r\n\r\nBlockly.Blocks['remote_add_button'] = {\r\n    init: function () {\r\n        this.setColour(Blockly.Msg.REMOTE_HUE);\r\n        this.setPreviousStatement(true);\r\n        this.setNextStatement(true);\r\n\r\n        this.appendDummyInput()\r\n            .appendField('Add Remote Button ')\r\n            .appendField(new Blockly.FieldTextInput('ButtonName'), 'NAME')\r\n            .appendField('to do ');\r\n        this.appendStatementInput('FUNC');\r\n    }\r\n}\r\nBlockly.Python['remote_add_button'] = function (block) {\r\n    var name = block.getFieldValue('NAME') || 'ButtonName';\r\n    var func = block.getFieldValue('NAME') || 'ButtonName';\r\n    func = func.replace(/ /g, '_');\r\n    func = '_remote_' + func;\r\n    var data = Blockly.Python.statementToCode(block, 'FUNC', Blockly.Python.ORDER_FUNCTION_CALL) || '  pass';\r\n    var globalList = Blockly.defineGlobal();\r\n    var code = 'def ' + func + '():\\n' + data;\r\n    if (globalList.length > 0) {\r\n        // code = 'def ' + func + '():\\n  global ' + globalList.join(', ') + '\\n' + data;\r\n        code = 'def ' + func + '():\\n  # global params \\n' + data;\r\n    }\r\n    code = 'def ' + func + '():\\n  # global params \\n' + data;\r\n    Blockly.addRemote({\r\n        id: block.id,\r\n        event: func,\r\n        code: code,\r\n        name: name,\r\n        type: 'button'\r\n    });\r\n\r\n    return '';\r\n}\r\n\r\nBlockly.Blocks['remote_add_label'] = {\r\n    init: function () {\r\n        this.setColour(Blockly.Msg.REMOTE_HUE);\r\n        this.setPreviousStatement(true);\r\n        this.setNextStatement(true);\r\n        this.setInputsInline(true);\r\n\r\n        this.appendDummyInput()\r\n            .appendField('Add Remote Label ')\r\n            .appendField(new Blockly.FieldTextInput('LabelName'), 'NAME')\r\n            .appendField('to show ');\r\n        this.appendValueInput('DATA');\r\n    }\r\n}\r\nBlockly.Python['remote_add_label'] = function (block) {\r\n    var name = block.getFieldValue('NAME') || 'LabelName';\r\n    var func = block.getFieldValue('NAME') || 'LabelName';\r\n    func = func.replace(/ /g, '_');\r\n    func = '_remote_' + func;\r\n    var data = Blockly.Python.valueToCode(block, 'DATA', Blockly.Python.ORDER_NONE) || '';\r\n    var globalList = Blockly.defineGlobal();\r\n    var code = 'def ' + func + '():\\n  return ' + data;\r\n    if (globalList.length > 0) {\r\n        // code = 'def ' + func + '():\\n  global ' + globalList.join(', ') + '\\n  return ' + data;\r\n        code = 'def ' + func + '():\\n  # global params\\n  return ' + data;\r\n    }\r\n    code = 'def ' + func + '():\\n  # global params\\n  return ' + data;\r\n    Blockly.addRemote({\r\n        id: block.id,\r\n        event: func,\r\n        code: code,\r\n        name: name,\r\n        type: 'label'\r\n    });\r\n\r\n    return '';\r\n}\r\n\r\nBlockly.Blocks['music_sing'] = {\r\n    init: function () {\r\n\r\n    }\r\n}\r\nBlockly.Python['music_sing'] = function (block) {\r\n    return '';\r\n}\r\n\r\nBlockly.Blocks['music_set_beat'] = {\r\n    init: function () {\r\n\r\n    }\r\n}\r\nBlockly.Python['music_set_beat'] = function (block) {\r\n    return '';\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * LCD\r\n */\r\n\n\n//# sourceURL=webpack:///./app/m52.js?");

/***/ }),

/***/ 0:

  !*** multi ./app/m52 ./app/components/m5_title ./app/components/m5_label ./app/components/m5_rect ./app/components/m5_circle ./app/components/m5_image ./app/components/m5_event ./app/components/m5_button ./app/components/m5_speaker ./app/components/m5_pins ./app/components/m5_bala ./app/components/m5_timer ./app/components/m5_step_motor ./app/components/m5_bala_motor ./app/components/m5_rgb ./app/components/m5_imu ./app/components/m5_dht12 ./app/components/m5_angle ./app/components/m5_pir ./app/components/m5_neopixel ./app/components/m5_joystick ./app/components/m5_light ./app/components/m5_earth ./app/components/m5_makey ./app/components/m5_servo ./app/components/m5_lego_motor ./app/components/m5_lcd ./app/components/m5_emoji ./app/components/m5_gpio ./app/components/m5_pwm ./app/components/m5_adc ./app/components/m5_dac ./app/components/m5_uart ./app/components/m5_execute ./app/components/m5_remote ./app/components/m5_pulse ./app/components/m5_weigh ./app/components/m5_iic ./app/components/m5_track ./app/components/m5_byo ./app/components/m5_relay ./app/components/m5_tof ./app/components/m5_ir ./app/components/m5_ncir ./app/components/m5_ext_io ./app/components/m5_mqtt ./app/components/m5_network ./app/components/m5_color ./app/components/m5_finger ./app/components/m5_rfid ./app/components/m5_lidarcar ./app/components/m5_lorawan ./app/components/m5_cardkb ***!
  \**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! ./app/m52 */\"./app/m52.js\");\n__webpack_require__(/*! ./app/components/m5_title */\"./app/components/m5_title.js\");\n__webpack_require__(/*! ./app/components/m5_label */\"./app/components/m5_label.js\");\n__webpack_require__(/*! ./app/components/m5_rect */\"./app/components/m5_rect.js\");\n__webpack_require__(/*! ./app/components/m5_circle */\"./app/components/m5_circle.js\");\n__webpack_require__(/*! ./app/components/m5_image */\"./app/components/m5_image.js\");\n__webpack_require__(/*! ./app/components/m5_event */\"./app/components/m5_event.js\");\n__webpack_require__(/*! ./app/components/m5_button */\"./app/components/m5_button.js\");\n__webpack_require__(/*! ./app/components/m5_speaker */\"./app/components/m5_speaker.js\");\n__webpack_require__(/*! ./app/components/m5_pins */\"./app/components/m5_pins.js\");\n__webpack_require__(/*! ./app/components/m5_bala */\"./app/components/m5_bala.js\");\n__webpack_require__(/*! ./app/components/m5_timer */\"./app/components/m5_timer.js\");\n__webpack_require__(/*! ./app/components/m5_step_motor */\"./app/components/m5_step_motor.js\");\n__webpack_require__(/*! ./app/components/m5_bala_motor */\"./app/components/m5_bala_motor.js\");\n__webpack_require__(/*! ./app/components/m5_rgb */\"./app/components/m5_rgb.js\");\n__webpack_require__(/*! ./app/components/m5_imu */\"./app/components/m5_imu.js\");\n__webpack_require__(/*! ./app/components/m5_dht12 */\"./app/components/m5_dht12.js\");\n__webpack_require__(/*! ./app/components/m5_angle */\"./app/components/m5_angle.js\");\n__webpack_require__(/*! ./app/components/m5_pir */\"./app/components/m5_pir.js\");\n__webpack_require__(/*! ./app/components/m5_neopixel */\"./app/components/m5_neopixel.js\");\n__webpack_require__(/*! ./app/components/m5_joystick */\"./app/components/m5_joystick.js\");\n__webpack_require__(/*! ./app/components/m5_light */\"./app/components/m5_light.js\");\n__webpack_require__(/*! ./app/components/m5_earth */\"./app/components/m5_earth.js\");\n__webpack_require__(/*! ./app/components/m5_makey */\"./app/components/m5_makey.js\");\n__webpack_require__(/*! ./app/components/m5_servo */\"./app/components/m5_servo.js\");\n__webpack_require__(/*! ./app/components/m5_lego_motor */\"./app/components/m5_lego_motor.js\");\n__webpack_require__(/*! ./app/components/m5_lcd */\"./app/components/m5_lcd.js\");\n__webpack_require__(/*! ./app/components/m5_emoji */\"./app/components/m5_emoji.js\");\n__webpack_require__(/*! ./app/components/m5_gpio */\"./app/components/m5_gpio.js\");\n__webpack_require__(/*! ./app/components/m5_pwm */\"./app/components/m5_pwm.js\");\n__webpack_require__(/*! ./app/components/m5_adc */\"./app/components/m5_adc.js\");\n__webpack_require__(/*! ./app/components/m5_dac */\"./app/components/m5_dac.js\");\n__webpack_require__(/*! ./app/components/m5_uart */\"./app/components/m5_uart.js\");\n__webpack_require__(/*! ./app/components/m5_execute */\"./app/components/m5_execute.js\");\n__webpack_require__(/*! ./app/components/m5_remote */\"./app/components/m5_remote.js\");\n__webpack_require__(/*! ./app/components/m5_pulse */\"./app/components/m5_pulse.js\");\n__webpack_require__(/*! ./app/components/m5_weigh */\"./app/components/m5_weigh.js\");\n__webpack_require__(/*! ./app/components/m5_iic */\"./app/components/m5_iic.js\");\n__webpack_require__(/*! ./app/components/m5_track */\"./app/components/m5_track.js\");\n__webpack_require__(/*! ./app/components/m5_byo */\"./app/components/m5_byo.js\");\n__webpack_require__(/*! ./app/components/m5_relay */\"./app/components/m5_relay.js\");\n__webpack_require__(/*! ./app/components/m5_tof */\"./app/components/m5_tof.js\");\n__webpack_require__(/*! ./app/components/m5_ir */\"./app/components/m5_ir.js\");\n__webpack_require__(/*! ./app/components/m5_ncir */\"./app/components/m5_ncir.js\");\n__webpack_require__(/*! ./app/components/m5_ext_io */\"./app/components/m5_ext_io.js\");\n__webpack_require__(/*! ./app/components/m5_mqtt */\"./app/components/m5_mqtt.js\");\n__webpack_require__(/*! ./app/components/m5_network */\"./app/components/m5_network.js\");\n__webpack_require__(/*! ./app/components/m5_color */\"./app/components/m5_color.js\");\n__webpack_require__(/*! ./app/components/m5_finger */\"./app/components/m5_finger.js\");\n__webpack_require__(/*! ./app/components/m5_rfid */\"./app/components/m5_rfid.js\");\n__webpack_require__(/*! ./app/components/m5_lidarcar */\"./app/components/m5_lidarcar.js\");\n__webpack_require__(/*! ./app/components/m5_lorawan */\"./app/components/m5_lorawan.js\");\nmodule.exports = __webpack_require__(/*! ./app/components/m5_cardkb */\"./app/components/m5_cardkb.js\");\n\n\n//# sourceURL=webpack:///multi_./app/m52_./app/components/m5_title_./app/components/m5_label_./app/components/m5_rect_./app/components/m5_circle_./app/components/m5_image_./app/components/m5_event_./app/components/m5_button_./app/components/m5_speaker_./app/components/m5_pins_./app/components/m5_bala_./app/components/m5_timer_./app/components/m5_step_motor_./app/components/m5_bala_motor_./app/components/m5_rgb_./app/components/m5_imu_./app/components/m5_dht12_./app/components/m5_angle_./app/components/m5_pir_./app/components/m5_neopixel_./app/components/m5_joystick_./app/components/m5_light_./app/components/m5_earth_./app/components/m5_makey_./app/components/m5_servo_./app/components/m5_lego_motor_./app/components/m5_lcd_./app/components/m5_emoji_./app/components/m5_gpio_./app/components/m5_pwm_./app/components/m5_adc_./app/components/m5_dac_./app/components/m5_uart_./app/components/m5_execute_./app/components/m5_remote_./app/components/m5_pulse_./app/components/m5_weigh_./app/components/m5_iic_./app/components/m5_track_./app/components/m5_byo_./app/components/m5_relay_./app/components/m5_tof_./app/components/m5_ir_./app/components/m5_ncir_./app/components/m5_ext_io_./app/components/m5_mqtt_./app/components/m5_network_./app/components/m5_color_./app/components/m5_finger_./app/components/m5_rfid_./app/components/m5_lidarcar_./app/components/m5_lorawan_./app/components/m5_cardkb?");

/***/ })

/******/ });